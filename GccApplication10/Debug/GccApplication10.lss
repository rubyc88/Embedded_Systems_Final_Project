
GccApplication10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  00000768  000007dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000768  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000864  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001725  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000094d  00000000  00000000  00002051  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000087e  00000000  00000000  0000299e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  0000321c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c2  00000000  00000000  0000333c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b14  00000000  00000000  000037fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00004312  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  6c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  70:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  74:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  78:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e8 e6       	ldi	r30, 0x68	; 104
  90:	f7 e0       	ldi	r31, 0x07	; 7
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a8 35       	cpi	r26, 0x58	; 88
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>
  9e:	0e 94 1d 01 	call	0x23a	; 0x23a <main>
  a2:	0c 94 b2 03 	jmp	0x764	; 0x764 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <Port>:
	}
}

void Port(char a)
{
	if(a & 1)
  aa:	80 ff       	sbrs	r24, 0
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <Port+0x8>
		if(a == LCD_PORTC6)
		PORTC |= (1<<PC6);
		else if(a == LCD_PORTC7)
		PORTC |= (1<<PC7);
		else if(a == LCD_PORTD4)
		PORTD |= (1<<PD4);
  ae:	5c 9a       	sbi	0x0b, 4	; 11
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <Port+0xa>
		if(a == LCD_PORTC6)
		PORTC &= ~(1<<PC6);
		else if(a == LCD_PORTC7)
		PORTC &= ~(1<<PC7);
		else if(a == LCD_PORTD4)
		PORTD &= ~(1<<PD4);
  b2:	5c 98       	cbi	0x0b, 4	; 11
	if(a & 1)
	pinChange(D4,1);
	else
	pinChange(D4,0);
	
	if(a & 2)
  b4:	81 ff       	sbrs	r24, 1
  b6:	02 c0       	rjmp	.+4      	; 0xbc <Port+0x12>
		else if(a == LCD_PORTC7)
		PORTC |= (1<<PC7);
		else if(a == LCD_PORTD4)
		PORTD |= (1<<PD4);
		else if(a == LCD_PORTD5)
		PORTD |= (1<<PD5);
  b8:	5d 9a       	sbi	0x0b, 5	; 11
  ba:	01 c0       	rjmp	.+2      	; 0xbe <Port+0x14>
		else if(a == LCD_PORTC7)
		PORTC &= ~(1<<PC7);
		else if(a == LCD_PORTD4)
		PORTD &= ~(1<<PD4);
		else if(a == LCD_PORTD5)
		PORTD &= ~(1<<PD5);
  bc:	5d 98       	cbi	0x0b, 5	; 11
	if(a & 2)
	pinChange(D5,1);
	else
	pinChange(D5,0);
	
	if(a & 4)
  be:	82 ff       	sbrs	r24, 2
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <Port+0x1c>
		else if(a == LCD_PORTD4)
		PORTD |= (1<<PD4);
		else if(a == LCD_PORTD5)
		PORTD |= (1<<PD5);
		else if(a == LCD_PORTD6)
		PORTD |= (1<<PD6);
  c2:	5e 9a       	sbi	0x0b, 6	; 11
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <Port+0x1e>
		else if(a == LCD_PORTD4)
		PORTD &= ~(1<<PD4);
		else if(a == LCD_PORTD5)
		PORTD &= ~(1<<PD5);
		else if(a == LCD_PORTD6)
		PORTD &= ~(1<<PD6);
  c6:	5e 98       	cbi	0x0b, 6	; 11
	if(a & 4)
	pinChange(D6,1);
	else
	pinChange(D6,0);
	
	if(a & 8)
  c8:	83 ff       	sbrs	r24, 3
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <Port+0x26>
		else if(a == LCD_PORTD5)
		PORTD |= (1<<PD5);
		else if(a == LCD_PORTD6)
		PORTD |= (1<<PD6);
		else if(a == LCD_PORTD7)
		PORTD |= (1<<PD7);
  cc:	5f 9a       	sbi	0x0b, 7	; 11
  ce:	08 95       	ret
		else if(a == LCD_PORTD5)
		PORTD &= ~(1<<PD5);
		else if(a == LCD_PORTD6)
		PORTD &= ~(1<<PD6);
		else if(a == LCD_PORTD7)
		PORTD &= ~(1<<PD7);
  d0:	5f 98       	cbi	0x0b, 7	; 11
  d2:	08 95       	ret

000000d4 <Cmd>:
void pinChange(int a, int b)
{
	if(b == 0)
	{
		if(a == LCD_PORTC6)
		PORTC &= ~(1<<PC6);
  d4:	46 98       	cbi	0x08, 6	; 8
	pinChange(D7,0);
}
void Cmd(char a)
{
	pinChange(RS,0);             // => RS = 0
	Port(a);
  d6:	0e 94 55 00 	call	0xaa	; 0xaa <Port>
	else
	{
		if(a == LCD_PORTC6)
		PORTC |= (1<<PC6);
		else if(a == LCD_PORTC7)
		PORTC |= (1<<PC7);
  da:	47 9a       	sbi	0x08, 7	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	8f e9       	ldi	r24, 0x9F	; 159
  de:	9f e0       	ldi	r25, 0x0F	; 15
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <Cmd+0xc>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <Cmd+0x12>
  e6:	00 00       	nop
	if(b == 0)
	{
		if(a == LCD_PORTC6)
		PORTC &= ~(1<<PC6);
		else if(a == LCD_PORTC7)
		PORTC &= ~(1<<PC7);
  e8:	47 98       	cbi	0x08, 7	; 8
  ea:	8f e9       	ldi	r24, 0x9F	; 159
  ec:	9f e0       	ldi	r25, 0x0F	; 15
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <Cmd+0x1a>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <Cmd+0x20>
  f4:	00 00       	nop
  f6:	08 95       	ret

000000f8 <Clear>:
	pinChange(EN,0);             // => E = 0
	_delay_ms(1);
}

void Clear(){
	Cmd(0);
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	0e 94 6a 00 	call	0xd4	; 0xd4 <Cmd>
	Cmd(1);
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	0e 94 6a 00 	call	0xd4	; 0xd4 <Cmd>
 104:	08 95       	ret

00000106 <Set_Cursor>:
}

void Set_Cursor(char a, char b){
 106:	cf 93       	push	r28
 108:	c6 2f       	mov	r28, r22
	char temp,z,y;
	if(a == 1)
 10a:	81 30       	cpi	r24, 0x01	; 1
 10c:	59 f4       	brne	.+22     	; 0x124 <Set_Cursor+0x1e>
	{
		temp = 0x80 + b;
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Cmd(z);
 10e:	80 e8       	ldi	r24, 0x80	; 128
 110:	86 0f       	add	r24, r22
 112:	82 95       	swap	r24
 114:	8f 70       	andi	r24, 0x0F	; 15
 116:	0e 94 6a 00 	call	0xd4	; 0xd4 <Cmd>
		Cmd(y);
 11a:	8c 2f       	mov	r24, r28
 11c:	8f 70       	andi	r24, 0x0F	; 15
 11e:	0e 94 6a 00 	call	0xd4	; 0xd4 <Cmd>
 122:	0c c0       	rjmp	.+24     	; 0x13c <Set_Cursor+0x36>
	}
	else if(a == 2)
 124:	82 30       	cpi	r24, 0x02	; 2
 126:	51 f4       	brne	.+20     	; 0x13c <Set_Cursor+0x36>
	{
		temp = 0xC0 + b;
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Cmd(z);
 128:	80 ec       	ldi	r24, 0xC0	; 192
 12a:	86 0f       	add	r24, r22
 12c:	82 95       	swap	r24
 12e:	8f 70       	andi	r24, 0x0F	; 15
 130:	0e 94 6a 00 	call	0xd4	; 0xd4 <Cmd>
		Cmd(y);
 134:	8c 2f       	mov	r24, r28
 136:	8f 70       	andi	r24, 0x0F	; 15
 138:	0e 94 6a 00 	call	0xd4	; 0xd4 <Cmd>
	}
}
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <Init>:

void Init()
{
	Port(0x00);
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	0e 94 55 00 	call	0xaa	; 0xaa <Port>
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	89 ef       	ldi	r24, 0xF9	; 249
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <Init+0xc>
 154:	00 c0       	rjmp	.+0      	; 0x156 <Init+0x16>
 156:	00 00       	nop
	_delay_ms(20);
	Cmd(0x03);
 158:	83 e0       	ldi	r24, 0x03	; 3
 15a:	0e 94 6a 00 	call	0xd4	; 0xd4 <Cmd>
 15e:	8f e1       	ldi	r24, 0x1F	; 31
 160:	9e e4       	ldi	r25, 0x4E	; 78
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <Init+0x22>
 166:	00 c0       	rjmp	.+0      	; 0x168 <Init+0x28>
 168:	00 00       	nop
	_delay_ms(5);
	Cmd(0x03);
 16a:	83 e0       	ldi	r24, 0x03	; 3
 16c:	0e 94 6a 00 	call	0xd4	; 0xd4 <Cmd>
 170:	8f ed       	ldi	r24, 0xDF	; 223
 172:	9b ea       	ldi	r25, 0xAB	; 171
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <Init+0x34>
 178:	00 c0       	rjmp	.+0      	; 0x17a <Init+0x3a>
 17a:	00 00       	nop
	_delay_ms(11);
	Cmd(0x03);
 17c:	83 e0       	ldi	r24, 0x03	; 3
 17e:	0e 94 6a 00 	call	0xd4	; 0xd4 <Cmd>
	Cmd(0x02);
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	0e 94 6a 00 	call	0xd4	; 0xd4 <Cmd>
	Cmd(0x02);
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	0e 94 6a 00 	call	0xd4	; 0xd4 <Cmd>
	Cmd(0x08);
 18e:	88 e0       	ldi	r24, 0x08	; 8
 190:	0e 94 6a 00 	call	0xd4	; 0xd4 <Cmd>
	Cmd(0x00);
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	0e 94 6a 00 	call	0xd4	; 0xd4 <Cmd>
	Cmd(0x0C);
 19a:	8c e0       	ldi	r24, 0x0C	; 12
 19c:	0e 94 6a 00 	call	0xd4	; 0xd4 <Cmd>
	Cmd(0x00);
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	0e 94 6a 00 	call	0xd4	; 0xd4 <Cmd>
	Cmd(0x06);
 1a6:	86 e0       	ldi	r24, 0x06	; 6
 1a8:	0e 94 6a 00 	call	0xd4	; 0xd4 <Cmd>
 1ac:	08 95       	ret

000001ae <Write_Char>:
}

void Write_Char(char a)
{
 1ae:	cf 93       	push	r28
 1b0:	c8 2f       	mov	r28, r24
		PORTD &= ~(1<<PD7);
	}
	else
	{
		if(a == LCD_PORTC6)
		PORTC |= (1<<PC6);
 1b2:	46 9a       	sbi	0x08, 6	; 8
{
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS,1);             // => RS = 1
	Port(y>>4);             //Data transfer
 1b4:	82 95       	swap	r24
 1b6:	8f 70       	andi	r24, 0x0F	; 15
 1b8:	0e 94 55 00 	call	0xaa	; 0xaa <Port>
	else
	{
		if(a == LCD_PORTC6)
		PORTC |= (1<<PC6);
		else if(a == LCD_PORTC7)
		PORTC |= (1<<PC7);
 1bc:	47 9a       	sbi	0x08, 7	; 8
 1be:	8f e9       	ldi	r24, 0x9F	; 159
 1c0:	9f e0       	ldi	r25, 0x0F	; 15
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <Write_Char+0x14>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <Write_Char+0x1a>
 1c8:	00 00       	nop
	if(b == 0)
	{
		if(a == LCD_PORTC6)
		PORTC &= ~(1<<PC6);
		else if(a == LCD_PORTC7)
		PORTC &= ~(1<<PC7);
 1ca:	47 98       	cbi	0x08, 7	; 8
 1cc:	8f e9       	ldi	r24, 0x9F	; 159
 1ce:	9f e0       	ldi	r25, 0x0F	; 15
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <Write_Char+0x22>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <Write_Char+0x28>
 1d6:	00 00       	nop
	Port(y>>4);             //Data transfer
	pinChange(EN,1);
	_delay_ms(1);
	pinChange(EN,0);
	_delay_ms(1);
	Port(temp);
 1d8:	8c 2f       	mov	r24, r28
 1da:	8f 70       	andi	r24, 0x0F	; 15
 1dc:	0e 94 55 00 	call	0xaa	; 0xaa <Port>
	else
	{
		if(a == LCD_PORTC6)
		PORTC |= (1<<PC6);
		else if(a == LCD_PORTC7)
		PORTC |= (1<<PC7);
 1e0:	47 9a       	sbi	0x08, 7	; 8
 1e2:	8f e9       	ldi	r24, 0x9F	; 159
 1e4:	9f e0       	ldi	r25, 0x0F	; 15
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <Write_Char+0x38>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <Write_Char+0x3e>
 1ec:	00 00       	nop
	if(b == 0)
	{
		if(a == LCD_PORTC6)
		PORTC &= ~(1<<PC6);
		else if(a == LCD_PORTC7)
		PORTC &= ~(1<<PC7);
 1ee:	47 98       	cbi	0x08, 7	; 8
 1f0:	8f e9       	ldi	r24, 0x9F	; 159
 1f2:	9f e0       	ldi	r25, 0x0F	; 15
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <Write_Char+0x46>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <Write_Char+0x4c>
 1fa:	00 00       	nop
	Port(temp);
	pinChange(EN,1);
	_delay_ms(1);
	pinChange(EN,0);
	_delay_ms(1);
}
 1fc:	cf 91       	pop	r28
 1fe:	08 95       	ret

00000200 <Write_String>:

void Write_String(char *a){
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	ec 01       	movw	r28, r24
	int i;
	for(i=0;a[i]!='\0';i++)
 206:	88 81       	ld	r24, Y
 208:	88 23       	and	r24, r24
 20a:	31 f0       	breq	.+12     	; 0x218 <Write_String+0x18>
 20c:	21 96       	adiw	r28, 0x01	; 1
	Write_Char(a[i]);
 20e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <Write_Char>
	_delay_ms(1);
}

void Write_String(char *a){
	int i;
	for(i=0;a[i]!='\0';i++)
 212:	89 91       	ld	r24, Y+
 214:	81 11       	cpse	r24, r1
 216:	fb cf       	rjmp	.-10     	; 0x20e <Write_String+0xe>
	Write_Char(a[i]);
}
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	08 95       	ret

0000021e <Shift_Right>:

void Shift_Right(){
	Cmd(0x01);
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	0e 94 6a 00 	call	0xd4	; 0xd4 <Cmd>
	Cmd(0x0C);
 224:	8c e0       	ldi	r24, 0x0C	; 12
 226:	0e 94 6a 00 	call	0xd4	; 0xd4 <Cmd>
 22a:	08 95       	ret

0000022c <Shift_Left>:
}
void Shift_Left(){
	Cmd(0x01);
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	0e 94 6a 00 	call	0xd4	; 0xd4 <Cmd>
	Cmd(0x08);
 232:	88 e0       	ldi	r24, 0x08	; 8
 234:	0e 94 6a 00 	call	0xd4	; 0xd4 <Cmd>
 238:	08 95       	ret

0000023a <main>:
uint8_t TWIread(uint8_t slaveid, uint8_t addr);
void TCS34725init();


int main(void)
{
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	00 d0       	rcall	.+0      	; 0x240 <main+0x6>
 240:	00 d0       	rcall	.+0      	; 0x242 <main+0x8>
 242:	1f 92       	push	r1
 244:	cd b7       	in	r28, 0x3d	; 61
 246:	de b7       	in	r29, 0x3e	; 62
	DDRD = 0xFF;
 248:	8f ef       	ldi	r24, 0xFF	; 255
 24a:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0xFF;
 24c:	87 b9       	out	0x07, r24	; 7
	int i;
	int blue_random;
	int red_random;
	int green_random;
	char snum[5];
	Init();
 24e:	0e 94 a0 00 	call	0x140	; 0x140 <Init>
	Clear();
 252:	0e 94 7c 00 	call	0xf8	; 0xf8 <Clear>
	Set_Cursor(1,2);
 256:	62 e0       	ldi	r22, 0x02	; 2
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	0e 94 83 00 	call	0x106	; 0x106 <Set_Cursor>
	Write_String("COLOR SENSOR");	
 25e:	84 e0       	ldi	r24, 0x04	; 4
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	0e 94 00 01 	call	0x200	; 0x200 <Write_String>
	
	Set_Cursor(2,0);
 266:	60 e0       	ldi	r22, 0x00	; 0
 268:	82 e0       	ldi	r24, 0x02	; 2
 26a:	0e 94 83 00 	call	0x106	; 0x106 <Set_Cursor>
	Write_String("R:");
 26e:	81 e1       	ldi	r24, 0x11	; 17
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	0e 94 00 01 	call	0x200	; 0x200 <Write_String>

	
	Set_Cursor(2,6);
 276:	66 e0       	ldi	r22, 0x06	; 6
 278:	82 e0       	ldi	r24, 0x02	; 2
 27a:	0e 94 83 00 	call	0x106	; 0x106 <Set_Cursor>
	Write_String("G:");
 27e:	84 e1       	ldi	r24, 0x14	; 20
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	0e 94 00 01 	call	0x200	; 0x200 <Write_String>

	
	Set_Cursor(2,12);
 286:	6c e0       	ldi	r22, 0x0C	; 12
 288:	82 e0       	ldi	r24, 0x02	; 2
 28a:	0e 94 83 00 	call	0x106	; 0x106 <Set_Cursor>
	Write_String("B:");
 28e:	87 e1       	ldi	r24, 0x17	; 23
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	0e 94 00 01 	call	0x200	; 0x200 <Write_String>

	while(1){
		// Red Value
		red_random = rand() % 255;
 296:	aa 24       	eor	r10, r10
 298:	aa 94       	dec	r10
 29a:	b1 2c       	mov	r11, r1
 29c:	0e 94 0a 03 	call	0x614	; 0x614 <rand>
 2a0:	b5 01       	movw	r22, r10
 2a2:	0e 94 96 02 	call	0x52c	; 0x52c <__divmodhi4>
 2a6:	e8 2e       	mov	r14, r24
 2a8:	f9 2e       	mov	r15, r25
 2aa:	08 2f       	mov	r16, r24
 2ac:	19 2f       	mov	r17, r25
		Set_Cursor(2,2);
 2ae:	62 e0       	ldi	r22, 0x02	; 2
 2b0:	82 e0       	ldi	r24, 0x02	; 2
 2b2:	0e 94 83 00 	call	0x106	; 0x106 <Set_Cursor>
		if(red_random <100){
 2b6:	04 36       	cpi	r16, 0x64	; 100
 2b8:	11 05       	cpc	r17, r1
 2ba:	44 f4       	brge	.+16     	; 0x2cc <main+0x92>
			Write_String("0");
 2bc:	8a e1       	ldi	r24, 0x1A	; 26
 2be:	91 e0       	ldi	r25, 0x01	; 1
 2c0:	0e 94 00 01 	call	0x200	; 0x200 <Write_String>
			Set_Cursor(2,3);
 2c4:	63 e0       	ldi	r22, 0x03	; 3
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	0e 94 83 00 	call	0x106	; 0x106 <Set_Cursor>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2cc:	4a e0       	ldi	r20, 0x0A	; 10
 2ce:	be 01       	movw	r22, r28
 2d0:	6f 5f       	subi	r22, 0xFF	; 255
 2d2:	7f 4f       	sbci	r23, 0xFF	; 255
 2d4:	8e 2d       	mov	r24, r14
 2d6:	9f 2d       	mov	r25, r15
 2d8:	0e 94 1a 03 	call	0x634	; 0x634 <__itoa_ncheck>
		}
		Write_String(itoa(red_random,snum,10));
 2dc:	0e 94 00 01 	call	0x200	; 0x200 <Write_String>
		
		// Green Value
		green_random = rand() % 255;
 2e0:	0e 94 0a 03 	call	0x614	; 0x614 <rand>
 2e4:	b5 01       	movw	r22, r10
 2e6:	0e 94 96 02 	call	0x52c	; 0x52c <__divmodhi4>
 2ea:	c8 2e       	mov	r12, r24
 2ec:	d9 2e       	mov	r13, r25
 2ee:	e8 2e       	mov	r14, r24
 2f0:	f9 2e       	mov	r15, r25
		Set_Cursor(2,8);
 2f2:	68 e0       	ldi	r22, 0x08	; 8
 2f4:	82 e0       	ldi	r24, 0x02	; 2
 2f6:	0e 94 83 00 	call	0x106	; 0x106 <Set_Cursor>
		if(green_random <100){
 2fa:	24 e6       	ldi	r18, 0x64	; 100
 2fc:	e2 16       	cp	r14, r18
 2fe:	f1 04       	cpc	r15, r1
 300:	44 f4       	brge	.+16     	; 0x312 <main+0xd8>
			Write_String("0");
 302:	8a e1       	ldi	r24, 0x1A	; 26
 304:	91 e0       	ldi	r25, 0x01	; 1
 306:	0e 94 00 01 	call	0x200	; 0x200 <Write_String>
			Set_Cursor(2,9);
 30a:	69 e0       	ldi	r22, 0x09	; 9
 30c:	82 e0       	ldi	r24, 0x02	; 2
 30e:	0e 94 83 00 	call	0x106	; 0x106 <Set_Cursor>
 312:	4a e0       	ldi	r20, 0x0A	; 10
 314:	be 01       	movw	r22, r28
 316:	6f 5f       	subi	r22, 0xFF	; 255
 318:	7f 4f       	sbci	r23, 0xFF	; 255
 31a:	8c 2d       	mov	r24, r12
 31c:	9d 2d       	mov	r25, r13
 31e:	0e 94 1a 03 	call	0x634	; 0x634 <__itoa_ncheck>
		}
		Write_String(itoa(green_random,snum,10));
 322:	0e 94 00 01 	call	0x200	; 0x200 <Write_String>
		
		// Blue Value
		blue_random = rand() % 255;
 326:	0e 94 0a 03 	call	0x614	; 0x614 <rand>
 32a:	b5 01       	movw	r22, r10
 32c:	0e 94 96 02 	call	0x52c	; 0x52c <__divmodhi4>
 330:	88 2e       	mov	r8, r24
 332:	99 2e       	mov	r9, r25
 334:	c8 2e       	mov	r12, r24
 336:	d9 2e       	mov	r13, r25
		Set_Cursor(2,14);
 338:	6e e0       	ldi	r22, 0x0E	; 14
 33a:	82 e0       	ldi	r24, 0x02	; 2
 33c:	0e 94 83 00 	call	0x106	; 0x106 <Set_Cursor>
		
		if (blue_random < 100 ){
 340:	84 e6       	ldi	r24, 0x64	; 100
 342:	c8 16       	cp	r12, r24
 344:	d1 04       	cpc	r13, r1
 346:	44 f4       	brge	.+16     	; 0x358 <main+0x11e>
			Write_String("0");
 348:	8a e1       	ldi	r24, 0x1A	; 26
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	0e 94 00 01 	call	0x200	; 0x200 <Write_String>
			Set_Cursor(2,15);			
 350:	6f e0       	ldi	r22, 0x0F	; 15
 352:	82 e0       	ldi	r24, 0x02	; 2
 354:	0e 94 83 00 	call	0x106	; 0x106 <Set_Cursor>
 358:	4a e0       	ldi	r20, 0x0A	; 10
 35a:	be 01       	movw	r22, r28
 35c:	6f 5f       	subi	r22, 0xFF	; 255
 35e:	7f 4f       	sbci	r23, 0xFF	; 255
 360:	88 2d       	mov	r24, r8
 362:	99 2d       	mov	r25, r9
 364:	0e 94 1a 03 	call	0x634	; 0x634 <__itoa_ncheck>
		}
		Write_String(itoa(blue_random,snum,10));
 368:	0e 94 00 01 	call	0x200	; 0x200 <Write_String>
		Set_Cursor(1,2);
 36c:	62 e0       	ldi	r22, 0x02	; 2
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	0e 94 83 00 	call	0x106	; 0x106 <Set_Cursor>
		Write_String("            ");
 374:	8c e1       	ldi	r24, 0x1C	; 28
 376:	91 e0       	ldi	r25, 0x01	; 1
 378:	0e 94 00 01 	call	0x200	; 0x200 <Write_String>
		if (red_random < 128 && green_random < 128 && blue_random<128){
 37c:	00 38       	cpi	r16, 0x80	; 128
 37e:	11 05       	cpc	r17, r1
 380:	0c f0       	brlt	.+2      	; 0x384 <main+0x14a>
 382:	c0 c0       	rjmp	.+384    	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 384:	90 e8       	ldi	r25, 0x80	; 128
 386:	e9 16       	cp	r14, r25
 388:	f1 04       	cpc	r15, r1
 38a:	6c f4       	brge	.+26     	; 0x3a6 <main+0x16c>
 38c:	20 e8       	ldi	r18, 0x80	; 128
 38e:	c2 16       	cp	r12, r18
 390:	d1 04       	cpc	r13, r1
 392:	4c f4       	brge	.+18     	; 0x3a6 <main+0x16c>
					Set_Cursor(1,6);
 394:	66 e0       	ldi	r22, 0x06	; 6
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	0e 94 83 00 	call	0x106	; 0x106 <Set_Cursor>
					Write_String("BLACK");
 39c:	89 e2       	ldi	r24, 0x29	; 41
 39e:	91 e0       	ldi	r25, 0x01	; 1
 3a0:	0e 94 00 01 	call	0x200	; 0x200 <Write_String>
 3a4:	85 c0       	rjmp	.+266    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
		}else if (red_random>128 && green_random >128 && blue_random> 128){
 3a6:	01 38       	cpi	r16, 0x81	; 129
 3a8:	11 05       	cpc	r17, r1
 3aa:	14 f1       	brlt	.+68     	; 0x3f0 <main+0x1b6>
 3ac:	81 e8       	ldi	r24, 0x81	; 129
 3ae:	e8 16       	cp	r14, r24
 3b0:	f1 04       	cpc	r15, r1
 3b2:	6c f0       	brlt	.+26     	; 0x3ce <main+0x194>
 3b4:	91 e8       	ldi	r25, 0x81	; 129
 3b6:	c9 16       	cp	r12, r25
 3b8:	d1 04       	cpc	r13, r1
 3ba:	4c f0       	brlt	.+18     	; 0x3ce <main+0x194>
					Set_Cursor(1,6);
 3bc:	66 e0       	ldi	r22, 0x06	; 6
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	0e 94 83 00 	call	0x106	; 0x106 <Set_Cursor>
					Write_String("WHITE");
 3c4:	8f e2       	ldi	r24, 0x2F	; 47
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	0e 94 00 01 	call	0x200	; 0x200 <Write_String>
 3cc:	71 c0       	rjmp	.+226    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
		}else if (red_random>128 && green_random <128 && blue_random< 128){
 3ce:	20 e8       	ldi	r18, 0x80	; 128
 3d0:	e2 16       	cp	r14, r18
 3d2:	f1 04       	cpc	r15, r1
 3d4:	6c f4       	brge	.+26     	; 0x3f0 <main+0x1b6>
 3d6:	80 e8       	ldi	r24, 0x80	; 128
 3d8:	c8 16       	cp	r12, r24
 3da:	d1 04       	cpc	r13, r1
 3dc:	4c f4       	brge	.+18     	; 0x3f0 <main+0x1b6>
					Set_Cursor(1,6);
 3de:	66 e0       	ldi	r22, 0x06	; 6
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	0e 94 83 00 	call	0x106	; 0x106 <Set_Cursor>
					Write_String("RED");
 3e6:	85 e3       	ldi	r24, 0x35	; 53
 3e8:	91 e0       	ldi	r25, 0x01	; 1
 3ea:	0e 94 00 01 	call	0x200	; 0x200 <Write_String>
 3ee:	60 c0       	rjmp	.+192    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
		}else if (red_random<128 && green_random >128 && blue_random< 128){
 3f0:	00 38       	cpi	r16, 0x80	; 128
 3f2:	11 05       	cpc	r17, r1
 3f4:	14 f5       	brge	.+68     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 3f6:	91 e8       	ldi	r25, 0x81	; 129
 3f8:	e9 16       	cp	r14, r25
 3fa:	f1 04       	cpc	r15, r1
 3fc:	6c f0       	brlt	.+26     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 3fe:	20 e8       	ldi	r18, 0x80	; 128
 400:	c2 16       	cp	r12, r18
 402:	d1 04       	cpc	r13, r1
 404:	4c f4       	brge	.+18     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
					Set_Cursor(1,6);
 406:	66 e0       	ldi	r22, 0x06	; 6
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	0e 94 83 00 	call	0x106	; 0x106 <Set_Cursor>
					Write_String("GREEN");
 40e:	89 e3       	ldi	r24, 0x39	; 57
 410:	91 e0       	ldi	r25, 0x01	; 1
 412:	0e 94 00 01 	call	0x200	; 0x200 <Write_String>
 416:	4c c0       	rjmp	.+152    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
		}else if (red_random<128 && green_random <128 && blue_random> 128){
 418:	80 e8       	ldi	r24, 0x80	; 128
 41a:	e8 16       	cp	r14, r24
 41c:	f1 04       	cpc	r15, r1
 41e:	6c f4       	brge	.+26     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 420:	91 e8       	ldi	r25, 0x81	; 129
 422:	c9 16       	cp	r12, r25
 424:	d1 04       	cpc	r13, r1
 426:	4c f0       	brlt	.+18     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
					Set_Cursor(1,6);
 428:	66 e0       	ldi	r22, 0x06	; 6
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	0e 94 83 00 	call	0x106	; 0x106 <Set_Cursor>
					Write_String("BLUE");
 430:	8f e3       	ldi	r24, 0x3F	; 63
 432:	91 e0       	ldi	r25, 0x01	; 1
 434:	0e 94 00 01 	call	0x200	; 0x200 <Write_String>
 438:	3b c0       	rjmp	.+118    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
		}else if (red_random>128 && green_random >128 && blue_random< 128){
 43a:	01 38       	cpi	r16, 0x81	; 129
 43c:	11 05       	cpc	r17, r1
 43e:	0c f4       	brge	.+2      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 440:	6b c0       	rjmp	.+214    	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 442:	21 e8       	ldi	r18, 0x81	; 129
 444:	e2 16       	cp	r14, r18
 446:	f1 04       	cpc	r15, r1
 448:	0c f4       	brge	.+2      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 44a:	61 c0       	rjmp	.+194    	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 44c:	80 e8       	ldi	r24, 0x80	; 128
 44e:	c8 16       	cp	r12, r24
 450:	d1 04       	cpc	r13, r1
 452:	0c f0       	brlt	.+2      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 454:	53 c0       	rjmp	.+166    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
					Set_Cursor(1,6);
 456:	66 e0       	ldi	r22, 0x06	; 6
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	0e 94 83 00 	call	0x106	; 0x106 <Set_Cursor>
					Write_String("YELLOW");
 45e:	84 e4       	ldi	r24, 0x44	; 68
 460:	91 e0       	ldi	r25, 0x01	; 1
 462:	0e 94 00 01 	call	0x200	; 0x200 <Write_String>
 466:	24 c0       	rjmp	.+72     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
		}else if (red_random<128 && green_random >128 && blue_random> 128){
 468:	91 e8       	ldi	r25, 0x81	; 129
 46a:	e9 16       	cp	r14, r25
 46c:	f1 04       	cpc	r15, r1
 46e:	6c f0       	brlt	.+26     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 470:	21 e8       	ldi	r18, 0x81	; 129
 472:	c2 16       	cp	r12, r18
 474:	d1 04       	cpc	r13, r1
 476:	4c f0       	brlt	.+18     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
					Set_Cursor(1,6);
 478:	66 e0       	ldi	r22, 0x06	; 6
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	0e 94 83 00 	call	0x106	; 0x106 <Set_Cursor>
					Write_String("CYAN");
 480:	8b e4       	ldi	r24, 0x4B	; 75
 482:	91 e0       	ldi	r25, 0x01	; 1
 484:	0e 94 00 01 	call	0x200	; 0x200 <Write_String>
 488:	13 c0       	rjmp	.+38     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
		}else if (red_random>128 && green_random <128 && blue_random> 128){
 48a:	01 38       	cpi	r16, 0x81	; 129
 48c:	11 05       	cpc	r17, r1
 48e:	84 f0       	brlt	.+32     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 490:	80 e8       	ldi	r24, 0x80	; 128
 492:	e8 16       	cp	r14, r24
 494:	f1 04       	cpc	r15, r1
 496:	64 f4       	brge	.+24     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 498:	91 e8       	ldi	r25, 0x81	; 129
 49a:	c9 16       	cp	r12, r25
 49c:	d1 04       	cpc	r13, r1
 49e:	44 f0       	brlt	.+16     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
					Set_Cursor(1,6);
 4a0:	66 e0       	ldi	r22, 0x06	; 6
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	0e 94 83 00 	call	0x106	; 0x106 <Set_Cursor>
					Write_String("MAGENTA");
 4a8:	80 e5       	ldi	r24, 0x50	; 80
 4aa:	91 e0       	ldi	r25, 0x01	; 1
 4ac:	0e 94 00 01 	call	0x200	; 0x200 <Write_String>
 4b0:	2f ef       	ldi	r18, 0xFF	; 255
 4b2:	80 e7       	ldi	r24, 0x70	; 112
 4b4:	92 e0       	ldi	r25, 0x02	; 2
 4b6:	21 50       	subi	r18, 0x01	; 1
 4b8:	80 40       	sbci	r24, 0x00	; 0
 4ba:	90 40       	sbci	r25, 0x00	; 0
 4bc:	e1 f7       	brne	.-8      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 4c0:	00 00       	nop
		}	
		
		
		for(i=0;i<1;i++){
			_delay_ms(50);
			Shift_Left();
 4c2:	0e 94 16 01 	call	0x22c	; 0x22c <Shift_Left>
 4c6:	2f ef       	ldi	r18, 0xFF	; 255
 4c8:	81 ee       	ldi	r24, 0xE1	; 225
 4ca:	94 e0       	ldi	r25, 0x04	; 4
 4cc:	21 50       	subi	r18, 0x01	; 1
 4ce:	80 40       	sbci	r24, 0x00	; 0
 4d0:	90 40       	sbci	r25, 0x00	; 0
 4d2:	e1 f7       	brne	.-8      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4d6:	00 00       	nop
 4d8:	8f e3       	ldi	r24, 0x3F	; 63
 4da:	9c e9       	ldi	r25, 0x9C	; 156
 4dc:	01 97       	sbiw	r24, 0x01	; 1
 4de:	f1 f7       	brne	.-4      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4e2:	00 00       	nop
		}
		_delay_ms(100);
		for(i=0;i<1;i++){
			_delay_ms(10);
			Shift_Right();
 4e4:	0e 94 0f 01 	call	0x21e	; 0x21e <Shift_Right>
 4e8:	9f ef       	ldi	r25, 0xFF	; 255
 4ea:	21 ee       	ldi	r18, 0xE1	; 225
 4ec:	84 e0       	ldi	r24, 0x04	; 4
 4ee:	91 50       	subi	r25, 0x01	; 1
 4f0:	20 40       	sbci	r18, 0x00	; 0
 4f2:	80 40       	sbci	r24, 0x00	; 0
 4f4:	e1 f7       	brne	.-8      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 4f8:	00 00       	nop
 4fa:	d0 ce       	rjmp	.-608    	; 0x29c <main+0x62>
					Set_Cursor(1,6);
					Write_String("BLUE");
		}else if (red_random>128 && green_random >128 && blue_random< 128){
					Set_Cursor(1,6);
					Write_String("YELLOW");
		}else if (red_random<128 && green_random >128 && blue_random> 128){
 4fc:	00 38       	cpi	r16, 0x80	; 128
 4fe:	11 05       	cpc	r17, r1
 500:	7c f0       	brlt	.+30     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 502:	c6 cf       	rjmp	.-116    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
		Set_Cursor(1,2);
		Write_String("            ");
		if (red_random < 128 && green_random < 128 && blue_random<128){
					Set_Cursor(1,6);
					Write_String("BLACK");
		}else if (red_random>128 && green_random >128 && blue_random> 128){
 504:	01 38       	cpi	r16, 0x81	; 129
 506:	11 05       	cpc	r17, r1
 508:	0c f0       	brlt	.+2      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 50a:	50 cf       	rjmp	.-352    	; 0x3ac <main+0x172>
 50c:	96 cf       	rjmp	.-212    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
					Set_Cursor(1,6);
					Write_String("BLUE");
		}else if (red_random>128 && green_random >128 && blue_random< 128){
					Set_Cursor(1,6);
					Write_String("YELLOW");
		}else if (red_random<128 && green_random >128 && blue_random> 128){
 50e:	00 38       	cpi	r16, 0x80	; 128
 510:	11 05       	cpc	r17, r1
 512:	0c f4       	brge	.+2      	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
 514:	bd cf       	rjmp	.-134    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 516:	b9 cf       	rjmp	.-142    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 518:	00 38       	cpi	r16, 0x80	; 128
 51a:	11 05       	cpc	r17, r1
 51c:	4c f6       	brge	.-110    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 51e:	a4 cf       	rjmp	.-184    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 520:	91 e8       	ldi	r25, 0x81	; 129
 522:	c9 16       	cp	r12, r25
 524:	d1 04       	cpc	r13, r1
 526:	0c f4       	brge	.+2      	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 528:	b3 cf       	rjmp	.-154    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 52a:	a6 cf       	rjmp	.-180    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>

0000052c <__divmodhi4>:
 52c:	97 fb       	bst	r25, 7
 52e:	07 2e       	mov	r0, r23
 530:	16 f4       	brtc	.+4      	; 0x536 <__divmodhi4+0xa>
 532:	00 94       	com	r0
 534:	07 d0       	rcall	.+14     	; 0x544 <__divmodhi4_neg1>
 536:	77 fd       	sbrc	r23, 7
 538:	09 d0       	rcall	.+18     	; 0x54c <__divmodhi4_neg2>
 53a:	0e 94 aa 02 	call	0x554	; 0x554 <__udivmodhi4>
 53e:	07 fc       	sbrc	r0, 7
 540:	05 d0       	rcall	.+10     	; 0x54c <__divmodhi4_neg2>
 542:	3e f4       	brtc	.+14     	; 0x552 <__divmodhi4_exit>

00000544 <__divmodhi4_neg1>:
 544:	90 95       	com	r25
 546:	81 95       	neg	r24
 548:	9f 4f       	sbci	r25, 0xFF	; 255
 54a:	08 95       	ret

0000054c <__divmodhi4_neg2>:
 54c:	70 95       	com	r23
 54e:	61 95       	neg	r22
 550:	7f 4f       	sbci	r23, 0xFF	; 255

00000552 <__divmodhi4_exit>:
 552:	08 95       	ret

00000554 <__udivmodhi4>:
 554:	aa 1b       	sub	r26, r26
 556:	bb 1b       	sub	r27, r27
 558:	51 e1       	ldi	r21, 0x11	; 17
 55a:	07 c0       	rjmp	.+14     	; 0x56a <__udivmodhi4_ep>

0000055c <__udivmodhi4_loop>:
 55c:	aa 1f       	adc	r26, r26
 55e:	bb 1f       	adc	r27, r27
 560:	a6 17       	cp	r26, r22
 562:	b7 07       	cpc	r27, r23
 564:	10 f0       	brcs	.+4      	; 0x56a <__udivmodhi4_ep>
 566:	a6 1b       	sub	r26, r22
 568:	b7 0b       	sbc	r27, r23

0000056a <__udivmodhi4_ep>:
 56a:	88 1f       	adc	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	5a 95       	dec	r21
 570:	a9 f7       	brne	.-22     	; 0x55c <__udivmodhi4_loop>
 572:	80 95       	com	r24
 574:	90 95       	com	r25
 576:	bc 01       	movw	r22, r24
 578:	cd 01       	movw	r24, r26
 57a:	08 95       	ret

0000057c <do_rand>:
 57c:	8f 92       	push	r8
 57e:	9f 92       	push	r9
 580:	af 92       	push	r10
 582:	bf 92       	push	r11
 584:	cf 92       	push	r12
 586:	df 92       	push	r13
 588:	ef 92       	push	r14
 58a:	ff 92       	push	r15
 58c:	cf 93       	push	r28
 58e:	df 93       	push	r29
 590:	ec 01       	movw	r28, r24
 592:	68 81       	ld	r22, Y
 594:	79 81       	ldd	r23, Y+1	; 0x01
 596:	8a 81       	ldd	r24, Y+2	; 0x02
 598:	9b 81       	ldd	r25, Y+3	; 0x03
 59a:	61 15       	cp	r22, r1
 59c:	71 05       	cpc	r23, r1
 59e:	81 05       	cpc	r24, r1
 5a0:	91 05       	cpc	r25, r1
 5a2:	21 f4       	brne	.+8      	; 0x5ac <do_rand+0x30>
 5a4:	64 e2       	ldi	r22, 0x24	; 36
 5a6:	79 ed       	ldi	r23, 0xD9	; 217
 5a8:	8b e5       	ldi	r24, 0x5B	; 91
 5aa:	97 e0       	ldi	r25, 0x07	; 7
 5ac:	2d e1       	ldi	r18, 0x1D	; 29
 5ae:	33 ef       	ldi	r19, 0xF3	; 243
 5b0:	41 e0       	ldi	r20, 0x01	; 1
 5b2:	50 e0       	ldi	r21, 0x00	; 0
 5b4:	0e 94 4f 03 	call	0x69e	; 0x69e <__divmodsi4>
 5b8:	49 01       	movw	r8, r18
 5ba:	5a 01       	movw	r10, r20
 5bc:	9b 01       	movw	r18, r22
 5be:	ac 01       	movw	r20, r24
 5c0:	a7 ea       	ldi	r26, 0xA7	; 167
 5c2:	b1 e4       	ldi	r27, 0x41	; 65
 5c4:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__muluhisi3>
 5c8:	6b 01       	movw	r12, r22
 5ca:	7c 01       	movw	r14, r24
 5cc:	ac ee       	ldi	r26, 0xEC	; 236
 5ce:	b4 ef       	ldi	r27, 0xF4	; 244
 5d0:	a5 01       	movw	r20, r10
 5d2:	94 01       	movw	r18, r8
 5d4:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__mulohisi3>
 5d8:	dc 01       	movw	r26, r24
 5da:	cb 01       	movw	r24, r22
 5dc:	8c 0d       	add	r24, r12
 5de:	9d 1d       	adc	r25, r13
 5e0:	ae 1d       	adc	r26, r14
 5e2:	bf 1d       	adc	r27, r15
 5e4:	b7 ff       	sbrs	r27, 7
 5e6:	03 c0       	rjmp	.+6      	; 0x5ee <do_rand+0x72>
 5e8:	01 97       	sbiw	r24, 0x01	; 1
 5ea:	a1 09       	sbc	r26, r1
 5ec:	b0 48       	sbci	r27, 0x80	; 128
 5ee:	88 83       	st	Y, r24
 5f0:	99 83       	std	Y+1, r25	; 0x01
 5f2:	aa 83       	std	Y+2, r26	; 0x02
 5f4:	bb 83       	std	Y+3, r27	; 0x03
 5f6:	9f 77       	andi	r25, 0x7F	; 127
 5f8:	df 91       	pop	r29
 5fa:	cf 91       	pop	r28
 5fc:	ff 90       	pop	r15
 5fe:	ef 90       	pop	r14
 600:	df 90       	pop	r13
 602:	cf 90       	pop	r12
 604:	bf 90       	pop	r11
 606:	af 90       	pop	r10
 608:	9f 90       	pop	r9
 60a:	8f 90       	pop	r8
 60c:	08 95       	ret

0000060e <rand_r>:
 60e:	0e 94 be 02 	call	0x57c	; 0x57c <do_rand>
 612:	08 95       	ret

00000614 <rand>:
 614:	80 e0       	ldi	r24, 0x00	; 0
 616:	91 e0       	ldi	r25, 0x01	; 1
 618:	0e 94 be 02 	call	0x57c	; 0x57c <do_rand>
 61c:	08 95       	ret

0000061e <srand>:
 61e:	a0 e0       	ldi	r26, 0x00	; 0
 620:	b0 e0       	ldi	r27, 0x00	; 0
 622:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 626:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 62a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 62e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 632:	08 95       	ret

00000634 <__itoa_ncheck>:
 634:	bb 27       	eor	r27, r27
 636:	4a 30       	cpi	r20, 0x0A	; 10
 638:	31 f4       	brne	.+12     	; 0x646 <__itoa_ncheck+0x12>
 63a:	99 23       	and	r25, r25
 63c:	22 f4       	brpl	.+8      	; 0x646 <__itoa_ncheck+0x12>
 63e:	bd e2       	ldi	r27, 0x2D	; 45
 640:	90 95       	com	r25
 642:	81 95       	neg	r24
 644:	9f 4f       	sbci	r25, 0xFF	; 255
 646:	0c 94 26 03 	jmp	0x64c	; 0x64c <__utoa_common>

0000064a <__utoa_ncheck>:
 64a:	bb 27       	eor	r27, r27

0000064c <__utoa_common>:
 64c:	fb 01       	movw	r30, r22
 64e:	55 27       	eor	r21, r21
 650:	aa 27       	eor	r26, r26
 652:	88 0f       	add	r24, r24
 654:	99 1f       	adc	r25, r25
 656:	aa 1f       	adc	r26, r26
 658:	a4 17       	cp	r26, r20
 65a:	10 f0       	brcs	.+4      	; 0x660 <__utoa_common+0x14>
 65c:	a4 1b       	sub	r26, r20
 65e:	83 95       	inc	r24
 660:	50 51       	subi	r21, 0x10	; 16
 662:	b9 f7       	brne	.-18     	; 0x652 <__utoa_common+0x6>
 664:	a0 5d       	subi	r26, 0xD0	; 208
 666:	aa 33       	cpi	r26, 0x3A	; 58
 668:	08 f0       	brcs	.+2      	; 0x66c <__utoa_common+0x20>
 66a:	a9 5d       	subi	r26, 0xD9	; 217
 66c:	a1 93       	st	Z+, r26
 66e:	00 97       	sbiw	r24, 0x00	; 0
 670:	79 f7       	brne	.-34     	; 0x650 <__utoa_common+0x4>
 672:	b1 11       	cpse	r27, r1
 674:	b1 93       	st	Z+, r27
 676:	11 92       	st	Z+, r1
 678:	cb 01       	movw	r24, r22
 67a:	0c 94 3f 03 	jmp	0x67e	; 0x67e <strrev>

0000067e <strrev>:
 67e:	dc 01       	movw	r26, r24
 680:	fc 01       	movw	r30, r24
 682:	67 2f       	mov	r22, r23
 684:	71 91       	ld	r23, Z+
 686:	77 23       	and	r23, r23
 688:	e1 f7       	brne	.-8      	; 0x682 <strrev+0x4>
 68a:	32 97       	sbiw	r30, 0x02	; 2
 68c:	04 c0       	rjmp	.+8      	; 0x696 <strrev+0x18>
 68e:	7c 91       	ld	r23, X
 690:	6d 93       	st	X+, r22
 692:	70 83       	st	Z, r23
 694:	62 91       	ld	r22, -Z
 696:	ae 17       	cp	r26, r30
 698:	bf 07       	cpc	r27, r31
 69a:	c8 f3       	brcs	.-14     	; 0x68e <strrev+0x10>
 69c:	08 95       	ret

0000069e <__divmodsi4>:
 69e:	05 2e       	mov	r0, r21
 6a0:	97 fb       	bst	r25, 7
 6a2:	1e f4       	brtc	.+6      	; 0x6aa <__divmodsi4+0xc>
 6a4:	00 94       	com	r0
 6a6:	0e 94 66 03 	call	0x6cc	; 0x6cc <__negsi2>
 6aa:	57 fd       	sbrc	r21, 7
 6ac:	07 d0       	rcall	.+14     	; 0x6bc <__divmodsi4_neg2>
 6ae:	0e 94 81 03 	call	0x702	; 0x702 <__udivmodsi4>
 6b2:	07 fc       	sbrc	r0, 7
 6b4:	03 d0       	rcall	.+6      	; 0x6bc <__divmodsi4_neg2>
 6b6:	4e f4       	brtc	.+18     	; 0x6ca <__divmodsi4_exit>
 6b8:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__negsi2>

000006bc <__divmodsi4_neg2>:
 6bc:	50 95       	com	r21
 6be:	40 95       	com	r20
 6c0:	30 95       	com	r19
 6c2:	21 95       	neg	r18
 6c4:	3f 4f       	sbci	r19, 0xFF	; 255
 6c6:	4f 4f       	sbci	r20, 0xFF	; 255
 6c8:	5f 4f       	sbci	r21, 0xFF	; 255

000006ca <__divmodsi4_exit>:
 6ca:	08 95       	ret

000006cc <__negsi2>:
 6cc:	90 95       	com	r25
 6ce:	80 95       	com	r24
 6d0:	70 95       	com	r23
 6d2:	61 95       	neg	r22
 6d4:	7f 4f       	sbci	r23, 0xFF	; 255
 6d6:	8f 4f       	sbci	r24, 0xFF	; 255
 6d8:	9f 4f       	sbci	r25, 0xFF	; 255
 6da:	08 95       	ret

000006dc <__muluhisi3>:
 6dc:	0e 94 a3 03 	call	0x746	; 0x746 <__umulhisi3>
 6e0:	a5 9f       	mul	r26, r21
 6e2:	90 0d       	add	r25, r0
 6e4:	b4 9f       	mul	r27, r20
 6e6:	90 0d       	add	r25, r0
 6e8:	a4 9f       	mul	r26, r20
 6ea:	80 0d       	add	r24, r0
 6ec:	91 1d       	adc	r25, r1
 6ee:	11 24       	eor	r1, r1
 6f0:	08 95       	ret

000006f2 <__mulshisi3>:
 6f2:	b7 ff       	sbrs	r27, 7
 6f4:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__muluhisi3>

000006f8 <__mulohisi3>:
 6f8:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__muluhisi3>
 6fc:	82 1b       	sub	r24, r18
 6fe:	93 0b       	sbc	r25, r19
 700:	08 95       	ret

00000702 <__udivmodsi4>:
 702:	a1 e2       	ldi	r26, 0x21	; 33
 704:	1a 2e       	mov	r1, r26
 706:	aa 1b       	sub	r26, r26
 708:	bb 1b       	sub	r27, r27
 70a:	fd 01       	movw	r30, r26
 70c:	0d c0       	rjmp	.+26     	; 0x728 <__udivmodsi4_ep>

0000070e <__udivmodsi4_loop>:
 70e:	aa 1f       	adc	r26, r26
 710:	bb 1f       	adc	r27, r27
 712:	ee 1f       	adc	r30, r30
 714:	ff 1f       	adc	r31, r31
 716:	a2 17       	cp	r26, r18
 718:	b3 07       	cpc	r27, r19
 71a:	e4 07       	cpc	r30, r20
 71c:	f5 07       	cpc	r31, r21
 71e:	20 f0       	brcs	.+8      	; 0x728 <__udivmodsi4_ep>
 720:	a2 1b       	sub	r26, r18
 722:	b3 0b       	sbc	r27, r19
 724:	e4 0b       	sbc	r30, r20
 726:	f5 0b       	sbc	r31, r21

00000728 <__udivmodsi4_ep>:
 728:	66 1f       	adc	r22, r22
 72a:	77 1f       	adc	r23, r23
 72c:	88 1f       	adc	r24, r24
 72e:	99 1f       	adc	r25, r25
 730:	1a 94       	dec	r1
 732:	69 f7       	brne	.-38     	; 0x70e <__udivmodsi4_loop>
 734:	60 95       	com	r22
 736:	70 95       	com	r23
 738:	80 95       	com	r24
 73a:	90 95       	com	r25
 73c:	9b 01       	movw	r18, r22
 73e:	ac 01       	movw	r20, r24
 740:	bd 01       	movw	r22, r26
 742:	cf 01       	movw	r24, r30
 744:	08 95       	ret

00000746 <__umulhisi3>:
 746:	a2 9f       	mul	r26, r18
 748:	b0 01       	movw	r22, r0
 74a:	b3 9f       	mul	r27, r19
 74c:	c0 01       	movw	r24, r0
 74e:	a3 9f       	mul	r26, r19
 750:	70 0d       	add	r23, r0
 752:	81 1d       	adc	r24, r1
 754:	11 24       	eor	r1, r1
 756:	91 1d       	adc	r25, r1
 758:	b2 9f       	mul	r27, r18
 75a:	70 0d       	add	r23, r0
 75c:	81 1d       	adc	r24, r1
 75e:	11 24       	eor	r1, r1
 760:	91 1d       	adc	r25, r1
 762:	08 95       	ret

00000764 <_exit>:
 764:	f8 94       	cli

00000766 <__stop_program>:
 766:	ff cf       	rjmp	.-2      	; 0x766 <__stop_program>
