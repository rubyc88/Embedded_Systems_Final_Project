
GccApplication10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004b4  00800100  00000f68  00000ffc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000065  008005b4  008005b4  000014b0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000150c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  0000154c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001417  00000000  00000000  000015fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000974  00000000  00000000  00002a13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000080b  00000000  00000000  00003387  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d0  00000000  00000000  00003b94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f7  00000000  00000000  00003f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013ce  00000000  00000000  0000445b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00005829  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__ctors_end>
   4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  10:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  14:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  18:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  1c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  20:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  24:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  28:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  2c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  30:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  34:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  38:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  3c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  40:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  44:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  48:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  4c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  50:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  54:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  58:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  5c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  60:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  64:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  68:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  6c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  70:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  74:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  78:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  7c:	fc 01       	movw	r30, r24
  7e:	09 04       	cpc	r0, r9
  80:	09 04       	cpc	r0, r9
  82:	09 04       	cpc	r0, r9
  84:	09 04       	cpc	r0, r9
  86:	09 04       	cpc	r0, r9
  88:	09 04       	cpc	r0, r9
  8a:	09 04       	cpc	r0, r9
  8c:	11 02       	muls	r17, r17
  8e:	09 04       	cpc	r0, r9
  90:	09 04       	cpc	r0, r9
  92:	09 04       	cpc	r0, r9
  94:	09 04       	cpc	r0, r9
  96:	09 04       	cpc	r0, r9
  98:	09 04       	cpc	r0, r9
  9a:	09 04       	cpc	r0, r9
  9c:	26 02       	muls	r18, r22
  9e:	09 04       	cpc	r0, r9
  a0:	09 04       	cpc	r0, r9
  a2:	09 04       	cpc	r0, r9
  a4:	09 04       	cpc	r0, r9
  a6:	09 04       	cpc	r0, r9
  a8:	09 04       	cpc	r0, r9
  aa:	09 04       	cpc	r0, r9
  ac:	3b 02       	muls	r19, r27
  ae:	09 04       	cpc	r0, r9
  b0:	09 04       	cpc	r0, r9
  b2:	09 04       	cpc	r0, r9
  b4:	09 04       	cpc	r0, r9
  b6:	09 04       	cpc	r0, r9
  b8:	09 04       	cpc	r0, r9
  ba:	09 04       	cpc	r0, r9
  bc:	50 02       	muls	r21, r16
  be:	09 04       	cpc	r0, r9
  c0:	09 04       	cpc	r0, r9
  c2:	09 04       	cpc	r0, r9
  c4:	09 04       	cpc	r0, r9
  c6:	09 04       	cpc	r0, r9
  c8:	09 04       	cpc	r0, r9
  ca:	09 04       	cpc	r0, r9
  cc:	65 02       	muls	r22, r21
  ce:	09 04       	cpc	r0, r9
  d0:	09 04       	cpc	r0, r9
  d2:	09 04       	cpc	r0, r9
  d4:	09 04       	cpc	r0, r9
  d6:	09 04       	cpc	r0, r9
  d8:	09 04       	cpc	r0, r9
  da:	09 04       	cpc	r0, r9
  dc:	7a 02       	muls	r23, r26
  de:	09 04       	cpc	r0, r9
  e0:	09 04       	cpc	r0, r9
  e2:	09 04       	cpc	r0, r9
  e4:	09 04       	cpc	r0, r9
  e6:	09 04       	cpc	r0, r9
  e8:	09 04       	cpc	r0, r9
  ea:	09 04       	cpc	r0, r9
  ec:	8f 02       	muls	r24, r31
  ee:	09 04       	cpc	r0, r9
  f0:	09 04       	cpc	r0, r9
  f2:	09 04       	cpc	r0, r9
  f4:	09 04       	cpc	r0, r9
  f6:	09 04       	cpc	r0, r9
  f8:	09 04       	cpc	r0, r9
  fa:	09 04       	cpc	r0, r9
  fc:	a4 02       	muls	r26, r20
  fe:	09 04       	cpc	r0, r9
 100:	09 04       	cpc	r0, r9
 102:	09 04       	cpc	r0, r9
 104:	09 04       	cpc	r0, r9
 106:	09 04       	cpc	r0, r9
 108:	09 04       	cpc	r0, r9
 10a:	09 04       	cpc	r0, r9
 10c:	b9 02       	muls	r27, r25
 10e:	09 04       	cpc	r0, r9
 110:	09 04       	cpc	r0, r9
 112:	09 04       	cpc	r0, r9
 114:	09 04       	cpc	r0, r9
 116:	09 04       	cpc	r0, r9
 118:	09 04       	cpc	r0, r9
 11a:	09 04       	cpc	r0, r9
 11c:	ce 02       	muls	r28, r30
 11e:	09 04       	cpc	r0, r9
 120:	09 04       	cpc	r0, r9
 122:	09 04       	cpc	r0, r9
 124:	09 04       	cpc	r0, r9
 126:	09 04       	cpc	r0, r9
 128:	09 04       	cpc	r0, r9
 12a:	09 04       	cpc	r0, r9
 12c:	4c 03       	fmul	r20, r20
 12e:	09 04       	cpc	r0, r9
 130:	09 04       	cpc	r0, r9
 132:	09 04       	cpc	r0, r9
 134:	09 04       	cpc	r0, r9
 136:	09 04       	cpc	r0, r9
 138:	09 04       	cpc	r0, r9
 13a:	09 04       	cpc	r0, r9
 13c:	61 03       	mulsu	r22, r17
 13e:	09 04       	cpc	r0, r9
 140:	09 04       	cpc	r0, r9
 142:	09 04       	cpc	r0, r9
 144:	09 04       	cpc	r0, r9
 146:	09 04       	cpc	r0, r9
 148:	09 04       	cpc	r0, r9
 14a:	09 04       	cpc	r0, r9
 14c:	76 03       	mulsu	r23, r22
 14e:	09 04       	cpc	r0, r9
 150:	09 04       	cpc	r0, r9
 152:	09 04       	cpc	r0, r9
 154:	09 04       	cpc	r0, r9
 156:	09 04       	cpc	r0, r9
 158:	09 04       	cpc	r0, r9
 15a:	09 04       	cpc	r0, r9
 15c:	8b 03       	fmulsu	r16, r19
 15e:	09 04       	cpc	r0, r9
 160:	09 04       	cpc	r0, r9
 162:	09 04       	cpc	r0, r9
 164:	09 04       	cpc	r0, r9
 166:	09 04       	cpc	r0, r9
 168:	09 04       	cpc	r0, r9
 16a:	09 04       	cpc	r0, r9
 16c:	a0 03       	fmuls	r18, r16
 16e:	09 04       	cpc	r0, r9
 170:	09 04       	cpc	r0, r9
 172:	09 04       	cpc	r0, r9
 174:	09 04       	cpc	r0, r9
 176:	09 04       	cpc	r0, r9
 178:	09 04       	cpc	r0, r9
 17a:	09 04       	cpc	r0, r9
 17c:	b5 03       	fmuls	r19, r21
 17e:	09 04       	cpc	r0, r9
 180:	09 04       	cpc	r0, r9
 182:	09 04       	cpc	r0, r9
 184:	09 04       	cpc	r0, r9
 186:	09 04       	cpc	r0, r9
 188:	09 04       	cpc	r0, r9
 18a:	09 04       	cpc	r0, r9
 18c:	ca 03       	fmulsu	r20, r18
 18e:	09 04       	cpc	r0, r9
 190:	09 04       	cpc	r0, r9
 192:	09 04       	cpc	r0, r9
 194:	09 04       	cpc	r0, r9
 196:	09 04       	cpc	r0, r9
 198:	09 04       	cpc	r0, r9
 19a:	09 04       	cpc	r0, r9
 19c:	df 03       	fmulsu	r21, r23
 19e:	09 04       	cpc	r0, r9
 1a0:	09 04       	cpc	r0, r9
 1a2:	09 04       	cpc	r0, r9
 1a4:	09 04       	cpc	r0, r9
 1a6:	09 04       	cpc	r0, r9
 1a8:	09 04       	cpc	r0, r9
 1aa:	09 04       	cpc	r0, r9
 1ac:	f4 03       	fmuls	r23, r20
 1ae:	09 04       	cpc	r0, r9
 1b0:	09 04       	cpc	r0, r9
 1b2:	09 04       	cpc	r0, r9
 1b4:	09 04       	cpc	r0, r9
 1b6:	09 04       	cpc	r0, r9
 1b8:	09 04       	cpc	r0, r9
 1ba:	09 04       	cpc	r0, r9
 1bc:	e3 02       	muls	r30, r19
 1be:	09 04       	cpc	r0, r9
 1c0:	09 04       	cpc	r0, r9
 1c2:	09 04       	cpc	r0, r9
 1c4:	09 04       	cpc	r0, r9
 1c6:	09 04       	cpc	r0, r9
 1c8:	09 04       	cpc	r0, r9
 1ca:	09 04       	cpc	r0, r9
 1cc:	f8 02       	muls	r31, r24
 1ce:	09 04       	cpc	r0, r9
 1d0:	09 04       	cpc	r0, r9
 1d2:	09 04       	cpc	r0, r9
 1d4:	09 04       	cpc	r0, r9
 1d6:	09 04       	cpc	r0, r9
 1d8:	09 04       	cpc	r0, r9
 1da:	09 04       	cpc	r0, r9
 1dc:	0d 03       	fmul	r16, r21
 1de:	09 04       	cpc	r0, r9
 1e0:	09 04       	cpc	r0, r9
 1e2:	09 04       	cpc	r0, r9
 1e4:	09 04       	cpc	r0, r9
 1e6:	09 04       	cpc	r0, r9
 1e8:	09 04       	cpc	r0, r9
 1ea:	09 04       	cpc	r0, r9
 1ec:	22 03       	mulsu	r18, r18
 1ee:	09 04       	cpc	r0, r9
 1f0:	09 04       	cpc	r0, r9
 1f2:	09 04       	cpc	r0, r9
 1f4:	09 04       	cpc	r0, r9
 1f6:	09 04       	cpc	r0, r9
 1f8:	09 04       	cpc	r0, r9
 1fa:	09 04       	cpc	r0, r9
 1fc:	37 03       	mulsu	r19, r23

000001fe <__ctors_end>:
 1fe:	11 24       	eor	r1, r1
 200:	1f be       	out	0x3f, r1	; 63
 202:	cf ef       	ldi	r28, 0xFF	; 255
 204:	d8 e0       	ldi	r29, 0x08	; 8
 206:	de bf       	out	0x3e, r29	; 62
 208:	cd bf       	out	0x3d, r28	; 61

0000020a <__do_copy_data>:
 20a:	15 e0       	ldi	r17, 0x05	; 5
 20c:	a0 e0       	ldi	r26, 0x00	; 0
 20e:	b1 e0       	ldi	r27, 0x01	; 1
 210:	e8 e6       	ldi	r30, 0x68	; 104
 212:	ff e0       	ldi	r31, 0x0F	; 15
 214:	02 c0       	rjmp	.+4      	; 0x21a <__do_copy_data+0x10>
 216:	05 90       	lpm	r0, Z+
 218:	0d 92       	st	X+, r0
 21a:	a4 3b       	cpi	r26, 0xB4	; 180
 21c:	b1 07       	cpc	r27, r17
 21e:	d9 f7       	brne	.-10     	; 0x216 <__do_copy_data+0xc>

00000220 <__do_clear_bss>:
 220:	26 e0       	ldi	r18, 0x06	; 6
 222:	a4 eb       	ldi	r26, 0xB4	; 180
 224:	b5 e0       	ldi	r27, 0x05	; 5
 226:	01 c0       	rjmp	.+2      	; 0x22a <.do_clear_bss_start>

00000228 <.do_clear_bss_loop>:
 228:	1d 92       	st	X+, r1

0000022a <.do_clear_bss_start>:
 22a:	a9 31       	cpi	r26, 0x19	; 25
 22c:	b2 07       	cpc	r27, r18
 22e:	e1 f7       	brne	.-8      	; 0x228 <.do_clear_bss_loop>
 230:	0e 94 94 04 	call	0x928	; 0x928 <main>
 234:	0c 94 b2 07 	jmp	0xf64	; 0xf64 <_exit>

00000238 <__bad_interrupt>:
 238:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023c <Port>:
	Cmd(0x01);
	Cmd(0x0C);
}
void Shift_Left(){
	Cmd(0x01);
	Cmd(0x08);
 23c:	80 ff       	sbrs	r24, 0
 23e:	02 c0       	rjmp	.+4      	; 0x244 <Port+0x8>
 240:	5c 9a       	sbi	0x0b, 4	; 11
 242:	01 c0       	rjmp	.+2      	; 0x246 <Port+0xa>
 244:	5c 98       	cbi	0x0b, 4	; 11
 246:	81 ff       	sbrs	r24, 1
 248:	02 c0       	rjmp	.+4      	; 0x24e <Port+0x12>
 24a:	5d 9a       	sbi	0x0b, 5	; 11
 24c:	01 c0       	rjmp	.+2      	; 0x250 <Port+0x14>
 24e:	5d 98       	cbi	0x0b, 5	; 11
 250:	82 ff       	sbrs	r24, 2
 252:	02 c0       	rjmp	.+4      	; 0x258 <Port+0x1c>
 254:	5e 9a       	sbi	0x0b, 6	; 11
 256:	01 c0       	rjmp	.+2      	; 0x25a <Port+0x1e>
 258:	5e 98       	cbi	0x0b, 6	; 11
 25a:	83 ff       	sbrs	r24, 3
 25c:	02 c0       	rjmp	.+4      	; 0x262 <Port+0x26>
 25e:	5f 9a       	sbi	0x0b, 7	; 11
 260:	08 95       	ret
 262:	5f 98       	cbi	0x0b, 7	; 11
 264:	08 95       	ret

00000266 <Cmd>:
 266:	46 98       	cbi	0x08, 6	; 8
 268:	0e 94 1e 01 	call	0x23c	; 0x23c <Port>
 26c:	47 9a       	sbi	0x08, 7	; 8
 26e:	8f e9       	ldi	r24, 0x9F	; 159
 270:	9f e0       	ldi	r25, 0x0F	; 15
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <Cmd+0xc>
 276:	00 c0       	rjmp	.+0      	; 0x278 <Cmd+0x12>
 278:	00 00       	nop
 27a:	47 98       	cbi	0x08, 7	; 8
 27c:	8f e9       	ldi	r24, 0x9F	; 159
 27e:	9f e0       	ldi	r25, 0x0F	; 15
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <Cmd+0x1a>
 284:	00 c0       	rjmp	.+0      	; 0x286 <Cmd+0x20>
 286:	00 00       	nop
 288:	08 95       	ret

0000028a <Clear>:
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	0e 94 33 01 	call	0x266	; 0x266 <Cmd>
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	0e 94 33 01 	call	0x266	; 0x266 <Cmd>
 296:	08 95       	ret

00000298 <Set_Cursor>:
 298:	cf 93       	push	r28
 29a:	c6 2f       	mov	r28, r22
 29c:	81 30       	cpi	r24, 0x01	; 1
 29e:	59 f4       	brne	.+22     	; 0x2b6 <Set_Cursor+0x1e>
 2a0:	80 e8       	ldi	r24, 0x80	; 128
 2a2:	86 0f       	add	r24, r22
 2a4:	82 95       	swap	r24
 2a6:	8f 70       	andi	r24, 0x0F	; 15
 2a8:	0e 94 33 01 	call	0x266	; 0x266 <Cmd>
 2ac:	8c 2f       	mov	r24, r28
 2ae:	8f 70       	andi	r24, 0x0F	; 15
 2b0:	0e 94 33 01 	call	0x266	; 0x266 <Cmd>
 2b4:	0c c0       	rjmp	.+24     	; 0x2ce <Set_Cursor+0x36>
 2b6:	82 30       	cpi	r24, 0x02	; 2
 2b8:	51 f4       	brne	.+20     	; 0x2ce <Set_Cursor+0x36>
 2ba:	80 ec       	ldi	r24, 0xC0	; 192
 2bc:	86 0f       	add	r24, r22
 2be:	82 95       	swap	r24
 2c0:	8f 70       	andi	r24, 0x0F	; 15
 2c2:	0e 94 33 01 	call	0x266	; 0x266 <Cmd>
 2c6:	8c 2f       	mov	r24, r28
 2c8:	8f 70       	andi	r24, 0x0F	; 15
 2ca:	0e 94 33 01 	call	0x266	; 0x266 <Cmd>
 2ce:	cf 91       	pop	r28
 2d0:	08 95       	ret

000002d2 <Init>:
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	0e 94 1e 01 	call	0x23c	; 0x23c <Port>
 2d8:	2f ef       	ldi	r18, 0xFF	; 255
 2da:	89 ef       	ldi	r24, 0xF9	; 249
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	21 50       	subi	r18, 0x01	; 1
 2e0:	80 40       	sbci	r24, 0x00	; 0
 2e2:	90 40       	sbci	r25, 0x00	; 0
 2e4:	e1 f7       	brne	.-8      	; 0x2de <Init+0xc>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <Init+0x16>
 2e8:	00 00       	nop
 2ea:	83 e0       	ldi	r24, 0x03	; 3
 2ec:	0e 94 33 01 	call	0x266	; 0x266 <Cmd>
 2f0:	8f e1       	ldi	r24, 0x1F	; 31
 2f2:	9e e4       	ldi	r25, 0x4E	; 78
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <Init+0x22>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <Init+0x28>
 2fa:	00 00       	nop
 2fc:	83 e0       	ldi	r24, 0x03	; 3
 2fe:	0e 94 33 01 	call	0x266	; 0x266 <Cmd>
 302:	8f ed       	ldi	r24, 0xDF	; 223
 304:	9b ea       	ldi	r25, 0xAB	; 171
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <Init+0x34>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <Init+0x3a>
 30c:	00 00       	nop
 30e:	83 e0       	ldi	r24, 0x03	; 3
 310:	0e 94 33 01 	call	0x266	; 0x266 <Cmd>
 314:	82 e0       	ldi	r24, 0x02	; 2
 316:	0e 94 33 01 	call	0x266	; 0x266 <Cmd>
 31a:	82 e0       	ldi	r24, 0x02	; 2
 31c:	0e 94 33 01 	call	0x266	; 0x266 <Cmd>
 320:	88 e0       	ldi	r24, 0x08	; 8
 322:	0e 94 33 01 	call	0x266	; 0x266 <Cmd>
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	0e 94 33 01 	call	0x266	; 0x266 <Cmd>
 32c:	8c e0       	ldi	r24, 0x0C	; 12
 32e:	0e 94 33 01 	call	0x266	; 0x266 <Cmd>
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	0e 94 33 01 	call	0x266	; 0x266 <Cmd>
 338:	86 e0       	ldi	r24, 0x06	; 6
 33a:	0e 94 33 01 	call	0x266	; 0x266 <Cmd>
 33e:	08 95       	ret

00000340 <Write_Char>:
 340:	cf 93       	push	r28
 342:	c8 2f       	mov	r28, r24
 344:	46 9a       	sbi	0x08, 6	; 8
 346:	82 95       	swap	r24
 348:	8f 70       	andi	r24, 0x0F	; 15
 34a:	0e 94 1e 01 	call	0x23c	; 0x23c <Port>
 34e:	47 9a       	sbi	0x08, 7	; 8
 350:	8f e9       	ldi	r24, 0x9F	; 159
 352:	9f e0       	ldi	r25, 0x0F	; 15
 354:	01 97       	sbiw	r24, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <Write_Char+0x14>
 358:	00 c0       	rjmp	.+0      	; 0x35a <Write_Char+0x1a>
 35a:	00 00       	nop
 35c:	47 98       	cbi	0x08, 7	; 8
 35e:	8f e9       	ldi	r24, 0x9F	; 159
 360:	9f e0       	ldi	r25, 0x0F	; 15
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <Write_Char+0x22>
 366:	00 c0       	rjmp	.+0      	; 0x368 <Write_Char+0x28>
 368:	00 00       	nop
 36a:	8c 2f       	mov	r24, r28
 36c:	8f 70       	andi	r24, 0x0F	; 15
 36e:	0e 94 1e 01 	call	0x23c	; 0x23c <Port>
 372:	47 9a       	sbi	0x08, 7	; 8
 374:	8f e9       	ldi	r24, 0x9F	; 159
 376:	9f e0       	ldi	r25, 0x0F	; 15
 378:	01 97       	sbiw	r24, 0x01	; 1
 37a:	f1 f7       	brne	.-4      	; 0x378 <Write_Char+0x38>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <Write_Char+0x3e>
 37e:	00 00       	nop
 380:	47 98       	cbi	0x08, 7	; 8
 382:	8f e9       	ldi	r24, 0x9F	; 159
 384:	9f e0       	ldi	r25, 0x0F	; 15
 386:	01 97       	sbiw	r24, 0x01	; 1
 388:	f1 f7       	brne	.-4      	; 0x386 <Write_Char+0x46>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <Write_Char+0x4c>
 38c:	00 00       	nop
 38e:	cf 91       	pop	r28
 390:	08 95       	ret

00000392 <Write_String>:
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	ec 01       	movw	r28, r24
 398:	88 81       	ld	r24, Y
 39a:	88 23       	and	r24, r24
 39c:	31 f0       	breq	.+12     	; 0x3aa <Write_String+0x18>
 39e:	21 96       	adiw	r28, 0x01	; 1
 3a0:	0e 94 a0 01 	call	0x340	; 0x340 <Write_Char>
 3a4:	89 91       	ld	r24, Y+
 3a6:	81 11       	cpse	r24, r1
 3a8:	fb cf       	rjmp	.-10     	; 0x3a0 <Write_String+0xe>
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	08 95       	ret

000003b0 <TWIinit>:
	*/
	}
	
}
void TWIinit(){
	DDRC |= (1 << PORTC0) | (1 << PORTC1);    // SDA and SCL are set to be outputs	$$$$$$$$
 3b0:	87 b1       	in	r24, 0x07	; 7
 3b2:	83 60       	ori	r24, 0x03	; 3
 3b4:	87 b9       	out	0x07, r24	; 7
	TWSR = (0b00 << TWPS0);   // TWPS=00 --> prescale =0 --> div by 1				$$$$$$$$
 3b6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR = 8;   // SCLfreq = clkCPU/(16+2*(TWBR).(TWPS))							$$$$$$$$
 3ba:	88 e0       	ldi	r24, 0x08	; 8
 3bc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 3c0:	08 95       	ret

000003c2 <Wait_n_Check_Error>:
	// SCLfreq = 8000_000/(16+2*(8).(1))  = 250KHz    if use TWBR=8
	// SCLfreq = 8000_000/(16+2*(2).(1))  = 400KHz    if use TWBR=2 (fastest)
}

void Wait_n_Check_Error(uint8_t expected){
	while (!(TWCR & (1 << TWINT)));   // Wait for TWINT to set										$$$$$$$$
 3c2:	ec eb       	ldi	r30, 0xBC	; 188
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	90 81       	ld	r25, Z
 3c8:	99 23       	and	r25, r25
 3ca:	ec f7       	brge	.-6      	; 0x3c6 <Wait_n_Check_Error+0x4>
	
	if ((TWSR & 0xF8) != expected){
 3cc:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 3d0:	48 2f       	mov	r20, r24
 3d2:	50 e0       	ldi	r21, 0x00	; 0
 3d4:	28 7f       	andi	r18, 0xF8	; 248
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	24 17       	cp	r18, r20
 3da:	35 07       	cpc	r19, r21
 3dc:	09 f4       	brne	.+2      	; 0x3e0 <Wait_n_Check_Error+0x1e>
 3de:	31 c2       	rjmp	.+1122   	; 0x842 <__LOCK_REGION_LENGTH__+0x442>
		switch(expected){
 3e0:	48 2f       	mov	r20, r24
 3e2:	50 e0       	ldi	r21, 0x00	; 0
 3e4:	fa 01       	movw	r30, r20
 3e6:	38 97       	sbiw	r30, 0x08	; 8
 3e8:	e1 3c       	cpi	r30, 0xC1	; 193
 3ea:	f1 05       	cpc	r31, r1
 3ec:	08 f0       	brcs	.+2      	; 0x3f0 <Wait_n_Check_Error+0x2e>
 3ee:	11 c2       	rjmp	.+1058   	; 0x812 <__LOCK_REGION_LENGTH__+0x412>
 3f0:	e2 5c       	subi	r30, 0xC2	; 194
 3f2:	ff 4f       	sbci	r31, 0xFF	; 255
 3f4:	0c 94 c2 04 	jmp	0x984	; 0x984 <__tablejump2__>
			case TW_START		         : sprintf(strbuf, "Expecting TW_START		           but got 0x%x\r\n", TWSR);   break;
 3f8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 3fc:	1f 92       	push	r1
 3fe:	8f 93       	push	r24
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	9f 93       	push	r25
 406:	8f 93       	push	r24
 408:	85 eb       	ldi	r24, 0xB5	; 181
 40a:	95 e0       	ldi	r25, 0x05	; 5
 40c:	9f 93       	push	r25
 40e:	8f 93       	push	r24
 410:	0e 94 c8 04 	call	0x990	; 0x990 <sprintf>
 414:	0f 90       	pop	r0
 416:	0f 90       	pop	r0
 418:	0f 90       	pop	r0
 41a:	0f 90       	pop	r0
 41c:	0f 90       	pop	r0
 41e:	0f 90       	pop	r0
 420:	08 95       	ret
			case TW_REP_START		     : sprintf(strbuf, "Expecting TW_REP_START		       but got 0x%x\r\n", TWSR);   break;
 422:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 426:	1f 92       	push	r1
 428:	8f 93       	push	r24
 42a:	8e e2       	ldi	r24, 0x2E	; 46
 42c:	91 e0       	ldi	r25, 0x01	; 1
 42e:	9f 93       	push	r25
 430:	8f 93       	push	r24
 432:	85 eb       	ldi	r24, 0xB5	; 181
 434:	95 e0       	ldi	r25, 0x05	; 5
 436:	9f 93       	push	r25
 438:	8f 93       	push	r24
 43a:	0e 94 c8 04 	call	0x990	; 0x990 <sprintf>
 43e:	0f 90       	pop	r0
 440:	0f 90       	pop	r0
 442:	0f 90       	pop	r0
 444:	0f 90       	pop	r0
 446:	0f 90       	pop	r0
 448:	0f 90       	pop	r0
 44a:	08 95       	ret
			case TW_MT_SLA_ACK		     : sprintf(strbuf, "Expecting TW_MT_SLA_ACK		       but got 0x%x\r\n", TWSR);   break;
 44c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 450:	1f 92       	push	r1
 452:	8f 93       	push	r24
 454:	8c e5       	ldi	r24, 0x5C	; 92
 456:	91 e0       	ldi	r25, 0x01	; 1
 458:	9f 93       	push	r25
 45a:	8f 93       	push	r24
 45c:	85 eb       	ldi	r24, 0xB5	; 181
 45e:	95 e0       	ldi	r25, 0x05	; 5
 460:	9f 93       	push	r25
 462:	8f 93       	push	r24
 464:	0e 94 c8 04 	call	0x990	; 0x990 <sprintf>
 468:	0f 90       	pop	r0
 46a:	0f 90       	pop	r0
 46c:	0f 90       	pop	r0
 46e:	0f 90       	pop	r0
 470:	0f 90       	pop	r0
 472:	0f 90       	pop	r0
 474:	08 95       	ret
			case TW_MT_SLA_NACK		     : sprintf(strbuf, "Expecting TW_MT_SLA_NACK		   but got 0x%x\r\n", TWSR);   break;
 476:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 47a:	1f 92       	push	r1
 47c:	8f 93       	push	r24
 47e:	8b e8       	ldi	r24, 0x8B	; 139
 480:	91 e0       	ldi	r25, 0x01	; 1
 482:	9f 93       	push	r25
 484:	8f 93       	push	r24
 486:	85 eb       	ldi	r24, 0xB5	; 181
 488:	95 e0       	ldi	r25, 0x05	; 5
 48a:	9f 93       	push	r25
 48c:	8f 93       	push	r24
 48e:	0e 94 c8 04 	call	0x990	; 0x990 <sprintf>
 492:	0f 90       	pop	r0
 494:	0f 90       	pop	r0
 496:	0f 90       	pop	r0
 498:	0f 90       	pop	r0
 49a:	0f 90       	pop	r0
 49c:	0f 90       	pop	r0
 49e:	08 95       	ret
			case TW_MT_DATA_ACK		     : sprintf(strbuf, "Expecting TW_MT_DATA_ACK		   but got 0x%x\r\n", TWSR);   break;
 4a0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 4a4:	1f 92       	push	r1
 4a6:	8f 93       	push	r24
 4a8:	87 eb       	ldi	r24, 0xB7	; 183
 4aa:	91 e0       	ldi	r25, 0x01	; 1
 4ac:	9f 93       	push	r25
 4ae:	8f 93       	push	r24
 4b0:	85 eb       	ldi	r24, 0xB5	; 181
 4b2:	95 e0       	ldi	r25, 0x05	; 5
 4b4:	9f 93       	push	r25
 4b6:	8f 93       	push	r24
 4b8:	0e 94 c8 04 	call	0x990	; 0x990 <sprintf>
 4bc:	0f 90       	pop	r0
 4be:	0f 90       	pop	r0
 4c0:	0f 90       	pop	r0
 4c2:	0f 90       	pop	r0
 4c4:	0f 90       	pop	r0
 4c6:	0f 90       	pop	r0
 4c8:	08 95       	ret
			case TW_MT_DATA_NACK		 : sprintf(strbuf, "Expecting TW_MT_DATA_NACK		   but got 0x%x\r\n", TWSR);   break;
 4ca:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 4ce:	1f 92       	push	r1
 4d0:	8f 93       	push	r24
 4d2:	83 ee       	ldi	r24, 0xE3	; 227
 4d4:	91 e0       	ldi	r25, 0x01	; 1
 4d6:	9f 93       	push	r25
 4d8:	8f 93       	push	r24
 4da:	85 eb       	ldi	r24, 0xB5	; 181
 4dc:	95 e0       	ldi	r25, 0x05	; 5
 4de:	9f 93       	push	r25
 4e0:	8f 93       	push	r24
 4e2:	0e 94 c8 04 	call	0x990	; 0x990 <sprintf>
 4e6:	0f 90       	pop	r0
 4e8:	0f 90       	pop	r0
 4ea:	0f 90       	pop	r0
 4ec:	0f 90       	pop	r0
 4ee:	0f 90       	pop	r0
 4f0:	0f 90       	pop	r0
 4f2:	08 95       	ret
			case TW_MT_ARB_LOST		     : sprintf(strbuf, "Expecting TW_MT/R_ARB_LOST		   but got 0x%x\r\n", TWSR);   break;
 4f4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 4f8:	1f 92       	push	r1
 4fa:	8f 93       	push	r24
 4fc:	80 e1       	ldi	r24, 0x10	; 16
 4fe:	92 e0       	ldi	r25, 0x02	; 2
 500:	9f 93       	push	r25
 502:	8f 93       	push	r24
 504:	85 eb       	ldi	r24, 0xB5	; 181
 506:	95 e0       	ldi	r25, 0x05	; 5
 508:	9f 93       	push	r25
 50a:	8f 93       	push	r24
 50c:	0e 94 c8 04 	call	0x990	; 0x990 <sprintf>
 510:	0f 90       	pop	r0
 512:	0f 90       	pop	r0
 514:	0f 90       	pop	r0
 516:	0f 90       	pop	r0
 518:	0f 90       	pop	r0
 51a:	0f 90       	pop	r0
 51c:	08 95       	ret
			case TW_MR_SLA_ACK		     : sprintf(strbuf, "Expecting TW_MR_SLA_ACK		       but got 0x%x\r\n", TWSR);   break;
 51e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 522:	1f 92       	push	r1
 524:	8f 93       	push	r24
 526:	8e e3       	ldi	r24, 0x3E	; 62
 528:	92 e0       	ldi	r25, 0x02	; 2
 52a:	9f 93       	push	r25
 52c:	8f 93       	push	r24
 52e:	85 eb       	ldi	r24, 0xB5	; 181
 530:	95 e0       	ldi	r25, 0x05	; 5
 532:	9f 93       	push	r25
 534:	8f 93       	push	r24
 536:	0e 94 c8 04 	call	0x990	; 0x990 <sprintf>
 53a:	0f 90       	pop	r0
 53c:	0f 90       	pop	r0
 53e:	0f 90       	pop	r0
 540:	0f 90       	pop	r0
 542:	0f 90       	pop	r0
 544:	0f 90       	pop	r0
 546:	08 95       	ret
			case TW_MR_SLA_NACK		     : sprintf(strbuf, "Expecting TW_MR_SLA_NACK		   but got 0x%x\r\n", TWSR);   break;
 548:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 54c:	1f 92       	push	r1
 54e:	8f 93       	push	r24
 550:	8d e6       	ldi	r24, 0x6D	; 109
 552:	92 e0       	ldi	r25, 0x02	; 2
 554:	9f 93       	push	r25
 556:	8f 93       	push	r24
 558:	85 eb       	ldi	r24, 0xB5	; 181
 55a:	95 e0       	ldi	r25, 0x05	; 5
 55c:	9f 93       	push	r25
 55e:	8f 93       	push	r24
 560:	0e 94 c8 04 	call	0x990	; 0x990 <sprintf>
 564:	0f 90       	pop	r0
 566:	0f 90       	pop	r0
 568:	0f 90       	pop	r0
 56a:	0f 90       	pop	r0
 56c:	0f 90       	pop	r0
 56e:	0f 90       	pop	r0
 570:	08 95       	ret
			case TW_MR_DATA_ACK		     : sprintf(strbuf, "Expecting TW_MR_DATA_ACK		   but got 0x%x\r\n", TWSR);   break;
 572:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 576:	1f 92       	push	r1
 578:	8f 93       	push	r24
 57a:	89 e9       	ldi	r24, 0x99	; 153
 57c:	92 e0       	ldi	r25, 0x02	; 2
 57e:	9f 93       	push	r25
 580:	8f 93       	push	r24
 582:	85 eb       	ldi	r24, 0xB5	; 181
 584:	95 e0       	ldi	r25, 0x05	; 5
 586:	9f 93       	push	r25
 588:	8f 93       	push	r24
 58a:	0e 94 c8 04 	call	0x990	; 0x990 <sprintf>
 58e:	0f 90       	pop	r0
 590:	0f 90       	pop	r0
 592:	0f 90       	pop	r0
 594:	0f 90       	pop	r0
 596:	0f 90       	pop	r0
 598:	0f 90       	pop	r0
 59a:	08 95       	ret
			case TW_MR_DATA_NACK		 : sprintf(strbuf, "Expecting TW_MR_DATA_NACK		   but got 0x%x\r\n", TWSR);   break;
 59c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 5a0:	1f 92       	push	r1
 5a2:	8f 93       	push	r24
 5a4:	85 ec       	ldi	r24, 0xC5	; 197
 5a6:	92 e0       	ldi	r25, 0x02	; 2
 5a8:	9f 93       	push	r25
 5aa:	8f 93       	push	r24
 5ac:	85 eb       	ldi	r24, 0xB5	; 181
 5ae:	95 e0       	ldi	r25, 0x05	; 5
 5b0:	9f 93       	push	r25
 5b2:	8f 93       	push	r24
 5b4:	0e 94 c8 04 	call	0x990	; 0x990 <sprintf>
 5b8:	0f 90       	pop	r0
 5ba:	0f 90       	pop	r0
 5bc:	0f 90       	pop	r0
 5be:	0f 90       	pop	r0
 5c0:	0f 90       	pop	r0
 5c2:	0f 90       	pop	r0
 5c4:	08 95       	ret
			case TW_ST_SLA_ACK		     : sprintf(strbuf, "Expecting TW_ST_SLA_ACK		       but got 0x%x\r\n", TWSR);   break;
 5c6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 5ca:	1f 92       	push	r1
 5cc:	8f 93       	push	r24
 5ce:	82 ef       	ldi	r24, 0xF2	; 242
 5d0:	92 e0       	ldi	r25, 0x02	; 2
 5d2:	9f 93       	push	r25
 5d4:	8f 93       	push	r24
 5d6:	85 eb       	ldi	r24, 0xB5	; 181
 5d8:	95 e0       	ldi	r25, 0x05	; 5
 5da:	9f 93       	push	r25
 5dc:	8f 93       	push	r24
 5de:	0e 94 c8 04 	call	0x990	; 0x990 <sprintf>
 5e2:	0f 90       	pop	r0
 5e4:	0f 90       	pop	r0
 5e6:	0f 90       	pop	r0
 5e8:	0f 90       	pop	r0
 5ea:	0f 90       	pop	r0
 5ec:	0f 90       	pop	r0
 5ee:	08 95       	ret
			case TW_ST_ARB_LOST_SLA_ACK	 : sprintf(strbuf, "Expecting TW_ST_ARB_LOST_SLA_ACK   but got 0x%x\r\n", TWSR);   break;
 5f0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 5f4:	1f 92       	push	r1
 5f6:	8f 93       	push	r24
 5f8:	81 e2       	ldi	r24, 0x21	; 33
 5fa:	93 e0       	ldi	r25, 0x03	; 3
 5fc:	9f 93       	push	r25
 5fe:	8f 93       	push	r24
 600:	85 eb       	ldi	r24, 0xB5	; 181
 602:	95 e0       	ldi	r25, 0x05	; 5
 604:	9f 93       	push	r25
 606:	8f 93       	push	r24
 608:	0e 94 c8 04 	call	0x990	; 0x990 <sprintf>
 60c:	0f 90       	pop	r0
 60e:	0f 90       	pop	r0
 610:	0f 90       	pop	r0
 612:	0f 90       	pop	r0
 614:	0f 90       	pop	r0
 616:	0f 90       	pop	r0
 618:	08 95       	ret
			case TW_ST_DATA_ACK		     : sprintf(strbuf, "Expecting TW_ST_DATA_ACK		   but got 0x%x\r\n", TWSR);   break;
 61a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 61e:	1f 92       	push	r1
 620:	8f 93       	push	r24
 622:	83 e5       	ldi	r24, 0x53	; 83
 624:	93 e0       	ldi	r25, 0x03	; 3
 626:	9f 93       	push	r25
 628:	8f 93       	push	r24
 62a:	85 eb       	ldi	r24, 0xB5	; 181
 62c:	95 e0       	ldi	r25, 0x05	; 5
 62e:	9f 93       	push	r25
 630:	8f 93       	push	r24
 632:	0e 94 c8 04 	call	0x990	; 0x990 <sprintf>
 636:	0f 90       	pop	r0
 638:	0f 90       	pop	r0
 63a:	0f 90       	pop	r0
 63c:	0f 90       	pop	r0
 63e:	0f 90       	pop	r0
 640:	0f 90       	pop	r0
 642:	08 95       	ret
			case TW_ST_DATA_NACK		 : sprintf(strbuf, "Expecting TW_ST_DATA_NACK		   but got 0x%x\r\n", TWSR);   break;
 644:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 648:	1f 92       	push	r1
 64a:	8f 93       	push	r24
 64c:	8f e7       	ldi	r24, 0x7F	; 127
 64e:	93 e0       	ldi	r25, 0x03	; 3
 650:	9f 93       	push	r25
 652:	8f 93       	push	r24
 654:	85 eb       	ldi	r24, 0xB5	; 181
 656:	95 e0       	ldi	r25, 0x05	; 5
 658:	9f 93       	push	r25
 65a:	8f 93       	push	r24
 65c:	0e 94 c8 04 	call	0x990	; 0x990 <sprintf>
 660:	0f 90       	pop	r0
 662:	0f 90       	pop	r0
 664:	0f 90       	pop	r0
 666:	0f 90       	pop	r0
 668:	0f 90       	pop	r0
 66a:	0f 90       	pop	r0
 66c:	08 95       	ret
			case TW_ST_LAST_DATA		 : sprintf(strbuf, "Expecting TW_ST_LAST_DATA		   but got 0x%x\r\n", TWSR);   break;
 66e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 672:	1f 92       	push	r1
 674:	8f 93       	push	r24
 676:	8c ea       	ldi	r24, 0xAC	; 172
 678:	93 e0       	ldi	r25, 0x03	; 3
 67a:	9f 93       	push	r25
 67c:	8f 93       	push	r24
 67e:	85 eb       	ldi	r24, 0xB5	; 181
 680:	95 e0       	ldi	r25, 0x05	; 5
 682:	9f 93       	push	r25
 684:	8f 93       	push	r24
 686:	0e 94 c8 04 	call	0x990	; 0x990 <sprintf>
 68a:	0f 90       	pop	r0
 68c:	0f 90       	pop	r0
 68e:	0f 90       	pop	r0
 690:	0f 90       	pop	r0
 692:	0f 90       	pop	r0
 694:	0f 90       	pop	r0
 696:	08 95       	ret
			case TW_SR_SLA_ACK		     : sprintf(strbuf, "Expecting TW_SR_SLA_ACK		       but got 0x%x\r\n", TWSR);   break;
 698:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 69c:	1f 92       	push	r1
 69e:	8f 93       	push	r24
 6a0:	89 ed       	ldi	r24, 0xD9	; 217
 6a2:	93 e0       	ldi	r25, 0x03	; 3
 6a4:	9f 93       	push	r25
 6a6:	8f 93       	push	r24
 6a8:	85 eb       	ldi	r24, 0xB5	; 181
 6aa:	95 e0       	ldi	r25, 0x05	; 5
 6ac:	9f 93       	push	r25
 6ae:	8f 93       	push	r24
 6b0:	0e 94 c8 04 	call	0x990	; 0x990 <sprintf>
 6b4:	0f 90       	pop	r0
 6b6:	0f 90       	pop	r0
 6b8:	0f 90       	pop	r0
 6ba:	0f 90       	pop	r0
 6bc:	0f 90       	pop	r0
 6be:	0f 90       	pop	r0
 6c0:	08 95       	ret
			case TW_SR_ARB_LOST_SLA_ACK	 : sprintf(strbuf, "Expecting TW_SR_ARB_LOST_SLA_ACK   but got 0x%x\r\n", TWSR);   break;
 6c2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 6c6:	1f 92       	push	r1
 6c8:	8f 93       	push	r24
 6ca:	88 e0       	ldi	r24, 0x08	; 8
 6cc:	94 e0       	ldi	r25, 0x04	; 4
 6ce:	9f 93       	push	r25
 6d0:	8f 93       	push	r24
 6d2:	85 eb       	ldi	r24, 0xB5	; 181
 6d4:	95 e0       	ldi	r25, 0x05	; 5
 6d6:	9f 93       	push	r25
 6d8:	8f 93       	push	r24
 6da:	0e 94 c8 04 	call	0x990	; 0x990 <sprintf>
 6de:	0f 90       	pop	r0
 6e0:	0f 90       	pop	r0
 6e2:	0f 90       	pop	r0
 6e4:	0f 90       	pop	r0
 6e6:	0f 90       	pop	r0
 6e8:	0f 90       	pop	r0
 6ea:	08 95       	ret
			case TW_SR_GCALL_ACK		 : sprintf(strbuf, "Expecting TW_SR_GCALL_ACK		   but got 0x%x\r\n", TWSR);   break;
 6ec:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 6f0:	1f 92       	push	r1
 6f2:	8f 93       	push	r24
 6f4:	8a e3       	ldi	r24, 0x3A	; 58
 6f6:	94 e0       	ldi	r25, 0x04	; 4
 6f8:	9f 93       	push	r25
 6fa:	8f 93       	push	r24
 6fc:	85 eb       	ldi	r24, 0xB5	; 181
 6fe:	95 e0       	ldi	r25, 0x05	; 5
 700:	9f 93       	push	r25
 702:	8f 93       	push	r24
 704:	0e 94 c8 04 	call	0x990	; 0x990 <sprintf>
 708:	0f 90       	pop	r0
 70a:	0f 90       	pop	r0
 70c:	0f 90       	pop	r0
 70e:	0f 90       	pop	r0
 710:	0f 90       	pop	r0
 712:	0f 90       	pop	r0
 714:	08 95       	ret
			case TW_SR_ARB_LOST_GCALL_ACK: sprintf(strbuf, "Expecting TW_SR_ARB_LOST_GCALL_ACK but got 0x%x\r\n", TWSR);   break;
 716:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 71a:	1f 92       	push	r1
 71c:	8f 93       	push	r24
 71e:	87 e6       	ldi	r24, 0x67	; 103
 720:	94 e0       	ldi	r25, 0x04	; 4
 722:	9f 93       	push	r25
 724:	8f 93       	push	r24
 726:	85 eb       	ldi	r24, 0xB5	; 181
 728:	95 e0       	ldi	r25, 0x05	; 5
 72a:	9f 93       	push	r25
 72c:	8f 93       	push	r24
 72e:	0e 94 c8 04 	call	0x990	; 0x990 <sprintf>
 732:	0f 90       	pop	r0
 734:	0f 90       	pop	r0
 736:	0f 90       	pop	r0
 738:	0f 90       	pop	r0
 73a:	0f 90       	pop	r0
 73c:	0f 90       	pop	r0
 73e:	08 95       	ret
			case TW_SR_DATA_ACK		     : sprintf(strbuf, "Expecting TW_SR_DATA_ACK		   but got 0x%x\r\n", TWSR);   break;
 740:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 744:	1f 92       	push	r1
 746:	8f 93       	push	r24
 748:	89 e9       	ldi	r24, 0x99	; 153
 74a:	94 e0       	ldi	r25, 0x04	; 4
 74c:	9f 93       	push	r25
 74e:	8f 93       	push	r24
 750:	85 eb       	ldi	r24, 0xB5	; 181
 752:	95 e0       	ldi	r25, 0x05	; 5
 754:	9f 93       	push	r25
 756:	8f 93       	push	r24
 758:	0e 94 c8 04 	call	0x990	; 0x990 <sprintf>
 75c:	0f 90       	pop	r0
 75e:	0f 90       	pop	r0
 760:	0f 90       	pop	r0
 762:	0f 90       	pop	r0
 764:	0f 90       	pop	r0
 766:	0f 90       	pop	r0
 768:	08 95       	ret
			case TW_SR_DATA_NACK		 : sprintf(strbuf, "Expecting TW_SR_DATA_NACK		   but got 0x%x\r\n", TWSR);   break;
 76a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 76e:	1f 92       	push	r1
 770:	8f 93       	push	r24
 772:	85 ec       	ldi	r24, 0xC5	; 197
 774:	94 e0       	ldi	r25, 0x04	; 4
 776:	9f 93       	push	r25
 778:	8f 93       	push	r24
 77a:	85 eb       	ldi	r24, 0xB5	; 181
 77c:	95 e0       	ldi	r25, 0x05	; 5
 77e:	9f 93       	push	r25
 780:	8f 93       	push	r24
 782:	0e 94 c8 04 	call	0x990	; 0x990 <sprintf>
 786:	0f 90       	pop	r0
 788:	0f 90       	pop	r0
 78a:	0f 90       	pop	r0
 78c:	0f 90       	pop	r0
 78e:	0f 90       	pop	r0
 790:	0f 90       	pop	r0
 792:	08 95       	ret
			case TW_SR_GCALL_DATA_ACK	 : sprintf(strbuf, "Expecting TW_SR_GCALL_DATA_ACK	   but got 0x%x\r\n", TWSR);   break;
 794:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 798:	1f 92       	push	r1
 79a:	8f 93       	push	r24
 79c:	82 ef       	ldi	r24, 0xF2	; 242
 79e:	94 e0       	ldi	r25, 0x04	; 4
 7a0:	9f 93       	push	r25
 7a2:	8f 93       	push	r24
 7a4:	85 eb       	ldi	r24, 0xB5	; 181
 7a6:	95 e0       	ldi	r25, 0x05	; 5
 7a8:	9f 93       	push	r25
 7aa:	8f 93       	push	r24
 7ac:	0e 94 c8 04 	call	0x990	; 0x990 <sprintf>
 7b0:	0f 90       	pop	r0
 7b2:	0f 90       	pop	r0
 7b4:	0f 90       	pop	r0
 7b6:	0f 90       	pop	r0
 7b8:	0f 90       	pop	r0
 7ba:	0f 90       	pop	r0
 7bc:	08 95       	ret
			case TW_SR_GCALL_DATA_NACK	 : sprintf(strbuf, "Expecting TW_SR_GCALL_DATA_NACK	   but got 0x%x\r\n", TWSR);   break;
 7be:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 7c2:	1f 92       	push	r1
 7c4:	8f 93       	push	r24
 7c6:	83 e2       	ldi	r24, 0x23	; 35
 7c8:	95 e0       	ldi	r25, 0x05	; 5
 7ca:	9f 93       	push	r25
 7cc:	8f 93       	push	r24
 7ce:	85 eb       	ldi	r24, 0xB5	; 181
 7d0:	95 e0       	ldi	r25, 0x05	; 5
 7d2:	9f 93       	push	r25
 7d4:	8f 93       	push	r24
 7d6:	0e 94 c8 04 	call	0x990	; 0x990 <sprintf>
 7da:	0f 90       	pop	r0
 7dc:	0f 90       	pop	r0
 7de:	0f 90       	pop	r0
 7e0:	0f 90       	pop	r0
 7e2:	0f 90       	pop	r0
 7e4:	0f 90       	pop	r0
 7e6:	08 95       	ret
			case TW_SR_STOP		         : sprintf(strbuf, "Expecting TW_SR_STOP		       but got 0x%x\r\n", TWSR);   break;
 7e8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 7ec:	1f 92       	push	r1
 7ee:	8f 93       	push	r24
 7f0:	85 e5       	ldi	r24, 0x55	; 85
 7f2:	95 e0       	ldi	r25, 0x05	; 5
 7f4:	9f 93       	push	r25
 7f6:	8f 93       	push	r24
 7f8:	85 eb       	ldi	r24, 0xB5	; 181
 7fa:	95 e0       	ldi	r25, 0x05	; 5
 7fc:	9f 93       	push	r25
 7fe:	8f 93       	push	r24
 800:	0e 94 c8 04 	call	0x990	; 0x990 <sprintf>
 804:	0f 90       	pop	r0
 806:	0f 90       	pop	r0
 808:	0f 90       	pop	r0
 80a:	0f 90       	pop	r0
 80c:	0f 90       	pop	r0
 80e:	0f 90       	pop	r0
 810:	08 95       	ret
			default                      : sprintf(strbuf, "Expecting 0x%x but got 0x%x\r\n", expected,           TWSR);   break;
 812:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 816:	1f 92       	push	r1
 818:	9f 93       	push	r25
 81a:	1f 92       	push	r1
 81c:	8f 93       	push	r24
 81e:	81 e8       	ldi	r24, 0x81	; 129
 820:	95 e0       	ldi	r25, 0x05	; 5
 822:	9f 93       	push	r25
 824:	8f 93       	push	r24
 826:	85 eb       	ldi	r24, 0xB5	; 181
 828:	95 e0       	ldi	r25, 0x05	; 5
 82a:	9f 93       	push	r25
 82c:	8f 93       	push	r24
 82e:	0e 94 c8 04 	call	0x990	; 0x990 <sprintf>
 832:	8d b7       	in	r24, 0x3d	; 61
 834:	9e b7       	in	r25, 0x3e	; 62
 836:	08 96       	adiw	r24, 0x08	; 8
 838:	0f b6       	in	r0, 0x3f	; 63
 83a:	f8 94       	cli
 83c:	9e bf       	out	0x3e, r25	; 62
 83e:	0f be       	out	0x3f, r0	; 63
 840:	8d bf       	out	0x3d, r24	; 61
 842:	08 95       	ret

00000844 <TWIwrite>:
		}
	}
}

void TWIwrite(uint8_t slaveid, uint8_t addr, uint8_t data){
 844:	df 92       	push	r13
 846:	ef 92       	push	r14
 848:	ff 92       	push	r15
 84a:	0f 93       	push	r16
 84c:	1f 93       	push	r17
 84e:	cf 93       	push	r28
 850:	df 93       	push	r29
 852:	18 2f       	mov	r17, r24
 854:	d6 2e       	mov	r13, r22
 856:	04 2f       	mov	r16, r20
	
	// Send START condition, ACK is not expected
	TWCR = _BV(TWINT)|_BV(TWEN)|_BV(TWSTA);							// $$$$$$$$
 858:	cc eb       	ldi	r28, 0xBC	; 188
 85a:	d0 e0       	ldi	r29, 0x00	; 0
 85c:	84 ea       	ldi	r24, 0xA4	; 164
 85e:	88 83       	st	Y, r24
	Wait_n_Check_Error(TW_START);
 860:	88 e0       	ldi	r24, 0x08	; 8
 862:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <Wait_n_Check_Error>

	// Setup the slave ID (7bits) along with the intended operation (1bit)
	TWDR = slaveid|TW_WRITE;										// $$$$$$$$
 866:	0f 2e       	mov	r0, r31
 868:	fb eb       	ldi	r31, 0xBB	; 187
 86a:	ef 2e       	mov	r14, r31
 86c:	f1 2c       	mov	r15, r1
 86e:	f0 2d       	mov	r31, r0
 870:	f7 01       	movw	r30, r14
 872:	10 83       	st	Z, r17
	TWCR = _BV(TWINT)|_BV(TWEN)|_BV(TWEA);  // TWINT bit in TWCR to start transmission of address,
 874:	14 ec       	ldi	r17, 0xC4	; 196
 876:	18 83       	st	Y, r17
	Wait_n_Check_Error(TW_MT_SLA_ACK); // expecting ACK				// $$$$$$$$
 878:	88 e1       	ldi	r24, 0x18	; 24
 87a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <Wait_n_Check_Error>

	// Send the 1st byte which will be interpreted by the device as the register address,
	TWDR = addr;
 87e:	f7 01       	movw	r30, r14
 880:	d0 82       	st	Z, r13
	TWCR = _BV(TWINT)|_BV(TWEN)|_BV(TWEA);  // expecting ACK		// $$$$$$$$
 882:	18 83       	st	Y, r17
	Wait_n_Check_Error(TW_MT_DATA_ACK);								// $$$$$$$$
 884:	88 e2       	ldi	r24, 0x28	; 40
 886:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <Wait_n_Check_Error>
	
	// Send the 2nd byte which will be interpreted by the device as the register data,
	TWDR = data;
 88a:	f7 01       	movw	r30, r14
 88c:	00 83       	st	Z, r16
	TWCR = _BV(TWINT)|_BV(TWEN)|_BV(TWEA);  // expecting ACK		// $$$$$$$$
 88e:	18 83       	st	Y, r17
	Wait_n_Check_Error(TW_MT_DATA_ACK);								// $$$$$$$$
 890:	88 e2       	ldi	r24, 0x28	; 40
 892:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <Wait_n_Check_Error>

	// Send STOP condition, Nothing expected. Note that TWINT isn't set after STOP
	TWCR = _BV(TWINT)|_BV(TWEN)|_BV(TWSTO);							// $$$$$$$$
 896:	84 e9       	ldi	r24, 0x94	; 148
 898:	88 83       	st	Y, r24
	
	// Wait for STOP to be executed. TWINT is not set after a stop condition!
	while(TWCR & _BV(TWSTO));
 89a:	ec eb       	ldi	r30, 0xBC	; 188
 89c:	f0 e0       	ldi	r31, 0x00	; 0
 89e:	80 81       	ld	r24, Z
 8a0:	84 fd       	sbrc	r24, 4
 8a2:	fd cf       	rjmp	.-6      	; 0x89e <TWIwrite+0x5a>
}
 8a4:	df 91       	pop	r29
 8a6:	cf 91       	pop	r28
 8a8:	1f 91       	pop	r17
 8aa:	0f 91       	pop	r16
 8ac:	ff 90       	pop	r15
 8ae:	ef 90       	pop	r14
 8b0:	df 90       	pop	r13
 8b2:	08 95       	ret

000008b4 <TWIread>:
uint8_t TWIread(uint8_t slaveid, uint8_t addr){
	// Send START condition, ACK is not expected
	TWCR = _BV(TWINT)|_BV(TWEN)|_BV(TWSTA);		
 8b4:	ec eb       	ldi	r30, 0xBC	; 188
 8b6:	f0 e0       	ldi	r31, 0x00	; 0
 8b8:	24 ea       	ldi	r18, 0xA4	; 164
 8ba:	20 83       	st	Z, r18
	// Setup the slave ID (7bits) along with the intended operation (1bit)
	TWDR = slaveid|TW_WRITE;
 8bc:	ab eb       	ldi	r26, 0xBB	; 187
 8be:	b0 e0       	ldi	r27, 0x00	; 0
 8c0:	8c 93       	st	X, r24
	TWCR = _BV(TWINT)|_BV(TWEN)|_BV(TWEA);  // TWINT bit in TWCR to start transmission of address,
 8c2:	94 ec       	ldi	r25, 0xC4	; 196
 8c4:	90 83       	st	Z, r25
	// Send the 1st byte which will be interpreted by the device as the register address,
	TWDR = addr;
 8c6:	6c 93       	st	X, r22
	TWCR = _BV(TWINT)|_BV(TWEN)|_BV(TWEA);// expecting ACK
 8c8:	90 83       	st	Z, r25
	// Send Repeat START
	TWCR = _BV(TWINT)|_BV(TWSTA)|_BV(TWEN);
 8ca:	20 83       	st	Z, r18
	// Tell the device that you need to read the data for the address sent before
	TWDR = slaveid|TW_READ;                  // Setup the slave ID + READ						// $$$$$$$$
 8cc:	81 60       	ori	r24, 0x01	; 1
 8ce:	8c 93       	st	X, r24
	TWCR = _BV(TWINT)|_BV(TWEN)|_BV(TWEA);    // TWINT bit in TWCR to start transmission of address.
 8d0:	90 83       	st	Z, r25
	// Asking the slave to send the data byte,
	TWCR = _BV(TWINT)|_BV(TWEN);            // TWINT bit in TWCR to start transmission of data. // $$$$$$$$
 8d2:	84 e8       	ldi	r24, 0x84	; 132
 8d4:	80 83       	st	Z, r24
	uint8_t data = TWDR;	                       // Read the received data
 8d6:	8c 91       	ld	r24, X
	// Send STOP condition, Nothing expected. Note that TWINT isn't set after STOP
	TWCR = _BV(TWINT)|_BV(TWEN)|_BV(TWSTO);
 8d8:	94 e9       	ldi	r25, 0x94	; 148
 8da:	90 83       	st	Z, r25
	// Wait for STOP to be executed. TWINT is not set after a stop condition!
	while(TWCR & _BV(TWSTO));
 8dc:	90 81       	ld	r25, Z
 8de:	94 fd       	sbrc	r25, 4
 8e0:	fd cf       	rjmp	.-6      	; 0x8dc <TWIread+0x28>
	return data;
	}
 8e2:	08 95       	ret

000008e4 <light_sensor_init>:

void light_sensor_init(){
	TWIwrite(sensor , 0x80, 0b11);
 8e4:	43 e0       	ldi	r20, 0x03	; 3
 8e6:	60 e8       	ldi	r22, 0x80	; 128
 8e8:	89 e2       	ldi	r24, 0x29	; 41
 8ea:	0e 94 22 04 	call	0x844	; 0x844 <TWIwrite>
	Set_Cursor(1,2);
 8ee:	62 e0       	ldi	r22, 0x02	; 2
 8f0:	81 e0       	ldi	r24, 0x01	; 1
 8f2:	0e 94 4c 01 	call	0x298	; 0x298 <Set_Cursor>
	Write_String("I Enabled");
 8f6:	8f e9       	ldi	r24, 0x9F	; 159
 8f8:	95 e0       	ldi	r25, 0x05	; 5
 8fa:	0e 94 c9 01 	call	0x392	; 0x392 <Write_String>
 8fe:	08 95       	ret

00000900 <red_sensor_read>:
	
}

int16_t red_sensor_read(){
 900:	cf 93       	push	r28
 902:	df 93       	push	r29
	int16_t res;
	res  = TWIread(sensor, 0x96)<<8;		// $$$$$$$$
 904:	66 e9       	ldi	r22, 0x96	; 150
 906:	89 e2       	ldi	r24, 0x29	; 41
 908:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <TWIread>
 90c:	c8 2f       	mov	r28, r24
 90e:	d0 e0       	ldi	r29, 0x00	; 0
 910:	dc 2f       	mov	r29, r28
 912:	cc 27       	eor	r28, r28
	res |= TWIread(sensor, 0x97);		// $$$$$$$$
 914:	67 e9       	ldi	r22, 0x97	; 151
 916:	89 e2       	ldi	r24, 0x29	; 41
 918:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <TWIread>
	return res;
	
}
 91c:	9e 01       	movw	r18, r28
 91e:	28 2b       	or	r18, r24
 920:	c9 01       	movw	r24, r18
 922:	df 91       	pop	r29
 924:	cf 91       	pop	r28
 926:	08 95       	ret

00000928 <main>:
uint8_t err;
uint8_t TRACE=0;

int main(void)
{
	DDRD = 0xFF;
 928:	8f ef       	ldi	r24, 0xFF	; 255
 92a:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0xFF;
 92c:	87 b9       	out	0x07, r24	; 7
	int16_t  red;
	int16_t green;
	int16_t blue;
	char snum[16];

	Init();
 92e:	0e 94 69 01 	call	0x2d2	; 0x2d2 <Init>
	Clear();
 932:	0e 94 45 01 	call	0x28a	; 0x28a <Clear>
	//Set_Cursor(1,2);
	//Write_String("COLOR SENSOR");	
	
	TWIinit();
 936:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <TWIinit>
	light_sensor_init();
 93a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <light_sensor_init>
	
	Set_Cursor(2,0);
 93e:	60 e0       	ldi	r22, 0x00	; 0
 940:	82 e0       	ldi	r24, 0x02	; 2
 942:	0e 94 4c 01 	call	0x298	; 0x298 <Set_Cursor>
	Write_String("R:");
 946:	89 ea       	ldi	r24, 0xA9	; 169
 948:	95 e0       	ldi	r25, 0x05	; 5
 94a:	0e 94 c9 01 	call	0x392	; 0x392 <Write_String>

	
	Set_Cursor(2,6);
 94e:	66 e0       	ldi	r22, 0x06	; 6
 950:	82 e0       	ldi	r24, 0x02	; 2
 952:	0e 94 4c 01 	call	0x298	; 0x298 <Set_Cursor>
	Write_String("G:");
 956:	8c ea       	ldi	r24, 0xAC	; 172
 958:	95 e0       	ldi	r25, 0x05	; 5
 95a:	0e 94 c9 01 	call	0x392	; 0x392 <Write_String>

	
	Set_Cursor(2,12);
 95e:	6c e0       	ldi	r22, 0x0C	; 12
 960:	82 e0       	ldi	r24, 0x02	; 2
 962:	0e 94 4c 01 	call	0x298	; 0x298 <Set_Cursor>
	Write_String("B:");
 966:	8f ea       	ldi	r24, 0xAF	; 175
 968:	95 e0       	ldi	r25, 0x05	; 5
 96a:	0e 94 c9 01 	call	0x392	; 0x392 <Write_String>
	
	uint8_t num;
	

	while(1){
		red = red_sensor_read();
 96e:	0e 94 80 04 	call	0x900	; 0x900 <red_sensor_read>
		Set_Cursor(2,0);
 972:	60 e0       	ldi	r22, 0x00	; 0
 974:	82 e0       	ldi	r24, 0x02	; 2
 976:	0e 94 4c 01 	call	0x298	; 0x298 <Set_Cursor>
		Write_String("R");
 97a:	82 eb       	ldi	r24, 0xB2	; 178
 97c:	95 e0       	ldi	r25, 0x05	; 5
 97e:	0e 94 c9 01 	call	0x392	; 0x392 <Write_String>
 982:	f5 cf       	rjmp	.-22     	; 0x96e <main+0x46>

00000984 <__tablejump2__>:
 984:	ee 0f       	add	r30, r30
 986:	ff 1f       	adc	r31, r31
 988:	05 90       	lpm	r0, Z+
 98a:	f4 91       	lpm	r31, Z
 98c:	e0 2d       	mov	r30, r0
 98e:	09 94       	ijmp

00000990 <sprintf>:
 990:	ae e0       	ldi	r26, 0x0E	; 14
 992:	b0 e0       	ldi	r27, 0x00	; 0
 994:	ee ec       	ldi	r30, 0xCE	; 206
 996:	f4 e0       	ldi	r31, 0x04	; 4
 998:	0c 94 89 07 	jmp	0xf12	; 0xf12 <__prologue_saves__+0x1c>
 99c:	0d 89       	ldd	r16, Y+21	; 0x15
 99e:	1e 89       	ldd	r17, Y+22	; 0x16
 9a0:	86 e0       	ldi	r24, 0x06	; 6
 9a2:	8c 83       	std	Y+4, r24	; 0x04
 9a4:	1a 83       	std	Y+2, r17	; 0x02
 9a6:	09 83       	std	Y+1, r16	; 0x01
 9a8:	8f ef       	ldi	r24, 0xFF	; 255
 9aa:	9f e7       	ldi	r25, 0x7F	; 127
 9ac:	9e 83       	std	Y+6, r25	; 0x06
 9ae:	8d 83       	std	Y+5, r24	; 0x05
 9b0:	ae 01       	movw	r20, r28
 9b2:	47 5e       	subi	r20, 0xE7	; 231
 9b4:	5f 4f       	sbci	r21, 0xFF	; 255
 9b6:	6f 89       	ldd	r22, Y+23	; 0x17
 9b8:	78 8d       	ldd	r23, Y+24	; 0x18
 9ba:	ce 01       	movw	r24, r28
 9bc:	01 96       	adiw	r24, 0x01	; 1
 9be:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <vfprintf>
 9c2:	ef 81       	ldd	r30, Y+7	; 0x07
 9c4:	f8 85       	ldd	r31, Y+8	; 0x08
 9c6:	e0 0f       	add	r30, r16
 9c8:	f1 1f       	adc	r31, r17
 9ca:	10 82       	st	Z, r1
 9cc:	2e 96       	adiw	r28, 0x0e	; 14
 9ce:	e4 e0       	ldi	r30, 0x04	; 4
 9d0:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__epilogue_restores__+0x1c>

000009d4 <vfprintf>:
 9d4:	ab e0       	ldi	r26, 0x0B	; 11
 9d6:	b0 e0       	ldi	r27, 0x00	; 0
 9d8:	e0 ef       	ldi	r30, 0xF0	; 240
 9da:	f4 e0       	ldi	r31, 0x04	; 4
 9dc:	0c 94 7b 07 	jmp	0xef6	; 0xef6 <__prologue_saves__>
 9e0:	6c 01       	movw	r12, r24
 9e2:	7b 01       	movw	r14, r22
 9e4:	8a 01       	movw	r16, r20
 9e6:	fc 01       	movw	r30, r24
 9e8:	17 82       	std	Z+7, r1	; 0x07
 9ea:	16 82       	std	Z+6, r1	; 0x06
 9ec:	83 81       	ldd	r24, Z+3	; 0x03
 9ee:	81 ff       	sbrs	r24, 1
 9f0:	cc c1       	rjmp	.+920    	; 0xd8a <vfprintf+0x3b6>
 9f2:	ce 01       	movw	r24, r28
 9f4:	01 96       	adiw	r24, 0x01	; 1
 9f6:	3c 01       	movw	r6, r24
 9f8:	f6 01       	movw	r30, r12
 9fa:	93 81       	ldd	r25, Z+3	; 0x03
 9fc:	f7 01       	movw	r30, r14
 9fe:	93 fd       	sbrc	r25, 3
 a00:	85 91       	lpm	r24, Z+
 a02:	93 ff       	sbrs	r25, 3
 a04:	81 91       	ld	r24, Z+
 a06:	7f 01       	movw	r14, r30
 a08:	88 23       	and	r24, r24
 a0a:	09 f4       	brne	.+2      	; 0xa0e <vfprintf+0x3a>
 a0c:	ba c1       	rjmp	.+884    	; 0xd82 <vfprintf+0x3ae>
 a0e:	85 32       	cpi	r24, 0x25	; 37
 a10:	39 f4       	brne	.+14     	; 0xa20 <vfprintf+0x4c>
 a12:	93 fd       	sbrc	r25, 3
 a14:	85 91       	lpm	r24, Z+
 a16:	93 ff       	sbrs	r25, 3
 a18:	81 91       	ld	r24, Z+
 a1a:	7f 01       	movw	r14, r30
 a1c:	85 32       	cpi	r24, 0x25	; 37
 a1e:	29 f4       	brne	.+10     	; 0xa2a <vfprintf+0x56>
 a20:	b6 01       	movw	r22, r12
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <fputc>
 a28:	e7 cf       	rjmp	.-50     	; 0x9f8 <vfprintf+0x24>
 a2a:	91 2c       	mov	r9, r1
 a2c:	21 2c       	mov	r2, r1
 a2e:	31 2c       	mov	r3, r1
 a30:	ff e1       	ldi	r31, 0x1F	; 31
 a32:	f3 15       	cp	r31, r3
 a34:	d8 f0       	brcs	.+54     	; 0xa6c <vfprintf+0x98>
 a36:	8b 32       	cpi	r24, 0x2B	; 43
 a38:	79 f0       	breq	.+30     	; 0xa58 <vfprintf+0x84>
 a3a:	38 f4       	brcc	.+14     	; 0xa4a <vfprintf+0x76>
 a3c:	80 32       	cpi	r24, 0x20	; 32
 a3e:	79 f0       	breq	.+30     	; 0xa5e <vfprintf+0x8a>
 a40:	83 32       	cpi	r24, 0x23	; 35
 a42:	a1 f4       	brne	.+40     	; 0xa6c <vfprintf+0x98>
 a44:	23 2d       	mov	r18, r3
 a46:	20 61       	ori	r18, 0x10	; 16
 a48:	1d c0       	rjmp	.+58     	; 0xa84 <vfprintf+0xb0>
 a4a:	8d 32       	cpi	r24, 0x2D	; 45
 a4c:	61 f0       	breq	.+24     	; 0xa66 <vfprintf+0x92>
 a4e:	80 33       	cpi	r24, 0x30	; 48
 a50:	69 f4       	brne	.+26     	; 0xa6c <vfprintf+0x98>
 a52:	23 2d       	mov	r18, r3
 a54:	21 60       	ori	r18, 0x01	; 1
 a56:	16 c0       	rjmp	.+44     	; 0xa84 <vfprintf+0xb0>
 a58:	83 2d       	mov	r24, r3
 a5a:	82 60       	ori	r24, 0x02	; 2
 a5c:	38 2e       	mov	r3, r24
 a5e:	e3 2d       	mov	r30, r3
 a60:	e4 60       	ori	r30, 0x04	; 4
 a62:	3e 2e       	mov	r3, r30
 a64:	2a c0       	rjmp	.+84     	; 0xaba <vfprintf+0xe6>
 a66:	f3 2d       	mov	r31, r3
 a68:	f8 60       	ori	r31, 0x08	; 8
 a6a:	1d c0       	rjmp	.+58     	; 0xaa6 <vfprintf+0xd2>
 a6c:	37 fc       	sbrc	r3, 7
 a6e:	2d c0       	rjmp	.+90     	; 0xaca <vfprintf+0xf6>
 a70:	20 ed       	ldi	r18, 0xD0	; 208
 a72:	28 0f       	add	r18, r24
 a74:	2a 30       	cpi	r18, 0x0A	; 10
 a76:	40 f0       	brcs	.+16     	; 0xa88 <vfprintf+0xb4>
 a78:	8e 32       	cpi	r24, 0x2E	; 46
 a7a:	b9 f4       	brne	.+46     	; 0xaaa <vfprintf+0xd6>
 a7c:	36 fc       	sbrc	r3, 6
 a7e:	81 c1       	rjmp	.+770    	; 0xd82 <vfprintf+0x3ae>
 a80:	23 2d       	mov	r18, r3
 a82:	20 64       	ori	r18, 0x40	; 64
 a84:	32 2e       	mov	r3, r18
 a86:	19 c0       	rjmp	.+50     	; 0xaba <vfprintf+0xe6>
 a88:	36 fe       	sbrs	r3, 6
 a8a:	06 c0       	rjmp	.+12     	; 0xa98 <vfprintf+0xc4>
 a8c:	8a e0       	ldi	r24, 0x0A	; 10
 a8e:	98 9e       	mul	r9, r24
 a90:	20 0d       	add	r18, r0
 a92:	11 24       	eor	r1, r1
 a94:	92 2e       	mov	r9, r18
 a96:	11 c0       	rjmp	.+34     	; 0xaba <vfprintf+0xe6>
 a98:	ea e0       	ldi	r30, 0x0A	; 10
 a9a:	2e 9e       	mul	r2, r30
 a9c:	20 0d       	add	r18, r0
 a9e:	11 24       	eor	r1, r1
 aa0:	22 2e       	mov	r2, r18
 aa2:	f3 2d       	mov	r31, r3
 aa4:	f0 62       	ori	r31, 0x20	; 32
 aa6:	3f 2e       	mov	r3, r31
 aa8:	08 c0       	rjmp	.+16     	; 0xaba <vfprintf+0xe6>
 aaa:	8c 36       	cpi	r24, 0x6C	; 108
 aac:	21 f4       	brne	.+8      	; 0xab6 <vfprintf+0xe2>
 aae:	83 2d       	mov	r24, r3
 ab0:	80 68       	ori	r24, 0x80	; 128
 ab2:	38 2e       	mov	r3, r24
 ab4:	02 c0       	rjmp	.+4      	; 0xaba <vfprintf+0xe6>
 ab6:	88 36       	cpi	r24, 0x68	; 104
 ab8:	41 f4       	brne	.+16     	; 0xaca <vfprintf+0xf6>
 aba:	f7 01       	movw	r30, r14
 abc:	93 fd       	sbrc	r25, 3
 abe:	85 91       	lpm	r24, Z+
 ac0:	93 ff       	sbrs	r25, 3
 ac2:	81 91       	ld	r24, Z+
 ac4:	7f 01       	movw	r14, r30
 ac6:	81 11       	cpse	r24, r1
 ac8:	b3 cf       	rjmp	.-154    	; 0xa30 <vfprintf+0x5c>
 aca:	98 2f       	mov	r25, r24
 acc:	9f 7d       	andi	r25, 0xDF	; 223
 ace:	95 54       	subi	r25, 0x45	; 69
 ad0:	93 30       	cpi	r25, 0x03	; 3
 ad2:	28 f4       	brcc	.+10     	; 0xade <vfprintf+0x10a>
 ad4:	0c 5f       	subi	r16, 0xFC	; 252
 ad6:	1f 4f       	sbci	r17, 0xFF	; 255
 ad8:	9f e3       	ldi	r25, 0x3F	; 63
 ada:	99 83       	std	Y+1, r25	; 0x01
 adc:	0d c0       	rjmp	.+26     	; 0xaf8 <vfprintf+0x124>
 ade:	83 36       	cpi	r24, 0x63	; 99
 ae0:	31 f0       	breq	.+12     	; 0xaee <vfprintf+0x11a>
 ae2:	83 37       	cpi	r24, 0x73	; 115
 ae4:	71 f0       	breq	.+28     	; 0xb02 <vfprintf+0x12e>
 ae6:	83 35       	cpi	r24, 0x53	; 83
 ae8:	09 f0       	breq	.+2      	; 0xaec <vfprintf+0x118>
 aea:	59 c0       	rjmp	.+178    	; 0xb9e <vfprintf+0x1ca>
 aec:	21 c0       	rjmp	.+66     	; 0xb30 <vfprintf+0x15c>
 aee:	f8 01       	movw	r30, r16
 af0:	80 81       	ld	r24, Z
 af2:	89 83       	std	Y+1, r24	; 0x01
 af4:	0e 5f       	subi	r16, 0xFE	; 254
 af6:	1f 4f       	sbci	r17, 0xFF	; 255
 af8:	88 24       	eor	r8, r8
 afa:	83 94       	inc	r8
 afc:	91 2c       	mov	r9, r1
 afe:	53 01       	movw	r10, r6
 b00:	13 c0       	rjmp	.+38     	; 0xb28 <vfprintf+0x154>
 b02:	28 01       	movw	r4, r16
 b04:	f2 e0       	ldi	r31, 0x02	; 2
 b06:	4f 0e       	add	r4, r31
 b08:	51 1c       	adc	r5, r1
 b0a:	f8 01       	movw	r30, r16
 b0c:	a0 80       	ld	r10, Z
 b0e:	b1 80       	ldd	r11, Z+1	; 0x01
 b10:	36 fe       	sbrs	r3, 6
 b12:	03 c0       	rjmp	.+6      	; 0xb1a <vfprintf+0x146>
 b14:	69 2d       	mov	r22, r9
 b16:	70 e0       	ldi	r23, 0x00	; 0
 b18:	02 c0       	rjmp	.+4      	; 0xb1e <vfprintf+0x14a>
 b1a:	6f ef       	ldi	r22, 0xFF	; 255
 b1c:	7f ef       	ldi	r23, 0xFF	; 255
 b1e:	c5 01       	movw	r24, r10
 b20:	0e 94 d6 06 	call	0xdac	; 0xdac <strnlen>
 b24:	4c 01       	movw	r8, r24
 b26:	82 01       	movw	r16, r4
 b28:	f3 2d       	mov	r31, r3
 b2a:	ff 77       	andi	r31, 0x7F	; 127
 b2c:	3f 2e       	mov	r3, r31
 b2e:	16 c0       	rjmp	.+44     	; 0xb5c <vfprintf+0x188>
 b30:	28 01       	movw	r4, r16
 b32:	22 e0       	ldi	r18, 0x02	; 2
 b34:	42 0e       	add	r4, r18
 b36:	51 1c       	adc	r5, r1
 b38:	f8 01       	movw	r30, r16
 b3a:	a0 80       	ld	r10, Z
 b3c:	b1 80       	ldd	r11, Z+1	; 0x01
 b3e:	36 fe       	sbrs	r3, 6
 b40:	03 c0       	rjmp	.+6      	; 0xb48 <vfprintf+0x174>
 b42:	69 2d       	mov	r22, r9
 b44:	70 e0       	ldi	r23, 0x00	; 0
 b46:	02 c0       	rjmp	.+4      	; 0xb4c <vfprintf+0x178>
 b48:	6f ef       	ldi	r22, 0xFF	; 255
 b4a:	7f ef       	ldi	r23, 0xFF	; 255
 b4c:	c5 01       	movw	r24, r10
 b4e:	0e 94 cb 06 	call	0xd96	; 0xd96 <strnlen_P>
 b52:	4c 01       	movw	r8, r24
 b54:	f3 2d       	mov	r31, r3
 b56:	f0 68       	ori	r31, 0x80	; 128
 b58:	3f 2e       	mov	r3, r31
 b5a:	82 01       	movw	r16, r4
 b5c:	33 fc       	sbrc	r3, 3
 b5e:	1b c0       	rjmp	.+54     	; 0xb96 <vfprintf+0x1c2>
 b60:	82 2d       	mov	r24, r2
 b62:	90 e0       	ldi	r25, 0x00	; 0
 b64:	88 16       	cp	r8, r24
 b66:	99 06       	cpc	r9, r25
 b68:	b0 f4       	brcc	.+44     	; 0xb96 <vfprintf+0x1c2>
 b6a:	b6 01       	movw	r22, r12
 b6c:	80 e2       	ldi	r24, 0x20	; 32
 b6e:	90 e0       	ldi	r25, 0x00	; 0
 b70:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <fputc>
 b74:	2a 94       	dec	r2
 b76:	f4 cf       	rjmp	.-24     	; 0xb60 <vfprintf+0x18c>
 b78:	f5 01       	movw	r30, r10
 b7a:	37 fc       	sbrc	r3, 7
 b7c:	85 91       	lpm	r24, Z+
 b7e:	37 fe       	sbrs	r3, 7
 b80:	81 91       	ld	r24, Z+
 b82:	5f 01       	movw	r10, r30
 b84:	b6 01       	movw	r22, r12
 b86:	90 e0       	ldi	r25, 0x00	; 0
 b88:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <fputc>
 b8c:	21 10       	cpse	r2, r1
 b8e:	2a 94       	dec	r2
 b90:	21 e0       	ldi	r18, 0x01	; 1
 b92:	82 1a       	sub	r8, r18
 b94:	91 08       	sbc	r9, r1
 b96:	81 14       	cp	r8, r1
 b98:	91 04       	cpc	r9, r1
 b9a:	71 f7       	brne	.-36     	; 0xb78 <vfprintf+0x1a4>
 b9c:	e8 c0       	rjmp	.+464    	; 0xd6e <vfprintf+0x39a>
 b9e:	84 36       	cpi	r24, 0x64	; 100
 ba0:	11 f0       	breq	.+4      	; 0xba6 <vfprintf+0x1d2>
 ba2:	89 36       	cpi	r24, 0x69	; 105
 ba4:	41 f5       	brne	.+80     	; 0xbf6 <vfprintf+0x222>
 ba6:	f8 01       	movw	r30, r16
 ba8:	37 fe       	sbrs	r3, 7
 baa:	07 c0       	rjmp	.+14     	; 0xbba <vfprintf+0x1e6>
 bac:	60 81       	ld	r22, Z
 bae:	71 81       	ldd	r23, Z+1	; 0x01
 bb0:	82 81       	ldd	r24, Z+2	; 0x02
 bb2:	93 81       	ldd	r25, Z+3	; 0x03
 bb4:	0c 5f       	subi	r16, 0xFC	; 252
 bb6:	1f 4f       	sbci	r17, 0xFF	; 255
 bb8:	08 c0       	rjmp	.+16     	; 0xbca <vfprintf+0x1f6>
 bba:	60 81       	ld	r22, Z
 bbc:	71 81       	ldd	r23, Z+1	; 0x01
 bbe:	07 2e       	mov	r0, r23
 bc0:	00 0c       	add	r0, r0
 bc2:	88 0b       	sbc	r24, r24
 bc4:	99 0b       	sbc	r25, r25
 bc6:	0e 5f       	subi	r16, 0xFE	; 254
 bc8:	1f 4f       	sbci	r17, 0xFF	; 255
 bca:	f3 2d       	mov	r31, r3
 bcc:	ff 76       	andi	r31, 0x6F	; 111
 bce:	3f 2e       	mov	r3, r31
 bd0:	97 ff       	sbrs	r25, 7
 bd2:	09 c0       	rjmp	.+18     	; 0xbe6 <vfprintf+0x212>
 bd4:	90 95       	com	r25
 bd6:	80 95       	com	r24
 bd8:	70 95       	com	r23
 bda:	61 95       	neg	r22
 bdc:	7f 4f       	sbci	r23, 0xFF	; 255
 bde:	8f 4f       	sbci	r24, 0xFF	; 255
 be0:	9f 4f       	sbci	r25, 0xFF	; 255
 be2:	f0 68       	ori	r31, 0x80	; 128
 be4:	3f 2e       	mov	r3, r31
 be6:	2a e0       	ldi	r18, 0x0A	; 10
 be8:	30 e0       	ldi	r19, 0x00	; 0
 bea:	a3 01       	movw	r20, r6
 bec:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__ultoa_invert>
 bf0:	88 2e       	mov	r8, r24
 bf2:	86 18       	sub	r8, r6
 bf4:	45 c0       	rjmp	.+138    	; 0xc80 <vfprintf+0x2ac>
 bf6:	85 37       	cpi	r24, 0x75	; 117
 bf8:	31 f4       	brne	.+12     	; 0xc06 <vfprintf+0x232>
 bfa:	23 2d       	mov	r18, r3
 bfc:	2f 7e       	andi	r18, 0xEF	; 239
 bfe:	b2 2e       	mov	r11, r18
 c00:	2a e0       	ldi	r18, 0x0A	; 10
 c02:	30 e0       	ldi	r19, 0x00	; 0
 c04:	25 c0       	rjmp	.+74     	; 0xc50 <vfprintf+0x27c>
 c06:	93 2d       	mov	r25, r3
 c08:	99 7f       	andi	r25, 0xF9	; 249
 c0a:	b9 2e       	mov	r11, r25
 c0c:	8f 36       	cpi	r24, 0x6F	; 111
 c0e:	c1 f0       	breq	.+48     	; 0xc40 <vfprintf+0x26c>
 c10:	18 f4       	brcc	.+6      	; 0xc18 <vfprintf+0x244>
 c12:	88 35       	cpi	r24, 0x58	; 88
 c14:	79 f0       	breq	.+30     	; 0xc34 <vfprintf+0x260>
 c16:	b5 c0       	rjmp	.+362    	; 0xd82 <vfprintf+0x3ae>
 c18:	80 37       	cpi	r24, 0x70	; 112
 c1a:	19 f0       	breq	.+6      	; 0xc22 <vfprintf+0x24e>
 c1c:	88 37       	cpi	r24, 0x78	; 120
 c1e:	21 f0       	breq	.+8      	; 0xc28 <vfprintf+0x254>
 c20:	b0 c0       	rjmp	.+352    	; 0xd82 <vfprintf+0x3ae>
 c22:	e9 2f       	mov	r30, r25
 c24:	e0 61       	ori	r30, 0x10	; 16
 c26:	be 2e       	mov	r11, r30
 c28:	b4 fe       	sbrs	r11, 4
 c2a:	0d c0       	rjmp	.+26     	; 0xc46 <vfprintf+0x272>
 c2c:	fb 2d       	mov	r31, r11
 c2e:	f4 60       	ori	r31, 0x04	; 4
 c30:	bf 2e       	mov	r11, r31
 c32:	09 c0       	rjmp	.+18     	; 0xc46 <vfprintf+0x272>
 c34:	34 fe       	sbrs	r3, 4
 c36:	0a c0       	rjmp	.+20     	; 0xc4c <vfprintf+0x278>
 c38:	29 2f       	mov	r18, r25
 c3a:	26 60       	ori	r18, 0x06	; 6
 c3c:	b2 2e       	mov	r11, r18
 c3e:	06 c0       	rjmp	.+12     	; 0xc4c <vfprintf+0x278>
 c40:	28 e0       	ldi	r18, 0x08	; 8
 c42:	30 e0       	ldi	r19, 0x00	; 0
 c44:	05 c0       	rjmp	.+10     	; 0xc50 <vfprintf+0x27c>
 c46:	20 e1       	ldi	r18, 0x10	; 16
 c48:	30 e0       	ldi	r19, 0x00	; 0
 c4a:	02 c0       	rjmp	.+4      	; 0xc50 <vfprintf+0x27c>
 c4c:	20 e1       	ldi	r18, 0x10	; 16
 c4e:	32 e0       	ldi	r19, 0x02	; 2
 c50:	f8 01       	movw	r30, r16
 c52:	b7 fe       	sbrs	r11, 7
 c54:	07 c0       	rjmp	.+14     	; 0xc64 <vfprintf+0x290>
 c56:	60 81       	ld	r22, Z
 c58:	71 81       	ldd	r23, Z+1	; 0x01
 c5a:	82 81       	ldd	r24, Z+2	; 0x02
 c5c:	93 81       	ldd	r25, Z+3	; 0x03
 c5e:	0c 5f       	subi	r16, 0xFC	; 252
 c60:	1f 4f       	sbci	r17, 0xFF	; 255
 c62:	06 c0       	rjmp	.+12     	; 0xc70 <vfprintf+0x29c>
 c64:	60 81       	ld	r22, Z
 c66:	71 81       	ldd	r23, Z+1	; 0x01
 c68:	80 e0       	ldi	r24, 0x00	; 0
 c6a:	90 e0       	ldi	r25, 0x00	; 0
 c6c:	0e 5f       	subi	r16, 0xFE	; 254
 c6e:	1f 4f       	sbci	r17, 0xFF	; 255
 c70:	a3 01       	movw	r20, r6
 c72:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__ultoa_invert>
 c76:	88 2e       	mov	r8, r24
 c78:	86 18       	sub	r8, r6
 c7a:	fb 2d       	mov	r31, r11
 c7c:	ff 77       	andi	r31, 0x7F	; 127
 c7e:	3f 2e       	mov	r3, r31
 c80:	36 fe       	sbrs	r3, 6
 c82:	0d c0       	rjmp	.+26     	; 0xc9e <vfprintf+0x2ca>
 c84:	23 2d       	mov	r18, r3
 c86:	2e 7f       	andi	r18, 0xFE	; 254
 c88:	a2 2e       	mov	r10, r18
 c8a:	89 14       	cp	r8, r9
 c8c:	58 f4       	brcc	.+22     	; 0xca4 <vfprintf+0x2d0>
 c8e:	34 fe       	sbrs	r3, 4
 c90:	0b c0       	rjmp	.+22     	; 0xca8 <vfprintf+0x2d4>
 c92:	32 fc       	sbrc	r3, 2
 c94:	09 c0       	rjmp	.+18     	; 0xca8 <vfprintf+0x2d4>
 c96:	83 2d       	mov	r24, r3
 c98:	8e 7e       	andi	r24, 0xEE	; 238
 c9a:	a8 2e       	mov	r10, r24
 c9c:	05 c0       	rjmp	.+10     	; 0xca8 <vfprintf+0x2d4>
 c9e:	b8 2c       	mov	r11, r8
 ca0:	a3 2c       	mov	r10, r3
 ca2:	03 c0       	rjmp	.+6      	; 0xcaa <vfprintf+0x2d6>
 ca4:	b8 2c       	mov	r11, r8
 ca6:	01 c0       	rjmp	.+2      	; 0xcaa <vfprintf+0x2d6>
 ca8:	b9 2c       	mov	r11, r9
 caa:	a4 fe       	sbrs	r10, 4
 cac:	0f c0       	rjmp	.+30     	; 0xccc <vfprintf+0x2f8>
 cae:	fe 01       	movw	r30, r28
 cb0:	e8 0d       	add	r30, r8
 cb2:	f1 1d       	adc	r31, r1
 cb4:	80 81       	ld	r24, Z
 cb6:	80 33       	cpi	r24, 0x30	; 48
 cb8:	21 f4       	brne	.+8      	; 0xcc2 <vfprintf+0x2ee>
 cba:	9a 2d       	mov	r25, r10
 cbc:	99 7e       	andi	r25, 0xE9	; 233
 cbe:	a9 2e       	mov	r10, r25
 cc0:	09 c0       	rjmp	.+18     	; 0xcd4 <vfprintf+0x300>
 cc2:	a2 fe       	sbrs	r10, 2
 cc4:	06 c0       	rjmp	.+12     	; 0xcd2 <vfprintf+0x2fe>
 cc6:	b3 94       	inc	r11
 cc8:	b3 94       	inc	r11
 cca:	04 c0       	rjmp	.+8      	; 0xcd4 <vfprintf+0x300>
 ccc:	8a 2d       	mov	r24, r10
 cce:	86 78       	andi	r24, 0x86	; 134
 cd0:	09 f0       	breq	.+2      	; 0xcd4 <vfprintf+0x300>
 cd2:	b3 94       	inc	r11
 cd4:	a3 fc       	sbrc	r10, 3
 cd6:	11 c0       	rjmp	.+34     	; 0xcfa <vfprintf+0x326>
 cd8:	a0 fe       	sbrs	r10, 0
 cda:	06 c0       	rjmp	.+12     	; 0xce8 <vfprintf+0x314>
 cdc:	b2 14       	cp	r11, r2
 cde:	88 f4       	brcc	.+34     	; 0xd02 <vfprintf+0x32e>
 ce0:	28 0c       	add	r2, r8
 ce2:	92 2c       	mov	r9, r2
 ce4:	9b 18       	sub	r9, r11
 ce6:	0e c0       	rjmp	.+28     	; 0xd04 <vfprintf+0x330>
 ce8:	b2 14       	cp	r11, r2
 cea:	60 f4       	brcc	.+24     	; 0xd04 <vfprintf+0x330>
 cec:	b6 01       	movw	r22, r12
 cee:	80 e2       	ldi	r24, 0x20	; 32
 cf0:	90 e0       	ldi	r25, 0x00	; 0
 cf2:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <fputc>
 cf6:	b3 94       	inc	r11
 cf8:	f7 cf       	rjmp	.-18     	; 0xce8 <vfprintf+0x314>
 cfa:	b2 14       	cp	r11, r2
 cfc:	18 f4       	brcc	.+6      	; 0xd04 <vfprintf+0x330>
 cfe:	2b 18       	sub	r2, r11
 d00:	02 c0       	rjmp	.+4      	; 0xd06 <vfprintf+0x332>
 d02:	98 2c       	mov	r9, r8
 d04:	21 2c       	mov	r2, r1
 d06:	a4 fe       	sbrs	r10, 4
 d08:	10 c0       	rjmp	.+32     	; 0xd2a <vfprintf+0x356>
 d0a:	b6 01       	movw	r22, r12
 d0c:	80 e3       	ldi	r24, 0x30	; 48
 d0e:	90 e0       	ldi	r25, 0x00	; 0
 d10:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <fputc>
 d14:	a2 fe       	sbrs	r10, 2
 d16:	17 c0       	rjmp	.+46     	; 0xd46 <vfprintf+0x372>
 d18:	a1 fc       	sbrc	r10, 1
 d1a:	03 c0       	rjmp	.+6      	; 0xd22 <vfprintf+0x34e>
 d1c:	88 e7       	ldi	r24, 0x78	; 120
 d1e:	90 e0       	ldi	r25, 0x00	; 0
 d20:	02 c0       	rjmp	.+4      	; 0xd26 <vfprintf+0x352>
 d22:	88 e5       	ldi	r24, 0x58	; 88
 d24:	90 e0       	ldi	r25, 0x00	; 0
 d26:	b6 01       	movw	r22, r12
 d28:	0c c0       	rjmp	.+24     	; 0xd42 <vfprintf+0x36e>
 d2a:	8a 2d       	mov	r24, r10
 d2c:	86 78       	andi	r24, 0x86	; 134
 d2e:	59 f0       	breq	.+22     	; 0xd46 <vfprintf+0x372>
 d30:	a1 fe       	sbrs	r10, 1
 d32:	02 c0       	rjmp	.+4      	; 0xd38 <vfprintf+0x364>
 d34:	8b e2       	ldi	r24, 0x2B	; 43
 d36:	01 c0       	rjmp	.+2      	; 0xd3a <vfprintf+0x366>
 d38:	80 e2       	ldi	r24, 0x20	; 32
 d3a:	a7 fc       	sbrc	r10, 7
 d3c:	8d e2       	ldi	r24, 0x2D	; 45
 d3e:	b6 01       	movw	r22, r12
 d40:	90 e0       	ldi	r25, 0x00	; 0
 d42:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <fputc>
 d46:	89 14       	cp	r8, r9
 d48:	38 f4       	brcc	.+14     	; 0xd58 <vfprintf+0x384>
 d4a:	b6 01       	movw	r22, r12
 d4c:	80 e3       	ldi	r24, 0x30	; 48
 d4e:	90 e0       	ldi	r25, 0x00	; 0
 d50:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <fputc>
 d54:	9a 94       	dec	r9
 d56:	f7 cf       	rjmp	.-18     	; 0xd46 <vfprintf+0x372>
 d58:	8a 94       	dec	r8
 d5a:	f3 01       	movw	r30, r6
 d5c:	e8 0d       	add	r30, r8
 d5e:	f1 1d       	adc	r31, r1
 d60:	80 81       	ld	r24, Z
 d62:	b6 01       	movw	r22, r12
 d64:	90 e0       	ldi	r25, 0x00	; 0
 d66:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <fputc>
 d6a:	81 10       	cpse	r8, r1
 d6c:	f5 cf       	rjmp	.-22     	; 0xd58 <vfprintf+0x384>
 d6e:	22 20       	and	r2, r2
 d70:	09 f4       	brne	.+2      	; 0xd74 <vfprintf+0x3a0>
 d72:	42 ce       	rjmp	.-892    	; 0x9f8 <vfprintf+0x24>
 d74:	b6 01       	movw	r22, r12
 d76:	80 e2       	ldi	r24, 0x20	; 32
 d78:	90 e0       	ldi	r25, 0x00	; 0
 d7a:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <fputc>
 d7e:	2a 94       	dec	r2
 d80:	f6 cf       	rjmp	.-20     	; 0xd6e <vfprintf+0x39a>
 d82:	f6 01       	movw	r30, r12
 d84:	86 81       	ldd	r24, Z+6	; 0x06
 d86:	97 81       	ldd	r25, Z+7	; 0x07
 d88:	02 c0       	rjmp	.+4      	; 0xd8e <vfprintf+0x3ba>
 d8a:	8f ef       	ldi	r24, 0xFF	; 255
 d8c:	9f ef       	ldi	r25, 0xFF	; 255
 d8e:	2b 96       	adiw	r28, 0x0b	; 11
 d90:	e2 e1       	ldi	r30, 0x12	; 18
 d92:	0c 94 97 07 	jmp	0xf2e	; 0xf2e <__epilogue_restores__>

00000d96 <strnlen_P>:
 d96:	fc 01       	movw	r30, r24
 d98:	05 90       	lpm	r0, Z+
 d9a:	61 50       	subi	r22, 0x01	; 1
 d9c:	70 40       	sbci	r23, 0x00	; 0
 d9e:	01 10       	cpse	r0, r1
 da0:	d8 f7       	brcc	.-10     	; 0xd98 <strnlen_P+0x2>
 da2:	80 95       	com	r24
 da4:	90 95       	com	r25
 da6:	8e 0f       	add	r24, r30
 da8:	9f 1f       	adc	r25, r31
 daa:	08 95       	ret

00000dac <strnlen>:
 dac:	fc 01       	movw	r30, r24
 dae:	61 50       	subi	r22, 0x01	; 1
 db0:	70 40       	sbci	r23, 0x00	; 0
 db2:	01 90       	ld	r0, Z+
 db4:	01 10       	cpse	r0, r1
 db6:	d8 f7       	brcc	.-10     	; 0xdae <strnlen+0x2>
 db8:	80 95       	com	r24
 dba:	90 95       	com	r25
 dbc:	8e 0f       	add	r24, r30
 dbe:	9f 1f       	adc	r25, r31
 dc0:	08 95       	ret

00000dc2 <fputc>:
 dc2:	0f 93       	push	r16
 dc4:	1f 93       	push	r17
 dc6:	cf 93       	push	r28
 dc8:	df 93       	push	r29
 dca:	fb 01       	movw	r30, r22
 dcc:	23 81       	ldd	r18, Z+3	; 0x03
 dce:	21 fd       	sbrc	r18, 1
 dd0:	03 c0       	rjmp	.+6      	; 0xdd8 <fputc+0x16>
 dd2:	8f ef       	ldi	r24, 0xFF	; 255
 dd4:	9f ef       	ldi	r25, 0xFF	; 255
 dd6:	2c c0       	rjmp	.+88     	; 0xe30 <fputc+0x6e>
 dd8:	22 ff       	sbrs	r18, 2
 dda:	16 c0       	rjmp	.+44     	; 0xe08 <fputc+0x46>
 ddc:	46 81       	ldd	r20, Z+6	; 0x06
 dde:	57 81       	ldd	r21, Z+7	; 0x07
 de0:	24 81       	ldd	r18, Z+4	; 0x04
 de2:	35 81       	ldd	r19, Z+5	; 0x05
 de4:	42 17       	cp	r20, r18
 de6:	53 07       	cpc	r21, r19
 de8:	44 f4       	brge	.+16     	; 0xdfa <fputc+0x38>
 dea:	a0 81       	ld	r26, Z
 dec:	b1 81       	ldd	r27, Z+1	; 0x01
 dee:	9d 01       	movw	r18, r26
 df0:	2f 5f       	subi	r18, 0xFF	; 255
 df2:	3f 4f       	sbci	r19, 0xFF	; 255
 df4:	31 83       	std	Z+1, r19	; 0x01
 df6:	20 83       	st	Z, r18
 df8:	8c 93       	st	X, r24
 dfa:	26 81       	ldd	r18, Z+6	; 0x06
 dfc:	37 81       	ldd	r19, Z+7	; 0x07
 dfe:	2f 5f       	subi	r18, 0xFF	; 255
 e00:	3f 4f       	sbci	r19, 0xFF	; 255
 e02:	37 83       	std	Z+7, r19	; 0x07
 e04:	26 83       	std	Z+6, r18	; 0x06
 e06:	14 c0       	rjmp	.+40     	; 0xe30 <fputc+0x6e>
 e08:	8b 01       	movw	r16, r22
 e0a:	ec 01       	movw	r28, r24
 e0c:	fb 01       	movw	r30, r22
 e0e:	00 84       	ldd	r0, Z+8	; 0x08
 e10:	f1 85       	ldd	r31, Z+9	; 0x09
 e12:	e0 2d       	mov	r30, r0
 e14:	09 95       	icall
 e16:	89 2b       	or	r24, r25
 e18:	e1 f6       	brne	.-72     	; 0xdd2 <fputc+0x10>
 e1a:	d8 01       	movw	r26, r16
 e1c:	16 96       	adiw	r26, 0x06	; 6
 e1e:	8d 91       	ld	r24, X+
 e20:	9c 91       	ld	r25, X
 e22:	17 97       	sbiw	r26, 0x07	; 7
 e24:	01 96       	adiw	r24, 0x01	; 1
 e26:	17 96       	adiw	r26, 0x07	; 7
 e28:	9c 93       	st	X, r25
 e2a:	8e 93       	st	-X, r24
 e2c:	16 97       	sbiw	r26, 0x06	; 6
 e2e:	ce 01       	movw	r24, r28
 e30:	df 91       	pop	r29
 e32:	cf 91       	pop	r28
 e34:	1f 91       	pop	r17
 e36:	0f 91       	pop	r16
 e38:	08 95       	ret

00000e3a <__ultoa_invert>:
 e3a:	fa 01       	movw	r30, r20
 e3c:	aa 27       	eor	r26, r26
 e3e:	28 30       	cpi	r18, 0x08	; 8
 e40:	51 f1       	breq	.+84     	; 0xe96 <__ultoa_invert+0x5c>
 e42:	20 31       	cpi	r18, 0x10	; 16
 e44:	81 f1       	breq	.+96     	; 0xea6 <__ultoa_invert+0x6c>
 e46:	e8 94       	clt
 e48:	6f 93       	push	r22
 e4a:	6e 7f       	andi	r22, 0xFE	; 254
 e4c:	6e 5f       	subi	r22, 0xFE	; 254
 e4e:	7f 4f       	sbci	r23, 0xFF	; 255
 e50:	8f 4f       	sbci	r24, 0xFF	; 255
 e52:	9f 4f       	sbci	r25, 0xFF	; 255
 e54:	af 4f       	sbci	r26, 0xFF	; 255
 e56:	b1 e0       	ldi	r27, 0x01	; 1
 e58:	3e d0       	rcall	.+124    	; 0xed6 <__ultoa_invert+0x9c>
 e5a:	b4 e0       	ldi	r27, 0x04	; 4
 e5c:	3c d0       	rcall	.+120    	; 0xed6 <__ultoa_invert+0x9c>
 e5e:	67 0f       	add	r22, r23
 e60:	78 1f       	adc	r23, r24
 e62:	89 1f       	adc	r24, r25
 e64:	9a 1f       	adc	r25, r26
 e66:	a1 1d       	adc	r26, r1
 e68:	68 0f       	add	r22, r24
 e6a:	79 1f       	adc	r23, r25
 e6c:	8a 1f       	adc	r24, r26
 e6e:	91 1d       	adc	r25, r1
 e70:	a1 1d       	adc	r26, r1
 e72:	6a 0f       	add	r22, r26
 e74:	71 1d       	adc	r23, r1
 e76:	81 1d       	adc	r24, r1
 e78:	91 1d       	adc	r25, r1
 e7a:	a1 1d       	adc	r26, r1
 e7c:	20 d0       	rcall	.+64     	; 0xebe <__ultoa_invert+0x84>
 e7e:	09 f4       	brne	.+2      	; 0xe82 <__ultoa_invert+0x48>
 e80:	68 94       	set
 e82:	3f 91       	pop	r19
 e84:	2a e0       	ldi	r18, 0x0A	; 10
 e86:	26 9f       	mul	r18, r22
 e88:	11 24       	eor	r1, r1
 e8a:	30 19       	sub	r19, r0
 e8c:	30 5d       	subi	r19, 0xD0	; 208
 e8e:	31 93       	st	Z+, r19
 e90:	de f6       	brtc	.-74     	; 0xe48 <__ultoa_invert+0xe>
 e92:	cf 01       	movw	r24, r30
 e94:	08 95       	ret
 e96:	46 2f       	mov	r20, r22
 e98:	47 70       	andi	r20, 0x07	; 7
 e9a:	40 5d       	subi	r20, 0xD0	; 208
 e9c:	41 93       	st	Z+, r20
 e9e:	b3 e0       	ldi	r27, 0x03	; 3
 ea0:	0f d0       	rcall	.+30     	; 0xec0 <__ultoa_invert+0x86>
 ea2:	c9 f7       	brne	.-14     	; 0xe96 <__ultoa_invert+0x5c>
 ea4:	f6 cf       	rjmp	.-20     	; 0xe92 <__ultoa_invert+0x58>
 ea6:	46 2f       	mov	r20, r22
 ea8:	4f 70       	andi	r20, 0x0F	; 15
 eaa:	40 5d       	subi	r20, 0xD0	; 208
 eac:	4a 33       	cpi	r20, 0x3A	; 58
 eae:	18 f0       	brcs	.+6      	; 0xeb6 <__ultoa_invert+0x7c>
 eb0:	49 5d       	subi	r20, 0xD9	; 217
 eb2:	31 fd       	sbrc	r19, 1
 eb4:	40 52       	subi	r20, 0x20	; 32
 eb6:	41 93       	st	Z+, r20
 eb8:	02 d0       	rcall	.+4      	; 0xebe <__ultoa_invert+0x84>
 eba:	a9 f7       	brne	.-22     	; 0xea6 <__ultoa_invert+0x6c>
 ebc:	ea cf       	rjmp	.-44     	; 0xe92 <__ultoa_invert+0x58>
 ebe:	b4 e0       	ldi	r27, 0x04	; 4
 ec0:	a6 95       	lsr	r26
 ec2:	97 95       	ror	r25
 ec4:	87 95       	ror	r24
 ec6:	77 95       	ror	r23
 ec8:	67 95       	ror	r22
 eca:	ba 95       	dec	r27
 ecc:	c9 f7       	brne	.-14     	; 0xec0 <__ultoa_invert+0x86>
 ece:	00 97       	sbiw	r24, 0x00	; 0
 ed0:	61 05       	cpc	r22, r1
 ed2:	71 05       	cpc	r23, r1
 ed4:	08 95       	ret
 ed6:	9b 01       	movw	r18, r22
 ed8:	ac 01       	movw	r20, r24
 eda:	0a 2e       	mov	r0, r26
 edc:	06 94       	lsr	r0
 ede:	57 95       	ror	r21
 ee0:	47 95       	ror	r20
 ee2:	37 95       	ror	r19
 ee4:	27 95       	ror	r18
 ee6:	ba 95       	dec	r27
 ee8:	c9 f7       	brne	.-14     	; 0xedc <__ultoa_invert+0xa2>
 eea:	62 0f       	add	r22, r18
 eec:	73 1f       	adc	r23, r19
 eee:	84 1f       	adc	r24, r20
 ef0:	95 1f       	adc	r25, r21
 ef2:	a0 1d       	adc	r26, r0
 ef4:	08 95       	ret

00000ef6 <__prologue_saves__>:
 ef6:	2f 92       	push	r2
 ef8:	3f 92       	push	r3
 efa:	4f 92       	push	r4
 efc:	5f 92       	push	r5
 efe:	6f 92       	push	r6
 f00:	7f 92       	push	r7
 f02:	8f 92       	push	r8
 f04:	9f 92       	push	r9
 f06:	af 92       	push	r10
 f08:	bf 92       	push	r11
 f0a:	cf 92       	push	r12
 f0c:	df 92       	push	r13
 f0e:	ef 92       	push	r14
 f10:	ff 92       	push	r15
 f12:	0f 93       	push	r16
 f14:	1f 93       	push	r17
 f16:	cf 93       	push	r28
 f18:	df 93       	push	r29
 f1a:	cd b7       	in	r28, 0x3d	; 61
 f1c:	de b7       	in	r29, 0x3e	; 62
 f1e:	ca 1b       	sub	r28, r26
 f20:	db 0b       	sbc	r29, r27
 f22:	0f b6       	in	r0, 0x3f	; 63
 f24:	f8 94       	cli
 f26:	de bf       	out	0x3e, r29	; 62
 f28:	0f be       	out	0x3f, r0	; 63
 f2a:	cd bf       	out	0x3d, r28	; 61
 f2c:	09 94       	ijmp

00000f2e <__epilogue_restores__>:
 f2e:	2a 88       	ldd	r2, Y+18	; 0x12
 f30:	39 88       	ldd	r3, Y+17	; 0x11
 f32:	48 88       	ldd	r4, Y+16	; 0x10
 f34:	5f 84       	ldd	r5, Y+15	; 0x0f
 f36:	6e 84       	ldd	r6, Y+14	; 0x0e
 f38:	7d 84       	ldd	r7, Y+13	; 0x0d
 f3a:	8c 84       	ldd	r8, Y+12	; 0x0c
 f3c:	9b 84       	ldd	r9, Y+11	; 0x0b
 f3e:	aa 84       	ldd	r10, Y+10	; 0x0a
 f40:	b9 84       	ldd	r11, Y+9	; 0x09
 f42:	c8 84       	ldd	r12, Y+8	; 0x08
 f44:	df 80       	ldd	r13, Y+7	; 0x07
 f46:	ee 80       	ldd	r14, Y+6	; 0x06
 f48:	fd 80       	ldd	r15, Y+5	; 0x05
 f4a:	0c 81       	ldd	r16, Y+4	; 0x04
 f4c:	1b 81       	ldd	r17, Y+3	; 0x03
 f4e:	aa 81       	ldd	r26, Y+2	; 0x02
 f50:	b9 81       	ldd	r27, Y+1	; 0x01
 f52:	ce 0f       	add	r28, r30
 f54:	d1 1d       	adc	r29, r1
 f56:	0f b6       	in	r0, 0x3f	; 63
 f58:	f8 94       	cli
 f5a:	de bf       	out	0x3e, r29	; 62
 f5c:	0f be       	out	0x3f, r0	; 63
 f5e:	cd bf       	out	0x3d, r28	; 61
 f60:	ed 01       	movw	r28, r26
 f62:	08 95       	ret

00000f64 <_exit>:
 f64:	f8 94       	cli

00000f66 <__stop_program>:
 f66:	ff cf       	rjmp	.-2      	; 0xf66 <__stop_program>
