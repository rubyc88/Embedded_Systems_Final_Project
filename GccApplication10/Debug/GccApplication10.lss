
GccApplication10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004b2  00800100  0000106a  000010fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000106a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000065  008005b2  008005b2  000015b0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000015b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000160c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  0000164c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015a5  00000000  00000000  000016fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a06  00000000  00000000  00002ca1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000865  00000000  00000000  000036a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e0  00000000  00000000  00003f0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051a  00000000  00000000  000042ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001499  00000000  00000000  00004806  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00005c9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__ctors_end>
       4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
       8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
       c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      10:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      14:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      18:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      1c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      20:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      24:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      28:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      2c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      30:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      34:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      38:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      3c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      40:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      44:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      48:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      4c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      50:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      54:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      58:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      5c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      60:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      64:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      68:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      6c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      70:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      74:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      78:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
      7c:	fc 01       	movw	r30, r24
      7e:	09 04       	cpc	r0, r9
      80:	09 04       	cpc	r0, r9
      82:	09 04       	cpc	r0, r9
      84:	09 04       	cpc	r0, r9
      86:	09 04       	cpc	r0, r9
      88:	09 04       	cpc	r0, r9
      8a:	09 04       	cpc	r0, r9
      8c:	11 02       	muls	r17, r17
      8e:	09 04       	cpc	r0, r9
      90:	09 04       	cpc	r0, r9
      92:	09 04       	cpc	r0, r9
      94:	09 04       	cpc	r0, r9
      96:	09 04       	cpc	r0, r9
      98:	09 04       	cpc	r0, r9
      9a:	09 04       	cpc	r0, r9
      9c:	26 02       	muls	r18, r22
      9e:	09 04       	cpc	r0, r9
      a0:	09 04       	cpc	r0, r9
      a2:	09 04       	cpc	r0, r9
      a4:	09 04       	cpc	r0, r9
      a6:	09 04       	cpc	r0, r9
      a8:	09 04       	cpc	r0, r9
      aa:	09 04       	cpc	r0, r9
      ac:	3b 02       	muls	r19, r27
      ae:	09 04       	cpc	r0, r9
      b0:	09 04       	cpc	r0, r9
      b2:	09 04       	cpc	r0, r9
      b4:	09 04       	cpc	r0, r9
      b6:	09 04       	cpc	r0, r9
      b8:	09 04       	cpc	r0, r9
      ba:	09 04       	cpc	r0, r9
      bc:	50 02       	muls	r21, r16
      be:	09 04       	cpc	r0, r9
      c0:	09 04       	cpc	r0, r9
      c2:	09 04       	cpc	r0, r9
      c4:	09 04       	cpc	r0, r9
      c6:	09 04       	cpc	r0, r9
      c8:	09 04       	cpc	r0, r9
      ca:	09 04       	cpc	r0, r9
      cc:	65 02       	muls	r22, r21
      ce:	09 04       	cpc	r0, r9
      d0:	09 04       	cpc	r0, r9
      d2:	09 04       	cpc	r0, r9
      d4:	09 04       	cpc	r0, r9
      d6:	09 04       	cpc	r0, r9
      d8:	09 04       	cpc	r0, r9
      da:	09 04       	cpc	r0, r9
      dc:	7a 02       	muls	r23, r26
      de:	09 04       	cpc	r0, r9
      e0:	09 04       	cpc	r0, r9
      e2:	09 04       	cpc	r0, r9
      e4:	09 04       	cpc	r0, r9
      e6:	09 04       	cpc	r0, r9
      e8:	09 04       	cpc	r0, r9
      ea:	09 04       	cpc	r0, r9
      ec:	8f 02       	muls	r24, r31
      ee:	09 04       	cpc	r0, r9
      f0:	09 04       	cpc	r0, r9
      f2:	09 04       	cpc	r0, r9
      f4:	09 04       	cpc	r0, r9
      f6:	09 04       	cpc	r0, r9
      f8:	09 04       	cpc	r0, r9
      fa:	09 04       	cpc	r0, r9
      fc:	a4 02       	muls	r26, r20
      fe:	09 04       	cpc	r0, r9
     100:	09 04       	cpc	r0, r9
     102:	09 04       	cpc	r0, r9
     104:	09 04       	cpc	r0, r9
     106:	09 04       	cpc	r0, r9
     108:	09 04       	cpc	r0, r9
     10a:	09 04       	cpc	r0, r9
     10c:	b9 02       	muls	r27, r25
     10e:	09 04       	cpc	r0, r9
     110:	09 04       	cpc	r0, r9
     112:	09 04       	cpc	r0, r9
     114:	09 04       	cpc	r0, r9
     116:	09 04       	cpc	r0, r9
     118:	09 04       	cpc	r0, r9
     11a:	09 04       	cpc	r0, r9
     11c:	ce 02       	muls	r28, r30
     11e:	09 04       	cpc	r0, r9
     120:	09 04       	cpc	r0, r9
     122:	09 04       	cpc	r0, r9
     124:	09 04       	cpc	r0, r9
     126:	09 04       	cpc	r0, r9
     128:	09 04       	cpc	r0, r9
     12a:	09 04       	cpc	r0, r9
     12c:	4c 03       	fmul	r20, r20
     12e:	09 04       	cpc	r0, r9
     130:	09 04       	cpc	r0, r9
     132:	09 04       	cpc	r0, r9
     134:	09 04       	cpc	r0, r9
     136:	09 04       	cpc	r0, r9
     138:	09 04       	cpc	r0, r9
     13a:	09 04       	cpc	r0, r9
     13c:	61 03       	mulsu	r22, r17
     13e:	09 04       	cpc	r0, r9
     140:	09 04       	cpc	r0, r9
     142:	09 04       	cpc	r0, r9
     144:	09 04       	cpc	r0, r9
     146:	09 04       	cpc	r0, r9
     148:	09 04       	cpc	r0, r9
     14a:	09 04       	cpc	r0, r9
     14c:	76 03       	mulsu	r23, r22
     14e:	09 04       	cpc	r0, r9
     150:	09 04       	cpc	r0, r9
     152:	09 04       	cpc	r0, r9
     154:	09 04       	cpc	r0, r9
     156:	09 04       	cpc	r0, r9
     158:	09 04       	cpc	r0, r9
     15a:	09 04       	cpc	r0, r9
     15c:	8b 03       	fmulsu	r16, r19
     15e:	09 04       	cpc	r0, r9
     160:	09 04       	cpc	r0, r9
     162:	09 04       	cpc	r0, r9
     164:	09 04       	cpc	r0, r9
     166:	09 04       	cpc	r0, r9
     168:	09 04       	cpc	r0, r9
     16a:	09 04       	cpc	r0, r9
     16c:	a0 03       	fmuls	r18, r16
     16e:	09 04       	cpc	r0, r9
     170:	09 04       	cpc	r0, r9
     172:	09 04       	cpc	r0, r9
     174:	09 04       	cpc	r0, r9
     176:	09 04       	cpc	r0, r9
     178:	09 04       	cpc	r0, r9
     17a:	09 04       	cpc	r0, r9
     17c:	b5 03       	fmuls	r19, r21
     17e:	09 04       	cpc	r0, r9
     180:	09 04       	cpc	r0, r9
     182:	09 04       	cpc	r0, r9
     184:	09 04       	cpc	r0, r9
     186:	09 04       	cpc	r0, r9
     188:	09 04       	cpc	r0, r9
     18a:	09 04       	cpc	r0, r9
     18c:	ca 03       	fmulsu	r20, r18
     18e:	09 04       	cpc	r0, r9
     190:	09 04       	cpc	r0, r9
     192:	09 04       	cpc	r0, r9
     194:	09 04       	cpc	r0, r9
     196:	09 04       	cpc	r0, r9
     198:	09 04       	cpc	r0, r9
     19a:	09 04       	cpc	r0, r9
     19c:	df 03       	fmulsu	r21, r23
     19e:	09 04       	cpc	r0, r9
     1a0:	09 04       	cpc	r0, r9
     1a2:	09 04       	cpc	r0, r9
     1a4:	09 04       	cpc	r0, r9
     1a6:	09 04       	cpc	r0, r9
     1a8:	09 04       	cpc	r0, r9
     1aa:	09 04       	cpc	r0, r9
     1ac:	f4 03       	fmuls	r23, r20
     1ae:	09 04       	cpc	r0, r9
     1b0:	09 04       	cpc	r0, r9
     1b2:	09 04       	cpc	r0, r9
     1b4:	09 04       	cpc	r0, r9
     1b6:	09 04       	cpc	r0, r9
     1b8:	09 04       	cpc	r0, r9
     1ba:	09 04       	cpc	r0, r9
     1bc:	e3 02       	muls	r30, r19
     1be:	09 04       	cpc	r0, r9
     1c0:	09 04       	cpc	r0, r9
     1c2:	09 04       	cpc	r0, r9
     1c4:	09 04       	cpc	r0, r9
     1c6:	09 04       	cpc	r0, r9
     1c8:	09 04       	cpc	r0, r9
     1ca:	09 04       	cpc	r0, r9
     1cc:	f8 02       	muls	r31, r24
     1ce:	09 04       	cpc	r0, r9
     1d0:	09 04       	cpc	r0, r9
     1d2:	09 04       	cpc	r0, r9
     1d4:	09 04       	cpc	r0, r9
     1d6:	09 04       	cpc	r0, r9
     1d8:	09 04       	cpc	r0, r9
     1da:	09 04       	cpc	r0, r9
     1dc:	0d 03       	fmul	r16, r21
     1de:	09 04       	cpc	r0, r9
     1e0:	09 04       	cpc	r0, r9
     1e2:	09 04       	cpc	r0, r9
     1e4:	09 04       	cpc	r0, r9
     1e6:	09 04       	cpc	r0, r9
     1e8:	09 04       	cpc	r0, r9
     1ea:	09 04       	cpc	r0, r9
     1ec:	22 03       	mulsu	r18, r18
     1ee:	09 04       	cpc	r0, r9
     1f0:	09 04       	cpc	r0, r9
     1f2:	09 04       	cpc	r0, r9
     1f4:	09 04       	cpc	r0, r9
     1f6:	09 04       	cpc	r0, r9
     1f8:	09 04       	cpc	r0, r9
     1fa:	09 04       	cpc	r0, r9
     1fc:	37 03       	mulsu	r19, r23

000001fe <__ctors_end>:
     1fe:	11 24       	eor	r1, r1
     200:	1f be       	out	0x3f, r1	; 63
     202:	cf ef       	ldi	r28, 0xFF	; 255
     204:	d8 e0       	ldi	r29, 0x08	; 8
     206:	de bf       	out	0x3e, r29	; 62
     208:	cd bf       	out	0x3d, r28	; 61

0000020a <__do_copy_data>:
     20a:	15 e0       	ldi	r17, 0x05	; 5
     20c:	a0 e0       	ldi	r26, 0x00	; 0
     20e:	b1 e0       	ldi	r27, 0x01	; 1
     210:	ea e6       	ldi	r30, 0x6A	; 106
     212:	f0 e1       	ldi	r31, 0x10	; 16
     214:	02 c0       	rjmp	.+4      	; 0x21a <__do_copy_data+0x10>
     216:	05 90       	lpm	r0, Z+
     218:	0d 92       	st	X+, r0
     21a:	a2 3b       	cpi	r26, 0xB2	; 178
     21c:	b1 07       	cpc	r27, r17
     21e:	d9 f7       	brne	.-10     	; 0x216 <__do_copy_data+0xc>

00000220 <__do_clear_bss>:
     220:	26 e0       	ldi	r18, 0x06	; 6
     222:	a2 eb       	ldi	r26, 0xB2	; 178
     224:	b5 e0       	ldi	r27, 0x05	; 5
     226:	01 c0       	rjmp	.+2      	; 0x22a <.do_clear_bss_start>

00000228 <.do_clear_bss_loop>:
     228:	1d 92       	st	X+, r1

0000022a <.do_clear_bss_start>:
     22a:	a7 31       	cpi	r26, 0x17	; 23
     22c:	b2 07       	cpc	r27, r18
     22e:	e1 f7       	brne	.-8      	; 0x228 <.do_clear_bss_loop>
     230:	0e 94 bc 04 	call	0x978	; 0x978 <main>
     234:	0c 94 33 08 	jmp	0x1066	; 0x1066 <_exit>

00000238 <__bad_interrupt>:
     238:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023c <Port>:
	Cmd(0x01);
	Cmd(0x0C);
}
void Shift_Left(){
	Cmd(0x01);
	Cmd(0x08);
     23c:	80 ff       	sbrs	r24, 0
     23e:	02 c0       	rjmp	.+4      	; 0x244 <Port+0x8>
     240:	5c 9a       	sbi	0x0b, 4	; 11
     242:	01 c0       	rjmp	.+2      	; 0x246 <Port+0xa>
     244:	5c 98       	cbi	0x0b, 4	; 11
     246:	81 ff       	sbrs	r24, 1
     248:	02 c0       	rjmp	.+4      	; 0x24e <Port+0x12>
     24a:	5d 9a       	sbi	0x0b, 5	; 11
     24c:	01 c0       	rjmp	.+2      	; 0x250 <Port+0x14>
     24e:	5d 98       	cbi	0x0b, 5	; 11
     250:	82 ff       	sbrs	r24, 2
     252:	02 c0       	rjmp	.+4      	; 0x258 <Port+0x1c>
     254:	5e 9a       	sbi	0x0b, 6	; 11
     256:	01 c0       	rjmp	.+2      	; 0x25a <Port+0x1e>
     258:	5e 98       	cbi	0x0b, 6	; 11
     25a:	83 ff       	sbrs	r24, 3
     25c:	02 c0       	rjmp	.+4      	; 0x262 <Port+0x26>
     25e:	5f 9a       	sbi	0x0b, 7	; 11
     260:	08 95       	ret
     262:	5f 98       	cbi	0x0b, 7	; 11
     264:	08 95       	ret

00000266 <Cmd>:
     266:	46 98       	cbi	0x08, 6	; 8
     268:	0e 94 1e 01 	call	0x23c	; 0x23c <Port>
     26c:	47 9a       	sbi	0x08, 7	; 8
     26e:	8f e9       	ldi	r24, 0x9F	; 159
     270:	9f e0       	ldi	r25, 0x0F	; 15
     272:	01 97       	sbiw	r24, 0x01	; 1
     274:	f1 f7       	brne	.-4      	; 0x272 <Cmd+0xc>
     276:	00 c0       	rjmp	.+0      	; 0x278 <Cmd+0x12>
     278:	00 00       	nop
     27a:	47 98       	cbi	0x08, 7	; 8
     27c:	8f e9       	ldi	r24, 0x9F	; 159
     27e:	9f e0       	ldi	r25, 0x0F	; 15
     280:	01 97       	sbiw	r24, 0x01	; 1
     282:	f1 f7       	brne	.-4      	; 0x280 <Cmd+0x1a>
     284:	00 c0       	rjmp	.+0      	; 0x286 <Cmd+0x20>
     286:	00 00       	nop
     288:	08 95       	ret

0000028a <Clear>:
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	0e 94 33 01 	call	0x266	; 0x266 <Cmd>
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	0e 94 33 01 	call	0x266	; 0x266 <Cmd>
     296:	08 95       	ret

00000298 <Set_Cursor>:
     298:	cf 93       	push	r28
     29a:	c6 2f       	mov	r28, r22
     29c:	81 30       	cpi	r24, 0x01	; 1
     29e:	59 f4       	brne	.+22     	; 0x2b6 <Set_Cursor+0x1e>
     2a0:	80 e8       	ldi	r24, 0x80	; 128
     2a2:	86 0f       	add	r24, r22
     2a4:	82 95       	swap	r24
     2a6:	8f 70       	andi	r24, 0x0F	; 15
     2a8:	0e 94 33 01 	call	0x266	; 0x266 <Cmd>
     2ac:	8c 2f       	mov	r24, r28
     2ae:	8f 70       	andi	r24, 0x0F	; 15
     2b0:	0e 94 33 01 	call	0x266	; 0x266 <Cmd>
     2b4:	0c c0       	rjmp	.+24     	; 0x2ce <Set_Cursor+0x36>
     2b6:	82 30       	cpi	r24, 0x02	; 2
     2b8:	51 f4       	brne	.+20     	; 0x2ce <Set_Cursor+0x36>
     2ba:	80 ec       	ldi	r24, 0xC0	; 192
     2bc:	86 0f       	add	r24, r22
     2be:	82 95       	swap	r24
     2c0:	8f 70       	andi	r24, 0x0F	; 15
     2c2:	0e 94 33 01 	call	0x266	; 0x266 <Cmd>
     2c6:	8c 2f       	mov	r24, r28
     2c8:	8f 70       	andi	r24, 0x0F	; 15
     2ca:	0e 94 33 01 	call	0x266	; 0x266 <Cmd>
     2ce:	cf 91       	pop	r28
     2d0:	08 95       	ret

000002d2 <Init>:
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	0e 94 1e 01 	call	0x23c	; 0x23c <Port>
     2d8:	2f ef       	ldi	r18, 0xFF	; 255
     2da:	89 ef       	ldi	r24, 0xF9	; 249
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	21 50       	subi	r18, 0x01	; 1
     2e0:	80 40       	sbci	r24, 0x00	; 0
     2e2:	90 40       	sbci	r25, 0x00	; 0
     2e4:	e1 f7       	brne	.-8      	; 0x2de <Init+0xc>
     2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <Init+0x16>
     2e8:	00 00       	nop
     2ea:	83 e0       	ldi	r24, 0x03	; 3
     2ec:	0e 94 33 01 	call	0x266	; 0x266 <Cmd>
     2f0:	8f e1       	ldi	r24, 0x1F	; 31
     2f2:	9e e4       	ldi	r25, 0x4E	; 78
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	f1 f7       	brne	.-4      	; 0x2f4 <Init+0x22>
     2f8:	00 c0       	rjmp	.+0      	; 0x2fa <Init+0x28>
     2fa:	00 00       	nop
     2fc:	83 e0       	ldi	r24, 0x03	; 3
     2fe:	0e 94 33 01 	call	0x266	; 0x266 <Cmd>
     302:	8f ed       	ldi	r24, 0xDF	; 223
     304:	9b ea       	ldi	r25, 0xAB	; 171
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	f1 f7       	brne	.-4      	; 0x306 <Init+0x34>
     30a:	00 c0       	rjmp	.+0      	; 0x30c <Init+0x3a>
     30c:	00 00       	nop
     30e:	83 e0       	ldi	r24, 0x03	; 3
     310:	0e 94 33 01 	call	0x266	; 0x266 <Cmd>
     314:	82 e0       	ldi	r24, 0x02	; 2
     316:	0e 94 33 01 	call	0x266	; 0x266 <Cmd>
     31a:	82 e0       	ldi	r24, 0x02	; 2
     31c:	0e 94 33 01 	call	0x266	; 0x266 <Cmd>
     320:	88 e0       	ldi	r24, 0x08	; 8
     322:	0e 94 33 01 	call	0x266	; 0x266 <Cmd>
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	0e 94 33 01 	call	0x266	; 0x266 <Cmd>
     32c:	8c e0       	ldi	r24, 0x0C	; 12
     32e:	0e 94 33 01 	call	0x266	; 0x266 <Cmd>
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	0e 94 33 01 	call	0x266	; 0x266 <Cmd>
     338:	86 e0       	ldi	r24, 0x06	; 6
     33a:	0e 94 33 01 	call	0x266	; 0x266 <Cmd>
     33e:	08 95       	ret

00000340 <Write_Char>:
     340:	cf 93       	push	r28
     342:	c8 2f       	mov	r28, r24
     344:	46 9a       	sbi	0x08, 6	; 8
     346:	82 95       	swap	r24
     348:	8f 70       	andi	r24, 0x0F	; 15
     34a:	0e 94 1e 01 	call	0x23c	; 0x23c <Port>
     34e:	47 9a       	sbi	0x08, 7	; 8
     350:	8f e9       	ldi	r24, 0x9F	; 159
     352:	9f e0       	ldi	r25, 0x0F	; 15
     354:	01 97       	sbiw	r24, 0x01	; 1
     356:	f1 f7       	brne	.-4      	; 0x354 <Write_Char+0x14>
     358:	00 c0       	rjmp	.+0      	; 0x35a <Write_Char+0x1a>
     35a:	00 00       	nop
     35c:	47 98       	cbi	0x08, 7	; 8
     35e:	8f e9       	ldi	r24, 0x9F	; 159
     360:	9f e0       	ldi	r25, 0x0F	; 15
     362:	01 97       	sbiw	r24, 0x01	; 1
     364:	f1 f7       	brne	.-4      	; 0x362 <Write_Char+0x22>
     366:	00 c0       	rjmp	.+0      	; 0x368 <Write_Char+0x28>
     368:	00 00       	nop
     36a:	8c 2f       	mov	r24, r28
     36c:	8f 70       	andi	r24, 0x0F	; 15
     36e:	0e 94 1e 01 	call	0x23c	; 0x23c <Port>
     372:	47 9a       	sbi	0x08, 7	; 8
     374:	8f e9       	ldi	r24, 0x9F	; 159
     376:	9f e0       	ldi	r25, 0x0F	; 15
     378:	01 97       	sbiw	r24, 0x01	; 1
     37a:	f1 f7       	brne	.-4      	; 0x378 <Write_Char+0x38>
     37c:	00 c0       	rjmp	.+0      	; 0x37e <Write_Char+0x3e>
     37e:	00 00       	nop
     380:	47 98       	cbi	0x08, 7	; 8
     382:	8f e9       	ldi	r24, 0x9F	; 159
     384:	9f e0       	ldi	r25, 0x0F	; 15
     386:	01 97       	sbiw	r24, 0x01	; 1
     388:	f1 f7       	brne	.-4      	; 0x386 <Write_Char+0x46>
     38a:	00 c0       	rjmp	.+0      	; 0x38c <Write_Char+0x4c>
     38c:	00 00       	nop
     38e:	cf 91       	pop	r28
     390:	08 95       	ret

00000392 <Write_String>:
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	ec 01       	movw	r28, r24
     398:	88 81       	ld	r24, Y
     39a:	88 23       	and	r24, r24
     39c:	31 f0       	breq	.+12     	; 0x3aa <Write_String+0x18>
     39e:	21 96       	adiw	r28, 0x01	; 1
     3a0:	0e 94 a0 01 	call	0x340	; 0x340 <Write_Char>
     3a4:	89 91       	ld	r24, Y+
     3a6:	81 11       	cpse	r24, r1
     3a8:	fb cf       	rjmp	.-10     	; 0x3a0 <Write_String+0xe>
     3aa:	df 91       	pop	r29
     3ac:	cf 91       	pop	r28
     3ae:	08 95       	ret

000003b0 <TWIinit>:
	*/
	}
	
}
void TWIinit(){
	DDRC |= (1 << PORTC0) | (1 << PORTC1);    // SDA and SCL are set to be outputs	$$$$$$$$
     3b0:	87 b1       	in	r24, 0x07	; 7
     3b2:	83 60       	ori	r24, 0x03	; 3
     3b4:	87 b9       	out	0x07, r24	; 7
	TWSR = (0b00 << TWPS0);   // TWPS=00 --> prescale =0 --> div by 1				$$$$$$$$
     3b6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR = 8;   // SCLfreq = clkCPU/(16+2*(TWBR).(TWPS))							$$$$$$$$
     3ba:	88 e0       	ldi	r24, 0x08	; 8
     3bc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     3c0:	08 95       	ret

000003c2 <Wait_n_Check_Error>:
	// SCLfreq = 8000_000/(16+2*(8).(1))  = 250KHz    if use TWBR=8
	// SCLfreq = 8000_000/(16+2*(2).(1))  = 400KHz    if use TWBR=2 (fastest)
}

void Wait_n_Check_Error(uint8_t expected){
	while (!(TWCR & (1 << TWINT)));   // Wait for TWINT to set										$$$$$$$$
     3c2:	ec eb       	ldi	r30, 0xBC	; 188
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	90 81       	ld	r25, Z
     3c8:	99 23       	and	r25, r25
     3ca:	ec f7       	brge	.-6      	; 0x3c6 <Wait_n_Check_Error+0x4>
	
	if ((TWSR & 0xF8) != expected){
     3cc:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     3d0:	48 2f       	mov	r20, r24
     3d2:	50 e0       	ldi	r21, 0x00	; 0
     3d4:	28 7f       	andi	r18, 0xF8	; 248
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	24 17       	cp	r18, r20
     3da:	35 07       	cpc	r19, r21
     3dc:	09 f4       	brne	.+2      	; 0x3e0 <Wait_n_Check_Error+0x1e>
     3de:	31 c2       	rjmp	.+1122   	; 0x842 <__LOCK_REGION_LENGTH__+0x442>
		switch(expected){
     3e0:	48 2f       	mov	r20, r24
     3e2:	50 e0       	ldi	r21, 0x00	; 0
     3e4:	fa 01       	movw	r30, r20
     3e6:	38 97       	sbiw	r30, 0x08	; 8
     3e8:	e1 3c       	cpi	r30, 0xC1	; 193
     3ea:	f1 05       	cpc	r31, r1
     3ec:	08 f0       	brcs	.+2      	; 0x3f0 <Wait_n_Check_Error+0x2e>
     3ee:	11 c2       	rjmp	.+1058   	; 0x812 <__LOCK_REGION_LENGTH__+0x412>
     3f0:	e2 5c       	subi	r30, 0xC2	; 194
     3f2:	ff 4f       	sbci	r31, 0xFF	; 255
     3f4:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__tablejump2__>
			case TW_START		         : sprintf(strbuf, "Expecting TW_START		           but got 0x%x\r\n", TWSR);   break;
     3f8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     3fc:	1f 92       	push	r1
     3fe:	8f 93       	push	r24
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	91 e0       	ldi	r25, 0x01	; 1
     404:	9f 93       	push	r25
     406:	8f 93       	push	r24
     408:	83 eb       	ldi	r24, 0xB3	; 179
     40a:	95 e0       	ldi	r25, 0x05	; 5
     40c:	9f 93       	push	r25
     40e:	8f 93       	push	r24
     410:	0e 94 39 05 	call	0xa72	; 0xa72 <sprintf>
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	08 95       	ret
			case TW_REP_START		     : sprintf(strbuf, "Expecting TW_REP_START		       but got 0x%x\r\n", TWSR);   break;
     422:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     426:	1f 92       	push	r1
     428:	8f 93       	push	r24
     42a:	8e e2       	ldi	r24, 0x2E	; 46
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	9f 93       	push	r25
     430:	8f 93       	push	r24
     432:	83 eb       	ldi	r24, 0xB3	; 179
     434:	95 e0       	ldi	r25, 0x05	; 5
     436:	9f 93       	push	r25
     438:	8f 93       	push	r24
     43a:	0e 94 39 05 	call	0xa72	; 0xa72 <sprintf>
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	0f 90       	pop	r0
     444:	0f 90       	pop	r0
     446:	0f 90       	pop	r0
     448:	0f 90       	pop	r0
     44a:	08 95       	ret
			case TW_MT_SLA_ACK		     : sprintf(strbuf, "Expecting TW_MT_SLA_ACK		       but got 0x%x\r\n", TWSR);   break;
     44c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     450:	1f 92       	push	r1
     452:	8f 93       	push	r24
     454:	8c e5       	ldi	r24, 0x5C	; 92
     456:	91 e0       	ldi	r25, 0x01	; 1
     458:	9f 93       	push	r25
     45a:	8f 93       	push	r24
     45c:	83 eb       	ldi	r24, 0xB3	; 179
     45e:	95 e0       	ldi	r25, 0x05	; 5
     460:	9f 93       	push	r25
     462:	8f 93       	push	r24
     464:	0e 94 39 05 	call	0xa72	; 0xa72 <sprintf>
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
     474:	08 95       	ret
			case TW_MT_SLA_NACK		     : sprintf(strbuf, "Expecting TW_MT_SLA_NACK		   but got 0x%x\r\n", TWSR);   break;
     476:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     47a:	1f 92       	push	r1
     47c:	8f 93       	push	r24
     47e:	8b e8       	ldi	r24, 0x8B	; 139
     480:	91 e0       	ldi	r25, 0x01	; 1
     482:	9f 93       	push	r25
     484:	8f 93       	push	r24
     486:	83 eb       	ldi	r24, 0xB3	; 179
     488:	95 e0       	ldi	r25, 0x05	; 5
     48a:	9f 93       	push	r25
     48c:	8f 93       	push	r24
     48e:	0e 94 39 05 	call	0xa72	; 0xa72 <sprintf>
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	08 95       	ret
			case TW_MT_DATA_ACK		     : sprintf(strbuf, "Expecting TW_MT_DATA_ACK		   but got 0x%x\r\n", TWSR);   break;
     4a0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     4a4:	1f 92       	push	r1
     4a6:	8f 93       	push	r24
     4a8:	87 eb       	ldi	r24, 0xB7	; 183
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	9f 93       	push	r25
     4ae:	8f 93       	push	r24
     4b0:	83 eb       	ldi	r24, 0xB3	; 179
     4b2:	95 e0       	ldi	r25, 0x05	; 5
     4b4:	9f 93       	push	r25
     4b6:	8f 93       	push	r24
     4b8:	0e 94 39 05 	call	0xa72	; 0xa72 <sprintf>
     4bc:	0f 90       	pop	r0
     4be:	0f 90       	pop	r0
     4c0:	0f 90       	pop	r0
     4c2:	0f 90       	pop	r0
     4c4:	0f 90       	pop	r0
     4c6:	0f 90       	pop	r0
     4c8:	08 95       	ret
			case TW_MT_DATA_NACK		 : sprintf(strbuf, "Expecting TW_MT_DATA_NACK		   but got 0x%x\r\n", TWSR);   break;
     4ca:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     4ce:	1f 92       	push	r1
     4d0:	8f 93       	push	r24
     4d2:	83 ee       	ldi	r24, 0xE3	; 227
     4d4:	91 e0       	ldi	r25, 0x01	; 1
     4d6:	9f 93       	push	r25
     4d8:	8f 93       	push	r24
     4da:	83 eb       	ldi	r24, 0xB3	; 179
     4dc:	95 e0       	ldi	r25, 0x05	; 5
     4de:	9f 93       	push	r25
     4e0:	8f 93       	push	r24
     4e2:	0e 94 39 05 	call	0xa72	; 0xa72 <sprintf>
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	08 95       	ret
			case TW_MT_ARB_LOST		     : sprintf(strbuf, "Expecting TW_MT/R_ARB_LOST		   but got 0x%x\r\n", TWSR);   break;
     4f4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     4f8:	1f 92       	push	r1
     4fa:	8f 93       	push	r24
     4fc:	80 e1       	ldi	r24, 0x10	; 16
     4fe:	92 e0       	ldi	r25, 0x02	; 2
     500:	9f 93       	push	r25
     502:	8f 93       	push	r24
     504:	83 eb       	ldi	r24, 0xB3	; 179
     506:	95 e0       	ldi	r25, 0x05	; 5
     508:	9f 93       	push	r25
     50a:	8f 93       	push	r24
     50c:	0e 94 39 05 	call	0xa72	; 0xa72 <sprintf>
     510:	0f 90       	pop	r0
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
     516:	0f 90       	pop	r0
     518:	0f 90       	pop	r0
     51a:	0f 90       	pop	r0
     51c:	08 95       	ret
			case TW_MR_SLA_ACK		     : sprintf(strbuf, "Expecting TW_MR_SLA_ACK		       but got 0x%x\r\n", TWSR);   break;
     51e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     522:	1f 92       	push	r1
     524:	8f 93       	push	r24
     526:	8e e3       	ldi	r24, 0x3E	; 62
     528:	92 e0       	ldi	r25, 0x02	; 2
     52a:	9f 93       	push	r25
     52c:	8f 93       	push	r24
     52e:	83 eb       	ldi	r24, 0xB3	; 179
     530:	95 e0       	ldi	r25, 0x05	; 5
     532:	9f 93       	push	r25
     534:	8f 93       	push	r24
     536:	0e 94 39 05 	call	0xa72	; 0xa72 <sprintf>
     53a:	0f 90       	pop	r0
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
     542:	0f 90       	pop	r0
     544:	0f 90       	pop	r0
     546:	08 95       	ret
			case TW_MR_SLA_NACK		     : sprintf(strbuf, "Expecting TW_MR_SLA_NACK		   but got 0x%x\r\n", TWSR);   break;
     548:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     54c:	1f 92       	push	r1
     54e:	8f 93       	push	r24
     550:	8d e6       	ldi	r24, 0x6D	; 109
     552:	92 e0       	ldi	r25, 0x02	; 2
     554:	9f 93       	push	r25
     556:	8f 93       	push	r24
     558:	83 eb       	ldi	r24, 0xB3	; 179
     55a:	95 e0       	ldi	r25, 0x05	; 5
     55c:	9f 93       	push	r25
     55e:	8f 93       	push	r24
     560:	0e 94 39 05 	call	0xa72	; 0xa72 <sprintf>
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	08 95       	ret
			case TW_MR_DATA_ACK		     : sprintf(strbuf, "Expecting TW_MR_DATA_ACK		   but got 0x%x\r\n", TWSR);   break;
     572:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     576:	1f 92       	push	r1
     578:	8f 93       	push	r24
     57a:	89 e9       	ldi	r24, 0x99	; 153
     57c:	92 e0       	ldi	r25, 0x02	; 2
     57e:	9f 93       	push	r25
     580:	8f 93       	push	r24
     582:	83 eb       	ldi	r24, 0xB3	; 179
     584:	95 e0       	ldi	r25, 0x05	; 5
     586:	9f 93       	push	r25
     588:	8f 93       	push	r24
     58a:	0e 94 39 05 	call	0xa72	; 0xa72 <sprintf>
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	08 95       	ret
			case TW_MR_DATA_NACK		 : sprintf(strbuf, "Expecting TW_MR_DATA_NACK		   but got 0x%x\r\n", TWSR);   break;
     59c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5a0:	1f 92       	push	r1
     5a2:	8f 93       	push	r24
     5a4:	85 ec       	ldi	r24, 0xC5	; 197
     5a6:	92 e0       	ldi	r25, 0x02	; 2
     5a8:	9f 93       	push	r25
     5aa:	8f 93       	push	r24
     5ac:	83 eb       	ldi	r24, 0xB3	; 179
     5ae:	95 e0       	ldi	r25, 0x05	; 5
     5b0:	9f 93       	push	r25
     5b2:	8f 93       	push	r24
     5b4:	0e 94 39 05 	call	0xa72	; 0xa72 <sprintf>
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	0f 90       	pop	r0
     5be:	0f 90       	pop	r0
     5c0:	0f 90       	pop	r0
     5c2:	0f 90       	pop	r0
     5c4:	08 95       	ret
			case TW_ST_SLA_ACK		     : sprintf(strbuf, "Expecting TW_ST_SLA_ACK		       but got 0x%x\r\n", TWSR);   break;
     5c6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5ca:	1f 92       	push	r1
     5cc:	8f 93       	push	r24
     5ce:	82 ef       	ldi	r24, 0xF2	; 242
     5d0:	92 e0       	ldi	r25, 0x02	; 2
     5d2:	9f 93       	push	r25
     5d4:	8f 93       	push	r24
     5d6:	83 eb       	ldi	r24, 0xB3	; 179
     5d8:	95 e0       	ldi	r25, 0x05	; 5
     5da:	9f 93       	push	r25
     5dc:	8f 93       	push	r24
     5de:	0e 94 39 05 	call	0xa72	; 0xa72 <sprintf>
     5e2:	0f 90       	pop	r0
     5e4:	0f 90       	pop	r0
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	08 95       	ret
			case TW_ST_ARB_LOST_SLA_ACK	 : sprintf(strbuf, "Expecting TW_ST_ARB_LOST_SLA_ACK   but got 0x%x\r\n", TWSR);   break;
     5f0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5f4:	1f 92       	push	r1
     5f6:	8f 93       	push	r24
     5f8:	81 e2       	ldi	r24, 0x21	; 33
     5fa:	93 e0       	ldi	r25, 0x03	; 3
     5fc:	9f 93       	push	r25
     5fe:	8f 93       	push	r24
     600:	83 eb       	ldi	r24, 0xB3	; 179
     602:	95 e0       	ldi	r25, 0x05	; 5
     604:	9f 93       	push	r25
     606:	8f 93       	push	r24
     608:	0e 94 39 05 	call	0xa72	; 0xa72 <sprintf>
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
     612:	0f 90       	pop	r0
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	08 95       	ret
			case TW_ST_DATA_ACK		     : sprintf(strbuf, "Expecting TW_ST_DATA_ACK		   but got 0x%x\r\n", TWSR);   break;
     61a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     61e:	1f 92       	push	r1
     620:	8f 93       	push	r24
     622:	83 e5       	ldi	r24, 0x53	; 83
     624:	93 e0       	ldi	r25, 0x03	; 3
     626:	9f 93       	push	r25
     628:	8f 93       	push	r24
     62a:	83 eb       	ldi	r24, 0xB3	; 179
     62c:	95 e0       	ldi	r25, 0x05	; 5
     62e:	9f 93       	push	r25
     630:	8f 93       	push	r24
     632:	0e 94 39 05 	call	0xa72	; 0xa72 <sprintf>
     636:	0f 90       	pop	r0
     638:	0f 90       	pop	r0
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
     642:	08 95       	ret
			case TW_ST_DATA_NACK		 : sprintf(strbuf, "Expecting TW_ST_DATA_NACK		   but got 0x%x\r\n", TWSR);   break;
     644:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     648:	1f 92       	push	r1
     64a:	8f 93       	push	r24
     64c:	8f e7       	ldi	r24, 0x7F	; 127
     64e:	93 e0       	ldi	r25, 0x03	; 3
     650:	9f 93       	push	r25
     652:	8f 93       	push	r24
     654:	83 eb       	ldi	r24, 0xB3	; 179
     656:	95 e0       	ldi	r25, 0x05	; 5
     658:	9f 93       	push	r25
     65a:	8f 93       	push	r24
     65c:	0e 94 39 05 	call	0xa72	; 0xa72 <sprintf>
     660:	0f 90       	pop	r0
     662:	0f 90       	pop	r0
     664:	0f 90       	pop	r0
     666:	0f 90       	pop	r0
     668:	0f 90       	pop	r0
     66a:	0f 90       	pop	r0
     66c:	08 95       	ret
			case TW_ST_LAST_DATA		 : sprintf(strbuf, "Expecting TW_ST_LAST_DATA		   but got 0x%x\r\n", TWSR);   break;
     66e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     672:	1f 92       	push	r1
     674:	8f 93       	push	r24
     676:	8c ea       	ldi	r24, 0xAC	; 172
     678:	93 e0       	ldi	r25, 0x03	; 3
     67a:	9f 93       	push	r25
     67c:	8f 93       	push	r24
     67e:	83 eb       	ldi	r24, 0xB3	; 179
     680:	95 e0       	ldi	r25, 0x05	; 5
     682:	9f 93       	push	r25
     684:	8f 93       	push	r24
     686:	0e 94 39 05 	call	0xa72	; 0xa72 <sprintf>
     68a:	0f 90       	pop	r0
     68c:	0f 90       	pop	r0
     68e:	0f 90       	pop	r0
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	08 95       	ret
			case TW_SR_SLA_ACK		     : sprintf(strbuf, "Expecting TW_SR_SLA_ACK		       but got 0x%x\r\n", TWSR);   break;
     698:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     69c:	1f 92       	push	r1
     69e:	8f 93       	push	r24
     6a0:	89 ed       	ldi	r24, 0xD9	; 217
     6a2:	93 e0       	ldi	r25, 0x03	; 3
     6a4:	9f 93       	push	r25
     6a6:	8f 93       	push	r24
     6a8:	83 eb       	ldi	r24, 0xB3	; 179
     6aa:	95 e0       	ldi	r25, 0x05	; 5
     6ac:	9f 93       	push	r25
     6ae:	8f 93       	push	r24
     6b0:	0e 94 39 05 	call	0xa72	; 0xa72 <sprintf>
     6b4:	0f 90       	pop	r0
     6b6:	0f 90       	pop	r0
     6b8:	0f 90       	pop	r0
     6ba:	0f 90       	pop	r0
     6bc:	0f 90       	pop	r0
     6be:	0f 90       	pop	r0
     6c0:	08 95       	ret
			case TW_SR_ARB_LOST_SLA_ACK	 : sprintf(strbuf, "Expecting TW_SR_ARB_LOST_SLA_ACK   but got 0x%x\r\n", TWSR);   break;
     6c2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     6c6:	1f 92       	push	r1
     6c8:	8f 93       	push	r24
     6ca:	88 e0       	ldi	r24, 0x08	; 8
     6cc:	94 e0       	ldi	r25, 0x04	; 4
     6ce:	9f 93       	push	r25
     6d0:	8f 93       	push	r24
     6d2:	83 eb       	ldi	r24, 0xB3	; 179
     6d4:	95 e0       	ldi	r25, 0x05	; 5
     6d6:	9f 93       	push	r25
     6d8:	8f 93       	push	r24
     6da:	0e 94 39 05 	call	0xa72	; 0xa72 <sprintf>
     6de:	0f 90       	pop	r0
     6e0:	0f 90       	pop	r0
     6e2:	0f 90       	pop	r0
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
     6e8:	0f 90       	pop	r0
     6ea:	08 95       	ret
			case TW_SR_GCALL_ACK		 : sprintf(strbuf, "Expecting TW_SR_GCALL_ACK		   but got 0x%x\r\n", TWSR);   break;
     6ec:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     6f0:	1f 92       	push	r1
     6f2:	8f 93       	push	r24
     6f4:	8a e3       	ldi	r24, 0x3A	; 58
     6f6:	94 e0       	ldi	r25, 0x04	; 4
     6f8:	9f 93       	push	r25
     6fa:	8f 93       	push	r24
     6fc:	83 eb       	ldi	r24, 0xB3	; 179
     6fe:	95 e0       	ldi	r25, 0x05	; 5
     700:	9f 93       	push	r25
     702:	8f 93       	push	r24
     704:	0e 94 39 05 	call	0xa72	; 0xa72 <sprintf>
     708:	0f 90       	pop	r0
     70a:	0f 90       	pop	r0
     70c:	0f 90       	pop	r0
     70e:	0f 90       	pop	r0
     710:	0f 90       	pop	r0
     712:	0f 90       	pop	r0
     714:	08 95       	ret
			case TW_SR_ARB_LOST_GCALL_ACK: sprintf(strbuf, "Expecting TW_SR_ARB_LOST_GCALL_ACK but got 0x%x\r\n", TWSR);   break;
     716:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     71a:	1f 92       	push	r1
     71c:	8f 93       	push	r24
     71e:	87 e6       	ldi	r24, 0x67	; 103
     720:	94 e0       	ldi	r25, 0x04	; 4
     722:	9f 93       	push	r25
     724:	8f 93       	push	r24
     726:	83 eb       	ldi	r24, 0xB3	; 179
     728:	95 e0       	ldi	r25, 0x05	; 5
     72a:	9f 93       	push	r25
     72c:	8f 93       	push	r24
     72e:	0e 94 39 05 	call	0xa72	; 0xa72 <sprintf>
     732:	0f 90       	pop	r0
     734:	0f 90       	pop	r0
     736:	0f 90       	pop	r0
     738:	0f 90       	pop	r0
     73a:	0f 90       	pop	r0
     73c:	0f 90       	pop	r0
     73e:	08 95       	ret
			case TW_SR_DATA_ACK		     : sprintf(strbuf, "Expecting TW_SR_DATA_ACK		   but got 0x%x\r\n", TWSR);   break;
     740:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     744:	1f 92       	push	r1
     746:	8f 93       	push	r24
     748:	89 e9       	ldi	r24, 0x99	; 153
     74a:	94 e0       	ldi	r25, 0x04	; 4
     74c:	9f 93       	push	r25
     74e:	8f 93       	push	r24
     750:	83 eb       	ldi	r24, 0xB3	; 179
     752:	95 e0       	ldi	r25, 0x05	; 5
     754:	9f 93       	push	r25
     756:	8f 93       	push	r24
     758:	0e 94 39 05 	call	0xa72	; 0xa72 <sprintf>
     75c:	0f 90       	pop	r0
     75e:	0f 90       	pop	r0
     760:	0f 90       	pop	r0
     762:	0f 90       	pop	r0
     764:	0f 90       	pop	r0
     766:	0f 90       	pop	r0
     768:	08 95       	ret
			case TW_SR_DATA_NACK		 : sprintf(strbuf, "Expecting TW_SR_DATA_NACK		   but got 0x%x\r\n", TWSR);   break;
     76a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     76e:	1f 92       	push	r1
     770:	8f 93       	push	r24
     772:	85 ec       	ldi	r24, 0xC5	; 197
     774:	94 e0       	ldi	r25, 0x04	; 4
     776:	9f 93       	push	r25
     778:	8f 93       	push	r24
     77a:	83 eb       	ldi	r24, 0xB3	; 179
     77c:	95 e0       	ldi	r25, 0x05	; 5
     77e:	9f 93       	push	r25
     780:	8f 93       	push	r24
     782:	0e 94 39 05 	call	0xa72	; 0xa72 <sprintf>
     786:	0f 90       	pop	r0
     788:	0f 90       	pop	r0
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	0f 90       	pop	r0
     790:	0f 90       	pop	r0
     792:	08 95       	ret
			case TW_SR_GCALL_DATA_ACK	 : sprintf(strbuf, "Expecting TW_SR_GCALL_DATA_ACK	   but got 0x%x\r\n", TWSR);   break;
     794:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     798:	1f 92       	push	r1
     79a:	8f 93       	push	r24
     79c:	82 ef       	ldi	r24, 0xF2	; 242
     79e:	94 e0       	ldi	r25, 0x04	; 4
     7a0:	9f 93       	push	r25
     7a2:	8f 93       	push	r24
     7a4:	83 eb       	ldi	r24, 0xB3	; 179
     7a6:	95 e0       	ldi	r25, 0x05	; 5
     7a8:	9f 93       	push	r25
     7aa:	8f 93       	push	r24
     7ac:	0e 94 39 05 	call	0xa72	; 0xa72 <sprintf>
     7b0:	0f 90       	pop	r0
     7b2:	0f 90       	pop	r0
     7b4:	0f 90       	pop	r0
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	0f 90       	pop	r0
     7bc:	08 95       	ret
			case TW_SR_GCALL_DATA_NACK	 : sprintf(strbuf, "Expecting TW_SR_GCALL_DATA_NACK	   but got 0x%x\r\n", TWSR);   break;
     7be:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     7c2:	1f 92       	push	r1
     7c4:	8f 93       	push	r24
     7c6:	83 e2       	ldi	r24, 0x23	; 35
     7c8:	95 e0       	ldi	r25, 0x05	; 5
     7ca:	9f 93       	push	r25
     7cc:	8f 93       	push	r24
     7ce:	83 eb       	ldi	r24, 0xB3	; 179
     7d0:	95 e0       	ldi	r25, 0x05	; 5
     7d2:	9f 93       	push	r25
     7d4:	8f 93       	push	r24
     7d6:	0e 94 39 05 	call	0xa72	; 0xa72 <sprintf>
     7da:	0f 90       	pop	r0
     7dc:	0f 90       	pop	r0
     7de:	0f 90       	pop	r0
     7e0:	0f 90       	pop	r0
     7e2:	0f 90       	pop	r0
     7e4:	0f 90       	pop	r0
     7e6:	08 95       	ret
			case TW_SR_STOP		         : sprintf(strbuf, "Expecting TW_SR_STOP		       but got 0x%x\r\n", TWSR);   break;
     7e8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     7ec:	1f 92       	push	r1
     7ee:	8f 93       	push	r24
     7f0:	85 e5       	ldi	r24, 0x55	; 85
     7f2:	95 e0       	ldi	r25, 0x05	; 5
     7f4:	9f 93       	push	r25
     7f6:	8f 93       	push	r24
     7f8:	83 eb       	ldi	r24, 0xB3	; 179
     7fa:	95 e0       	ldi	r25, 0x05	; 5
     7fc:	9f 93       	push	r25
     7fe:	8f 93       	push	r24
     800:	0e 94 39 05 	call	0xa72	; 0xa72 <sprintf>
     804:	0f 90       	pop	r0
     806:	0f 90       	pop	r0
     808:	0f 90       	pop	r0
     80a:	0f 90       	pop	r0
     80c:	0f 90       	pop	r0
     80e:	0f 90       	pop	r0
     810:	08 95       	ret
			default                      : sprintf(strbuf, "Expecting 0x%x but got 0x%x\r\n", expected,           TWSR);   break;
     812:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     816:	1f 92       	push	r1
     818:	9f 93       	push	r25
     81a:	1f 92       	push	r1
     81c:	8f 93       	push	r24
     81e:	81 e8       	ldi	r24, 0x81	; 129
     820:	95 e0       	ldi	r25, 0x05	; 5
     822:	9f 93       	push	r25
     824:	8f 93       	push	r24
     826:	83 eb       	ldi	r24, 0xB3	; 179
     828:	95 e0       	ldi	r25, 0x05	; 5
     82a:	9f 93       	push	r25
     82c:	8f 93       	push	r24
     82e:	0e 94 39 05 	call	0xa72	; 0xa72 <sprintf>
     832:	8d b7       	in	r24, 0x3d	; 61
     834:	9e b7       	in	r25, 0x3e	; 62
     836:	08 96       	adiw	r24, 0x08	; 8
     838:	0f b6       	in	r0, 0x3f	; 63
     83a:	f8 94       	cli
     83c:	9e bf       	out	0x3e, r25	; 62
     83e:	0f be       	out	0x3f, r0	; 63
     840:	8d bf       	out	0x3d, r24	; 61
     842:	08 95       	ret

00000844 <TWIwrite>:
		}
	}
}

void TWIwrite(uint8_t slaveid, uint8_t addr, uint8_t data){
     844:	df 92       	push	r13
     846:	ef 92       	push	r14
     848:	ff 92       	push	r15
     84a:	0f 93       	push	r16
     84c:	1f 93       	push	r17
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	18 2f       	mov	r17, r24
     854:	d6 2e       	mov	r13, r22
     856:	04 2f       	mov	r16, r20
	
	// Send START condition, ACK is not expected
	TWCR = _BV(TWINT)|_BV(TWEN)|_BV(TWSTA);							// $$$$$$$$
     858:	cc eb       	ldi	r28, 0xBC	; 188
     85a:	d0 e0       	ldi	r29, 0x00	; 0
     85c:	84 ea       	ldi	r24, 0xA4	; 164
     85e:	88 83       	st	Y, r24
	Wait_n_Check_Error(TW_START);
     860:	88 e0       	ldi	r24, 0x08	; 8
     862:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <Wait_n_Check_Error>

	// Setup the slave ID (7bits) along with the intended operation (1bit)
	TWDR = slaveid|TW_WRITE;										// $$$$$$$$
     866:	0f 2e       	mov	r0, r31
     868:	fb eb       	ldi	r31, 0xBB	; 187
     86a:	ef 2e       	mov	r14, r31
     86c:	f1 2c       	mov	r15, r1
     86e:	f0 2d       	mov	r31, r0
     870:	f7 01       	movw	r30, r14
     872:	10 83       	st	Z, r17
	TWCR = _BV(TWINT)|_BV(TWEN)|_BV(TWEA);  // TWINT bit in TWCR to start transmission of address,
     874:	14 ec       	ldi	r17, 0xC4	; 196
     876:	18 83       	st	Y, r17
	Wait_n_Check_Error(TW_MT_SLA_ACK); // expecting ACK				// $$$$$$$$
     878:	88 e1       	ldi	r24, 0x18	; 24
     87a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <Wait_n_Check_Error>

	// Send the 1st byte which will be interpreted by the device as the register address,
	TWDR = addr;
     87e:	f7 01       	movw	r30, r14
     880:	d0 82       	st	Z, r13
	TWCR = _BV(TWINT)|_BV(TWEN)|_BV(TWEA);  // expecting ACK		// $$$$$$$$
     882:	18 83       	st	Y, r17
	Wait_n_Check_Error(TW_MT_DATA_ACK);								// $$$$$$$$
     884:	88 e2       	ldi	r24, 0x28	; 40
     886:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <Wait_n_Check_Error>
	
	// Send the 2nd byte which will be interpreted by the device as the register data,
	TWDR = data;
     88a:	f7 01       	movw	r30, r14
     88c:	00 83       	st	Z, r16
	TWCR = _BV(TWINT)|_BV(TWEN)|_BV(TWEA);  // expecting ACK		// $$$$$$$$
     88e:	18 83       	st	Y, r17
	Wait_n_Check_Error(TW_MT_DATA_ACK);								// $$$$$$$$
     890:	88 e2       	ldi	r24, 0x28	; 40
     892:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <Wait_n_Check_Error>

	// Send STOP condition, Nothing expected. Note that TWINT isn't set after STOP
	TWCR = _BV(TWINT)|_BV(TWEN)|_BV(TWSTO);							// $$$$$$$$
     896:	84 e9       	ldi	r24, 0x94	; 148
     898:	88 83       	st	Y, r24
	
	// Wait for STOP to be executed. TWINT is not set after a stop condition!
	while(TWCR & _BV(TWSTO));
     89a:	ec eb       	ldi	r30, 0xBC	; 188
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	80 81       	ld	r24, Z
     8a0:	84 fd       	sbrc	r24, 4
     8a2:	fd cf       	rjmp	.-6      	; 0x89e <TWIwrite+0x5a>
}
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	1f 91       	pop	r17
     8aa:	0f 91       	pop	r16
     8ac:	ff 90       	pop	r15
     8ae:	ef 90       	pop	r14
     8b0:	df 90       	pop	r13
     8b2:	08 95       	ret

000008b4 <TWIread>:
uint8_t TWIread(uint8_t slaveid, uint8_t addr){
	// Send START condition, ACK is not expected
	TWCR = _BV(TWINT)|_BV(TWEN)|_BV(TWSTA);		
     8b4:	ec eb       	ldi	r30, 0xBC	; 188
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	24 ea       	ldi	r18, 0xA4	; 164
     8ba:	20 83       	st	Z, r18
	// Setup the slave ID (7bits) along with the intended operation (1bit)
	TWDR = slaveid|TW_WRITE;
     8bc:	ab eb       	ldi	r26, 0xBB	; 187
     8be:	b0 e0       	ldi	r27, 0x00	; 0
     8c0:	8c 93       	st	X, r24
	TWCR = _BV(TWINT)|_BV(TWEN)|_BV(TWEA);  // TWINT bit in TWCR to start transmission of address,
     8c2:	94 ec       	ldi	r25, 0xC4	; 196
     8c4:	90 83       	st	Z, r25
	// Send the 1st byte which will be interpreted by the device as the register address,
	TWDR = addr;
     8c6:	6c 93       	st	X, r22
	TWCR = _BV(TWINT)|_BV(TWEN)|_BV(TWEA);// expecting ACK
     8c8:	90 83       	st	Z, r25
	// Send Repeat START
	TWCR = _BV(TWINT)|_BV(TWSTA)|_BV(TWEN);
     8ca:	20 83       	st	Z, r18
	// Tell the device that you need to read the data for the address sent before
	TWDR = slaveid|TW_READ;                  // Setup the slave ID + READ						// $$$$$$$$
     8cc:	81 60       	ori	r24, 0x01	; 1
     8ce:	8c 93       	st	X, r24
	TWCR = _BV(TWINT)|_BV(TWEN)|_BV(TWEA);    // TWINT bit in TWCR to start transmission of address.
     8d0:	90 83       	st	Z, r25
	// Asking the slave to send the data byte,
	TWCR = _BV(TWINT)|_BV(TWEN);            // TWINT bit in TWCR to start transmission of data. // $$$$$$$$
     8d2:	84 e8       	ldi	r24, 0x84	; 132
     8d4:	80 83       	st	Z, r24
	uint8_t data = TWDR;	                       // Read the received data
     8d6:	8c 91       	ld	r24, X
	// Send STOP condition, Nothing expected. Note that TWINT isn't set after STOP
	TWCR = _BV(TWINT)|_BV(TWEN)|_BV(TWSTO);
     8d8:	94 e9       	ldi	r25, 0x94	; 148
     8da:	90 83       	st	Z, r25
	// Wait for STOP to be executed. TWINT is not set after a stop condition!
	while(TWCR & _BV(TWSTO));
     8dc:	90 81       	ld	r25, Z
     8de:	94 fd       	sbrc	r25, 4
     8e0:	fd cf       	rjmp	.-6      	; 0x8dc <TWIread+0x28>
	return data;
	}
     8e2:	08 95       	ret

000008e4 <light_sensor_init>:

void light_sensor_init(){
	TWIwrite(ID , ENABLE, 0b11);
     8e4:	43 e0       	ldi	r20, 0x03	; 3
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	82 e1       	ldi	r24, 0x12	; 18
     8ea:	0e 94 22 04 	call	0x844	; 0x844 <TWIwrite>
	Set_Cursor(1,2);
     8ee:	62 e0       	ldi	r22, 0x02	; 2
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	0e 94 4c 01 	call	0x298	; 0x298 <Set_Cursor>
	Write_String("I Enabled");
     8f6:	8f e9       	ldi	r24, 0x9F	; 159
     8f8:	95 e0       	ldi	r25, 0x05	; 5
     8fa:	0e 94 c9 01 	call	0x392	; 0x392 <Write_String>
     8fe:	08 95       	ret

00000900 <red_sensor_read>:
	
}

int16_t red_sensor_read(){
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
	int16_t res;
	res  = TWIread(ID, RDATAH)<<8;		// $$$$$$$$
     904:	67 e1       	ldi	r22, 0x17	; 23
     906:	82 e1       	ldi	r24, 0x12	; 18
     908:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <TWIread>
     90c:	c8 2f       	mov	r28, r24
     90e:	d0 e0       	ldi	r29, 0x00	; 0
     910:	dc 2f       	mov	r29, r28
     912:	cc 27       	eor	r28, r28
	res |= TWIread(ID, RDATAL);		// $$$$$$$$
     914:	66 e1       	ldi	r22, 0x16	; 22
     916:	82 e1       	ldi	r24, 0x12	; 18
     918:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <TWIread>
	return res;
	
}
     91c:	9e 01       	movw	r18, r28
     91e:	28 2b       	or	r18, r24
     920:	c9 01       	movw	r24, r18
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	08 95       	ret

00000928 <green_sensor_read>:

int16_t green_sensor_read(){
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
	int16_t res;
	res  = TWIread(ID, GDATAH)<<8;		// $$$$$$$$
     92c:	69 e1       	ldi	r22, 0x19	; 25
     92e:	82 e1       	ldi	r24, 0x12	; 18
     930:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <TWIread>
     934:	c8 2f       	mov	r28, r24
     936:	d0 e0       	ldi	r29, 0x00	; 0
     938:	dc 2f       	mov	r29, r28
     93a:	cc 27       	eor	r28, r28
	res |= TWIread(ID, GDATAL);		// $$$$$$$$
     93c:	68 e1       	ldi	r22, 0x18	; 24
     93e:	82 e1       	ldi	r24, 0x12	; 18
     940:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <TWIread>
	return res;
	
}
     944:	9e 01       	movw	r18, r28
     946:	28 2b       	or	r18, r24
     948:	c9 01       	movw	r24, r18
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	08 95       	ret

00000950 <blue_sensor_read>:

int16_t blue_sensor_read(){
     950:	cf 93       	push	r28
     952:	df 93       	push	r29
	int16_t res;
	res  = TWIread(ID, BDATAH)<<8;		// $$$$$$$$
     954:	6b e1       	ldi	r22, 0x1B	; 27
     956:	82 e1       	ldi	r24, 0x12	; 18
     958:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <TWIread>
     95c:	c8 2f       	mov	r28, r24
     95e:	d0 e0       	ldi	r29, 0x00	; 0
     960:	dc 2f       	mov	r29, r28
     962:	cc 27       	eor	r28, r28
	res |= TWIread(ID, BDATAL);		// $$$$$$$$
     964:	6a e1       	ldi	r22, 0x1A	; 26
     966:	82 e1       	ldi	r24, 0x12	; 18
     968:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <TWIread>
	return res;
	
}
     96c:	9e 01       	movw	r18, r28
     96e:	28 2b       	or	r18, r24
     970:	c9 01       	movw	r24, r18
     972:	df 91       	pop	r29
     974:	cf 91       	pop	r28
     976:	08 95       	ret

00000978 <main>:
char strbuf[100];
uint8_t err;
uint8_t TRACE=0;

int main(void)
{
     978:	cf 93       	push	r28
     97a:	df 93       	push	r29
     97c:	cd b7       	in	r28, 0x3d	; 61
     97e:	de b7       	in	r29, 0x3e	; 62
     980:	60 97       	sbiw	r28, 0x10	; 16
     982:	0f b6       	in	r0, 0x3f	; 63
     984:	f8 94       	cli
     986:	de bf       	out	0x3e, r29	; 62
     988:	0f be       	out	0x3f, r0	; 63
     98a:	cd bf       	out	0x3d, r28	; 61
	DDRD = 0xFF;
     98c:	8f ef       	ldi	r24, 0xFF	; 255
     98e:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0xFF;
     990:	87 b9       	out	0x07, r24	; 7
	int16_t  red;
	int16_t green;
	int16_t blue;
	char snum[16];

	Init();
     992:	0e 94 69 01 	call	0x2d2	; 0x2d2 <Init>
	Clear();
     996:	0e 94 45 01 	call	0x28a	; 0x28a <Clear>
	//Set_Cursor(1,2);
	//Write_String("COLOR SENSOR");	
	
	TWIinit();
     99a:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <TWIinit>
	light_sensor_init();
     99e:	0e 94 72 04 	call	0x8e4	; 0x8e4 <light_sensor_init>
	
	Set_Cursor(2,0);
     9a2:	60 e0       	ldi	r22, 0x00	; 0
     9a4:	82 e0       	ldi	r24, 0x02	; 2
     9a6:	0e 94 4c 01 	call	0x298	; 0x298 <Set_Cursor>
	Write_String("R:");
     9aa:	89 ea       	ldi	r24, 0xA9	; 169
     9ac:	95 e0       	ldi	r25, 0x05	; 5
     9ae:	0e 94 c9 01 	call	0x392	; 0x392 <Write_String>

	
	Set_Cursor(2,6);
     9b2:	66 e0       	ldi	r22, 0x06	; 6
     9b4:	82 e0       	ldi	r24, 0x02	; 2
     9b6:	0e 94 4c 01 	call	0x298	; 0x298 <Set_Cursor>
	Write_String("G:");
     9ba:	8c ea       	ldi	r24, 0xAC	; 172
     9bc:	95 e0       	ldi	r25, 0x05	; 5
     9be:	0e 94 c9 01 	call	0x392	; 0x392 <Write_String>

	
	Set_Cursor(2,12);
     9c2:	6c e0       	ldi	r22, 0x0C	; 12
     9c4:	82 e0       	ldi	r24, 0x02	; 2
     9c6:	0e 94 4c 01 	call	0x298	; 0x298 <Set_Cursor>
	Write_String("B:");
     9ca:	8f ea       	ldi	r24, 0xAF	; 175
     9cc:	95 e0       	ldi	r25, 0x05	; 5
     9ce:	0e 94 c9 01 	call	0x392	; 0x392 <Write_String>
	
	
	

	while(1){
		red= red_sensor_read();
     9d2:	0e 94 80 04 	call	0x900	; 0x900 <red_sensor_read>
     9d6:	6c 01       	movw	r12, r24
		green = green_sensor_read();
     9d8:	0e 94 94 04 	call	0x928	; 0x928 <green_sensor_read>
     9dc:	7c 01       	movw	r14, r24
		blue = blue_sensor_read();
     9de:	0e 94 a8 04 	call	0x950	; 0x950 <blue_sensor_read>
     9e2:	8c 01       	movw	r16, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     9e4:	4a e0       	ldi	r20, 0x0A	; 10
     9e6:	be 01       	movw	r22, r28
     9e8:	6f 5f       	subi	r22, 0xFF	; 255
     9ea:	7f 4f       	sbci	r23, 0xFF	; 255
     9ec:	c6 01       	movw	r24, r12
     9ee:	0e 94 14 05 	call	0xa28	; 0xa28 <__itoa_ncheck>
		Write_String(itoa(red,snum,10));
     9f2:	0e 94 c9 01 	call	0x392	; 0x392 <Write_String>
     9f6:	4a e0       	ldi	r20, 0x0A	; 10
     9f8:	be 01       	movw	r22, r28
     9fa:	6f 5f       	subi	r22, 0xFF	; 255
     9fc:	7f 4f       	sbci	r23, 0xFF	; 255
     9fe:	c7 01       	movw	r24, r14
     a00:	0e 94 14 05 	call	0xa28	; 0xa28 <__itoa_ncheck>
		Write_String(itoa(green,snum,10));
     a04:	0e 94 c9 01 	call	0x392	; 0x392 <Write_String>
     a08:	4a e0       	ldi	r20, 0x0A	; 10
     a0a:	be 01       	movw	r22, r28
     a0c:	6f 5f       	subi	r22, 0xFF	; 255
     a0e:	7f 4f       	sbci	r23, 0xFF	; 255
     a10:	c8 01       	movw	r24, r16
     a12:	0e 94 14 05 	call	0xa28	; 0xa28 <__itoa_ncheck>
		Write_String(itoa(blue,snum,10));
     a16:	0e 94 c9 01 	call	0x392	; 0x392 <Write_String>
     a1a:	db cf       	rjmp	.-74     	; 0x9d2 <main+0x5a>

00000a1c <__tablejump2__>:
     a1c:	ee 0f       	add	r30, r30
     a1e:	ff 1f       	adc	r31, r31
     a20:	05 90       	lpm	r0, Z+
     a22:	f4 91       	lpm	r31, Z
     a24:	e0 2d       	mov	r30, r0
     a26:	09 94       	ijmp

00000a28 <__itoa_ncheck>:
     a28:	bb 27       	eor	r27, r27
     a2a:	4a 30       	cpi	r20, 0x0A	; 10
     a2c:	31 f4       	brne	.+12     	; 0xa3a <__itoa_ncheck+0x12>
     a2e:	99 23       	and	r25, r25
     a30:	22 f4       	brpl	.+8      	; 0xa3a <__itoa_ncheck+0x12>
     a32:	bd e2       	ldi	r27, 0x2D	; 45
     a34:	90 95       	com	r25
     a36:	81 95       	neg	r24
     a38:	9f 4f       	sbci	r25, 0xFF	; 255
     a3a:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__utoa_common>

00000a3e <__utoa_ncheck>:
     a3e:	bb 27       	eor	r27, r27

00000a40 <__utoa_common>:
     a40:	fb 01       	movw	r30, r22
     a42:	55 27       	eor	r21, r21
     a44:	aa 27       	eor	r26, r26
     a46:	88 0f       	add	r24, r24
     a48:	99 1f       	adc	r25, r25
     a4a:	aa 1f       	adc	r26, r26
     a4c:	a4 17       	cp	r26, r20
     a4e:	10 f0       	brcs	.+4      	; 0xa54 <__utoa_common+0x14>
     a50:	a4 1b       	sub	r26, r20
     a52:	83 95       	inc	r24
     a54:	50 51       	subi	r21, 0x10	; 16
     a56:	b9 f7       	brne	.-18     	; 0xa46 <__utoa_common+0x6>
     a58:	a0 5d       	subi	r26, 0xD0	; 208
     a5a:	aa 33       	cpi	r26, 0x3A	; 58
     a5c:	08 f0       	brcs	.+2      	; 0xa60 <__utoa_common+0x20>
     a5e:	a9 5d       	subi	r26, 0xD9	; 217
     a60:	a1 93       	st	Z+, r26
     a62:	00 97       	sbiw	r24, 0x00	; 0
     a64:	79 f7       	brne	.-34     	; 0xa44 <__utoa_common+0x4>
     a66:	b1 11       	cpse	r27, r1
     a68:	b1 93       	st	Z+, r27
     a6a:	11 92       	st	Z+, r1
     a6c:	cb 01       	movw	r24, r22
     a6e:	0c 94 52 07 	jmp	0xea4	; 0xea4 <strrev>

00000a72 <sprintf>:
     a72:	ae e0       	ldi	r26, 0x0E	; 14
     a74:	b0 e0       	ldi	r27, 0x00	; 0
     a76:	ef e3       	ldi	r30, 0x3F	; 63
     a78:	f5 e0       	ldi	r31, 0x05	; 5
     a7a:	0c 94 0a 08 	jmp	0x1014	; 0x1014 <__prologue_saves__+0x1c>
     a7e:	0d 89       	ldd	r16, Y+21	; 0x15
     a80:	1e 89       	ldd	r17, Y+22	; 0x16
     a82:	86 e0       	ldi	r24, 0x06	; 6
     a84:	8c 83       	std	Y+4, r24	; 0x04
     a86:	1a 83       	std	Y+2, r17	; 0x02
     a88:	09 83       	std	Y+1, r16	; 0x01
     a8a:	8f ef       	ldi	r24, 0xFF	; 255
     a8c:	9f e7       	ldi	r25, 0x7F	; 127
     a8e:	9e 83       	std	Y+6, r25	; 0x06
     a90:	8d 83       	std	Y+5, r24	; 0x05
     a92:	ae 01       	movw	r20, r28
     a94:	47 5e       	subi	r20, 0xE7	; 231
     a96:	5f 4f       	sbci	r21, 0xFF	; 255
     a98:	6f 89       	ldd	r22, Y+23	; 0x17
     a9a:	78 8d       	ldd	r23, Y+24	; 0x18
     a9c:	ce 01       	movw	r24, r28
     a9e:	01 96       	adiw	r24, 0x01	; 1
     aa0:	0e 94 5b 05 	call	0xab6	; 0xab6 <vfprintf>
     aa4:	ef 81       	ldd	r30, Y+7	; 0x07
     aa6:	f8 85       	ldd	r31, Y+8	; 0x08
     aa8:	e0 0f       	add	r30, r16
     aaa:	f1 1f       	adc	r31, r17
     aac:	10 82       	st	Z, r1
     aae:	2e 96       	adiw	r28, 0x0e	; 14
     ab0:	e4 e0       	ldi	r30, 0x04	; 4
     ab2:	0c 94 26 08 	jmp	0x104c	; 0x104c <__epilogue_restores__+0x1c>

00000ab6 <vfprintf>:
     ab6:	ab e0       	ldi	r26, 0x0B	; 11
     ab8:	b0 e0       	ldi	r27, 0x00	; 0
     aba:	e1 e6       	ldi	r30, 0x61	; 97
     abc:	f5 e0       	ldi	r31, 0x05	; 5
     abe:	0c 94 fc 07 	jmp	0xff8	; 0xff8 <__prologue_saves__>
     ac2:	6c 01       	movw	r12, r24
     ac4:	7b 01       	movw	r14, r22
     ac6:	8a 01       	movw	r16, r20
     ac8:	fc 01       	movw	r30, r24
     aca:	17 82       	std	Z+7, r1	; 0x07
     acc:	16 82       	std	Z+6, r1	; 0x06
     ace:	83 81       	ldd	r24, Z+3	; 0x03
     ad0:	81 ff       	sbrs	r24, 1
     ad2:	cc c1       	rjmp	.+920    	; 0xe6c <vfprintf+0x3b6>
     ad4:	ce 01       	movw	r24, r28
     ad6:	01 96       	adiw	r24, 0x01	; 1
     ad8:	3c 01       	movw	r6, r24
     ada:	f6 01       	movw	r30, r12
     adc:	93 81       	ldd	r25, Z+3	; 0x03
     ade:	f7 01       	movw	r30, r14
     ae0:	93 fd       	sbrc	r25, 3
     ae2:	85 91       	lpm	r24, Z+
     ae4:	93 ff       	sbrs	r25, 3
     ae6:	81 91       	ld	r24, Z+
     ae8:	7f 01       	movw	r14, r30
     aea:	88 23       	and	r24, r24
     aec:	09 f4       	brne	.+2      	; 0xaf0 <vfprintf+0x3a>
     aee:	ba c1       	rjmp	.+884    	; 0xe64 <vfprintf+0x3ae>
     af0:	85 32       	cpi	r24, 0x25	; 37
     af2:	39 f4       	brne	.+14     	; 0xb02 <vfprintf+0x4c>
     af4:	93 fd       	sbrc	r25, 3
     af6:	85 91       	lpm	r24, Z+
     af8:	93 ff       	sbrs	r25, 3
     afa:	81 91       	ld	r24, Z+
     afc:	7f 01       	movw	r14, r30
     afe:	85 32       	cpi	r24, 0x25	; 37
     b00:	29 f4       	brne	.+10     	; 0xb0c <vfprintf+0x56>
     b02:	b6 01       	movw	r22, r12
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	0e 94 62 07 	call	0xec4	; 0xec4 <fputc>
     b0a:	e7 cf       	rjmp	.-50     	; 0xada <vfprintf+0x24>
     b0c:	91 2c       	mov	r9, r1
     b0e:	21 2c       	mov	r2, r1
     b10:	31 2c       	mov	r3, r1
     b12:	ff e1       	ldi	r31, 0x1F	; 31
     b14:	f3 15       	cp	r31, r3
     b16:	d8 f0       	brcs	.+54     	; 0xb4e <vfprintf+0x98>
     b18:	8b 32       	cpi	r24, 0x2B	; 43
     b1a:	79 f0       	breq	.+30     	; 0xb3a <vfprintf+0x84>
     b1c:	38 f4       	brcc	.+14     	; 0xb2c <vfprintf+0x76>
     b1e:	80 32       	cpi	r24, 0x20	; 32
     b20:	79 f0       	breq	.+30     	; 0xb40 <vfprintf+0x8a>
     b22:	83 32       	cpi	r24, 0x23	; 35
     b24:	a1 f4       	brne	.+40     	; 0xb4e <vfprintf+0x98>
     b26:	23 2d       	mov	r18, r3
     b28:	20 61       	ori	r18, 0x10	; 16
     b2a:	1d c0       	rjmp	.+58     	; 0xb66 <vfprintf+0xb0>
     b2c:	8d 32       	cpi	r24, 0x2D	; 45
     b2e:	61 f0       	breq	.+24     	; 0xb48 <vfprintf+0x92>
     b30:	80 33       	cpi	r24, 0x30	; 48
     b32:	69 f4       	brne	.+26     	; 0xb4e <vfprintf+0x98>
     b34:	23 2d       	mov	r18, r3
     b36:	21 60       	ori	r18, 0x01	; 1
     b38:	16 c0       	rjmp	.+44     	; 0xb66 <vfprintf+0xb0>
     b3a:	83 2d       	mov	r24, r3
     b3c:	82 60       	ori	r24, 0x02	; 2
     b3e:	38 2e       	mov	r3, r24
     b40:	e3 2d       	mov	r30, r3
     b42:	e4 60       	ori	r30, 0x04	; 4
     b44:	3e 2e       	mov	r3, r30
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <vfprintf+0xe6>
     b48:	f3 2d       	mov	r31, r3
     b4a:	f8 60       	ori	r31, 0x08	; 8
     b4c:	1d c0       	rjmp	.+58     	; 0xb88 <vfprintf+0xd2>
     b4e:	37 fc       	sbrc	r3, 7
     b50:	2d c0       	rjmp	.+90     	; 0xbac <vfprintf+0xf6>
     b52:	20 ed       	ldi	r18, 0xD0	; 208
     b54:	28 0f       	add	r18, r24
     b56:	2a 30       	cpi	r18, 0x0A	; 10
     b58:	40 f0       	brcs	.+16     	; 0xb6a <vfprintf+0xb4>
     b5a:	8e 32       	cpi	r24, 0x2E	; 46
     b5c:	b9 f4       	brne	.+46     	; 0xb8c <vfprintf+0xd6>
     b5e:	36 fc       	sbrc	r3, 6
     b60:	81 c1       	rjmp	.+770    	; 0xe64 <vfprintf+0x3ae>
     b62:	23 2d       	mov	r18, r3
     b64:	20 64       	ori	r18, 0x40	; 64
     b66:	32 2e       	mov	r3, r18
     b68:	19 c0       	rjmp	.+50     	; 0xb9c <vfprintf+0xe6>
     b6a:	36 fe       	sbrs	r3, 6
     b6c:	06 c0       	rjmp	.+12     	; 0xb7a <vfprintf+0xc4>
     b6e:	8a e0       	ldi	r24, 0x0A	; 10
     b70:	98 9e       	mul	r9, r24
     b72:	20 0d       	add	r18, r0
     b74:	11 24       	eor	r1, r1
     b76:	92 2e       	mov	r9, r18
     b78:	11 c0       	rjmp	.+34     	; 0xb9c <vfprintf+0xe6>
     b7a:	ea e0       	ldi	r30, 0x0A	; 10
     b7c:	2e 9e       	mul	r2, r30
     b7e:	20 0d       	add	r18, r0
     b80:	11 24       	eor	r1, r1
     b82:	22 2e       	mov	r2, r18
     b84:	f3 2d       	mov	r31, r3
     b86:	f0 62       	ori	r31, 0x20	; 32
     b88:	3f 2e       	mov	r3, r31
     b8a:	08 c0       	rjmp	.+16     	; 0xb9c <vfprintf+0xe6>
     b8c:	8c 36       	cpi	r24, 0x6C	; 108
     b8e:	21 f4       	brne	.+8      	; 0xb98 <vfprintf+0xe2>
     b90:	83 2d       	mov	r24, r3
     b92:	80 68       	ori	r24, 0x80	; 128
     b94:	38 2e       	mov	r3, r24
     b96:	02 c0       	rjmp	.+4      	; 0xb9c <vfprintf+0xe6>
     b98:	88 36       	cpi	r24, 0x68	; 104
     b9a:	41 f4       	brne	.+16     	; 0xbac <vfprintf+0xf6>
     b9c:	f7 01       	movw	r30, r14
     b9e:	93 fd       	sbrc	r25, 3
     ba0:	85 91       	lpm	r24, Z+
     ba2:	93 ff       	sbrs	r25, 3
     ba4:	81 91       	ld	r24, Z+
     ba6:	7f 01       	movw	r14, r30
     ba8:	81 11       	cpse	r24, r1
     baa:	b3 cf       	rjmp	.-154    	; 0xb12 <vfprintf+0x5c>
     bac:	98 2f       	mov	r25, r24
     bae:	9f 7d       	andi	r25, 0xDF	; 223
     bb0:	95 54       	subi	r25, 0x45	; 69
     bb2:	93 30       	cpi	r25, 0x03	; 3
     bb4:	28 f4       	brcc	.+10     	; 0xbc0 <vfprintf+0x10a>
     bb6:	0c 5f       	subi	r16, 0xFC	; 252
     bb8:	1f 4f       	sbci	r17, 0xFF	; 255
     bba:	9f e3       	ldi	r25, 0x3F	; 63
     bbc:	99 83       	std	Y+1, r25	; 0x01
     bbe:	0d c0       	rjmp	.+26     	; 0xbda <vfprintf+0x124>
     bc0:	83 36       	cpi	r24, 0x63	; 99
     bc2:	31 f0       	breq	.+12     	; 0xbd0 <vfprintf+0x11a>
     bc4:	83 37       	cpi	r24, 0x73	; 115
     bc6:	71 f0       	breq	.+28     	; 0xbe4 <vfprintf+0x12e>
     bc8:	83 35       	cpi	r24, 0x53	; 83
     bca:	09 f0       	breq	.+2      	; 0xbce <vfprintf+0x118>
     bcc:	59 c0       	rjmp	.+178    	; 0xc80 <vfprintf+0x1ca>
     bce:	21 c0       	rjmp	.+66     	; 0xc12 <vfprintf+0x15c>
     bd0:	f8 01       	movw	r30, r16
     bd2:	80 81       	ld	r24, Z
     bd4:	89 83       	std	Y+1, r24	; 0x01
     bd6:	0e 5f       	subi	r16, 0xFE	; 254
     bd8:	1f 4f       	sbci	r17, 0xFF	; 255
     bda:	88 24       	eor	r8, r8
     bdc:	83 94       	inc	r8
     bde:	91 2c       	mov	r9, r1
     be0:	53 01       	movw	r10, r6
     be2:	13 c0       	rjmp	.+38     	; 0xc0a <vfprintf+0x154>
     be4:	28 01       	movw	r4, r16
     be6:	f2 e0       	ldi	r31, 0x02	; 2
     be8:	4f 0e       	add	r4, r31
     bea:	51 1c       	adc	r5, r1
     bec:	f8 01       	movw	r30, r16
     bee:	a0 80       	ld	r10, Z
     bf0:	b1 80       	ldd	r11, Z+1	; 0x01
     bf2:	36 fe       	sbrs	r3, 6
     bf4:	03 c0       	rjmp	.+6      	; 0xbfc <vfprintf+0x146>
     bf6:	69 2d       	mov	r22, r9
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <vfprintf+0x14a>
     bfc:	6f ef       	ldi	r22, 0xFF	; 255
     bfe:	7f ef       	ldi	r23, 0xFF	; 255
     c00:	c5 01       	movw	r24, r10
     c02:	0e 94 47 07 	call	0xe8e	; 0xe8e <strnlen>
     c06:	4c 01       	movw	r8, r24
     c08:	82 01       	movw	r16, r4
     c0a:	f3 2d       	mov	r31, r3
     c0c:	ff 77       	andi	r31, 0x7F	; 127
     c0e:	3f 2e       	mov	r3, r31
     c10:	16 c0       	rjmp	.+44     	; 0xc3e <vfprintf+0x188>
     c12:	28 01       	movw	r4, r16
     c14:	22 e0       	ldi	r18, 0x02	; 2
     c16:	42 0e       	add	r4, r18
     c18:	51 1c       	adc	r5, r1
     c1a:	f8 01       	movw	r30, r16
     c1c:	a0 80       	ld	r10, Z
     c1e:	b1 80       	ldd	r11, Z+1	; 0x01
     c20:	36 fe       	sbrs	r3, 6
     c22:	03 c0       	rjmp	.+6      	; 0xc2a <vfprintf+0x174>
     c24:	69 2d       	mov	r22, r9
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	02 c0       	rjmp	.+4      	; 0xc2e <vfprintf+0x178>
     c2a:	6f ef       	ldi	r22, 0xFF	; 255
     c2c:	7f ef       	ldi	r23, 0xFF	; 255
     c2e:	c5 01       	movw	r24, r10
     c30:	0e 94 3c 07 	call	0xe78	; 0xe78 <strnlen_P>
     c34:	4c 01       	movw	r8, r24
     c36:	f3 2d       	mov	r31, r3
     c38:	f0 68       	ori	r31, 0x80	; 128
     c3a:	3f 2e       	mov	r3, r31
     c3c:	82 01       	movw	r16, r4
     c3e:	33 fc       	sbrc	r3, 3
     c40:	1b c0       	rjmp	.+54     	; 0xc78 <vfprintf+0x1c2>
     c42:	82 2d       	mov	r24, r2
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	88 16       	cp	r8, r24
     c48:	99 06       	cpc	r9, r25
     c4a:	b0 f4       	brcc	.+44     	; 0xc78 <vfprintf+0x1c2>
     c4c:	b6 01       	movw	r22, r12
     c4e:	80 e2       	ldi	r24, 0x20	; 32
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	0e 94 62 07 	call	0xec4	; 0xec4 <fputc>
     c56:	2a 94       	dec	r2
     c58:	f4 cf       	rjmp	.-24     	; 0xc42 <vfprintf+0x18c>
     c5a:	f5 01       	movw	r30, r10
     c5c:	37 fc       	sbrc	r3, 7
     c5e:	85 91       	lpm	r24, Z+
     c60:	37 fe       	sbrs	r3, 7
     c62:	81 91       	ld	r24, Z+
     c64:	5f 01       	movw	r10, r30
     c66:	b6 01       	movw	r22, r12
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	0e 94 62 07 	call	0xec4	; 0xec4 <fputc>
     c6e:	21 10       	cpse	r2, r1
     c70:	2a 94       	dec	r2
     c72:	21 e0       	ldi	r18, 0x01	; 1
     c74:	82 1a       	sub	r8, r18
     c76:	91 08       	sbc	r9, r1
     c78:	81 14       	cp	r8, r1
     c7a:	91 04       	cpc	r9, r1
     c7c:	71 f7       	brne	.-36     	; 0xc5a <vfprintf+0x1a4>
     c7e:	e8 c0       	rjmp	.+464    	; 0xe50 <vfprintf+0x39a>
     c80:	84 36       	cpi	r24, 0x64	; 100
     c82:	11 f0       	breq	.+4      	; 0xc88 <vfprintf+0x1d2>
     c84:	89 36       	cpi	r24, 0x69	; 105
     c86:	41 f5       	brne	.+80     	; 0xcd8 <vfprintf+0x222>
     c88:	f8 01       	movw	r30, r16
     c8a:	37 fe       	sbrs	r3, 7
     c8c:	07 c0       	rjmp	.+14     	; 0xc9c <vfprintf+0x1e6>
     c8e:	60 81       	ld	r22, Z
     c90:	71 81       	ldd	r23, Z+1	; 0x01
     c92:	82 81       	ldd	r24, Z+2	; 0x02
     c94:	93 81       	ldd	r25, Z+3	; 0x03
     c96:	0c 5f       	subi	r16, 0xFC	; 252
     c98:	1f 4f       	sbci	r17, 0xFF	; 255
     c9a:	08 c0       	rjmp	.+16     	; 0xcac <vfprintf+0x1f6>
     c9c:	60 81       	ld	r22, Z
     c9e:	71 81       	ldd	r23, Z+1	; 0x01
     ca0:	07 2e       	mov	r0, r23
     ca2:	00 0c       	add	r0, r0
     ca4:	88 0b       	sbc	r24, r24
     ca6:	99 0b       	sbc	r25, r25
     ca8:	0e 5f       	subi	r16, 0xFE	; 254
     caa:	1f 4f       	sbci	r17, 0xFF	; 255
     cac:	f3 2d       	mov	r31, r3
     cae:	ff 76       	andi	r31, 0x6F	; 111
     cb0:	3f 2e       	mov	r3, r31
     cb2:	97 ff       	sbrs	r25, 7
     cb4:	09 c0       	rjmp	.+18     	; 0xcc8 <vfprintf+0x212>
     cb6:	90 95       	com	r25
     cb8:	80 95       	com	r24
     cba:	70 95       	com	r23
     cbc:	61 95       	neg	r22
     cbe:	7f 4f       	sbci	r23, 0xFF	; 255
     cc0:	8f 4f       	sbci	r24, 0xFF	; 255
     cc2:	9f 4f       	sbci	r25, 0xFF	; 255
     cc4:	f0 68       	ori	r31, 0x80	; 128
     cc6:	3f 2e       	mov	r3, r31
     cc8:	2a e0       	ldi	r18, 0x0A	; 10
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	a3 01       	movw	r20, r6
     cce:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__ultoa_invert>
     cd2:	88 2e       	mov	r8, r24
     cd4:	86 18       	sub	r8, r6
     cd6:	45 c0       	rjmp	.+138    	; 0xd62 <vfprintf+0x2ac>
     cd8:	85 37       	cpi	r24, 0x75	; 117
     cda:	31 f4       	brne	.+12     	; 0xce8 <vfprintf+0x232>
     cdc:	23 2d       	mov	r18, r3
     cde:	2f 7e       	andi	r18, 0xEF	; 239
     ce0:	b2 2e       	mov	r11, r18
     ce2:	2a e0       	ldi	r18, 0x0A	; 10
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	25 c0       	rjmp	.+74     	; 0xd32 <vfprintf+0x27c>
     ce8:	93 2d       	mov	r25, r3
     cea:	99 7f       	andi	r25, 0xF9	; 249
     cec:	b9 2e       	mov	r11, r25
     cee:	8f 36       	cpi	r24, 0x6F	; 111
     cf0:	c1 f0       	breq	.+48     	; 0xd22 <vfprintf+0x26c>
     cf2:	18 f4       	brcc	.+6      	; 0xcfa <vfprintf+0x244>
     cf4:	88 35       	cpi	r24, 0x58	; 88
     cf6:	79 f0       	breq	.+30     	; 0xd16 <vfprintf+0x260>
     cf8:	b5 c0       	rjmp	.+362    	; 0xe64 <vfprintf+0x3ae>
     cfa:	80 37       	cpi	r24, 0x70	; 112
     cfc:	19 f0       	breq	.+6      	; 0xd04 <vfprintf+0x24e>
     cfe:	88 37       	cpi	r24, 0x78	; 120
     d00:	21 f0       	breq	.+8      	; 0xd0a <vfprintf+0x254>
     d02:	b0 c0       	rjmp	.+352    	; 0xe64 <vfprintf+0x3ae>
     d04:	e9 2f       	mov	r30, r25
     d06:	e0 61       	ori	r30, 0x10	; 16
     d08:	be 2e       	mov	r11, r30
     d0a:	b4 fe       	sbrs	r11, 4
     d0c:	0d c0       	rjmp	.+26     	; 0xd28 <vfprintf+0x272>
     d0e:	fb 2d       	mov	r31, r11
     d10:	f4 60       	ori	r31, 0x04	; 4
     d12:	bf 2e       	mov	r11, r31
     d14:	09 c0       	rjmp	.+18     	; 0xd28 <vfprintf+0x272>
     d16:	34 fe       	sbrs	r3, 4
     d18:	0a c0       	rjmp	.+20     	; 0xd2e <vfprintf+0x278>
     d1a:	29 2f       	mov	r18, r25
     d1c:	26 60       	ori	r18, 0x06	; 6
     d1e:	b2 2e       	mov	r11, r18
     d20:	06 c0       	rjmp	.+12     	; 0xd2e <vfprintf+0x278>
     d22:	28 e0       	ldi	r18, 0x08	; 8
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	05 c0       	rjmp	.+10     	; 0xd32 <vfprintf+0x27c>
     d28:	20 e1       	ldi	r18, 0x10	; 16
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <vfprintf+0x27c>
     d2e:	20 e1       	ldi	r18, 0x10	; 16
     d30:	32 e0       	ldi	r19, 0x02	; 2
     d32:	f8 01       	movw	r30, r16
     d34:	b7 fe       	sbrs	r11, 7
     d36:	07 c0       	rjmp	.+14     	; 0xd46 <vfprintf+0x290>
     d38:	60 81       	ld	r22, Z
     d3a:	71 81       	ldd	r23, Z+1	; 0x01
     d3c:	82 81       	ldd	r24, Z+2	; 0x02
     d3e:	93 81       	ldd	r25, Z+3	; 0x03
     d40:	0c 5f       	subi	r16, 0xFC	; 252
     d42:	1f 4f       	sbci	r17, 0xFF	; 255
     d44:	06 c0       	rjmp	.+12     	; 0xd52 <vfprintf+0x29c>
     d46:	60 81       	ld	r22, Z
     d48:	71 81       	ldd	r23, Z+1	; 0x01
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	0e 5f       	subi	r16, 0xFE	; 254
     d50:	1f 4f       	sbci	r17, 0xFF	; 255
     d52:	a3 01       	movw	r20, r6
     d54:	0e 94 9e 07 	call	0xf3c	; 0xf3c <__ultoa_invert>
     d58:	88 2e       	mov	r8, r24
     d5a:	86 18       	sub	r8, r6
     d5c:	fb 2d       	mov	r31, r11
     d5e:	ff 77       	andi	r31, 0x7F	; 127
     d60:	3f 2e       	mov	r3, r31
     d62:	36 fe       	sbrs	r3, 6
     d64:	0d c0       	rjmp	.+26     	; 0xd80 <vfprintf+0x2ca>
     d66:	23 2d       	mov	r18, r3
     d68:	2e 7f       	andi	r18, 0xFE	; 254
     d6a:	a2 2e       	mov	r10, r18
     d6c:	89 14       	cp	r8, r9
     d6e:	58 f4       	brcc	.+22     	; 0xd86 <vfprintf+0x2d0>
     d70:	34 fe       	sbrs	r3, 4
     d72:	0b c0       	rjmp	.+22     	; 0xd8a <vfprintf+0x2d4>
     d74:	32 fc       	sbrc	r3, 2
     d76:	09 c0       	rjmp	.+18     	; 0xd8a <vfprintf+0x2d4>
     d78:	83 2d       	mov	r24, r3
     d7a:	8e 7e       	andi	r24, 0xEE	; 238
     d7c:	a8 2e       	mov	r10, r24
     d7e:	05 c0       	rjmp	.+10     	; 0xd8a <vfprintf+0x2d4>
     d80:	b8 2c       	mov	r11, r8
     d82:	a3 2c       	mov	r10, r3
     d84:	03 c0       	rjmp	.+6      	; 0xd8c <vfprintf+0x2d6>
     d86:	b8 2c       	mov	r11, r8
     d88:	01 c0       	rjmp	.+2      	; 0xd8c <vfprintf+0x2d6>
     d8a:	b9 2c       	mov	r11, r9
     d8c:	a4 fe       	sbrs	r10, 4
     d8e:	0f c0       	rjmp	.+30     	; 0xdae <vfprintf+0x2f8>
     d90:	fe 01       	movw	r30, r28
     d92:	e8 0d       	add	r30, r8
     d94:	f1 1d       	adc	r31, r1
     d96:	80 81       	ld	r24, Z
     d98:	80 33       	cpi	r24, 0x30	; 48
     d9a:	21 f4       	brne	.+8      	; 0xda4 <vfprintf+0x2ee>
     d9c:	9a 2d       	mov	r25, r10
     d9e:	99 7e       	andi	r25, 0xE9	; 233
     da0:	a9 2e       	mov	r10, r25
     da2:	09 c0       	rjmp	.+18     	; 0xdb6 <vfprintf+0x300>
     da4:	a2 fe       	sbrs	r10, 2
     da6:	06 c0       	rjmp	.+12     	; 0xdb4 <vfprintf+0x2fe>
     da8:	b3 94       	inc	r11
     daa:	b3 94       	inc	r11
     dac:	04 c0       	rjmp	.+8      	; 0xdb6 <vfprintf+0x300>
     dae:	8a 2d       	mov	r24, r10
     db0:	86 78       	andi	r24, 0x86	; 134
     db2:	09 f0       	breq	.+2      	; 0xdb6 <vfprintf+0x300>
     db4:	b3 94       	inc	r11
     db6:	a3 fc       	sbrc	r10, 3
     db8:	11 c0       	rjmp	.+34     	; 0xddc <vfprintf+0x326>
     dba:	a0 fe       	sbrs	r10, 0
     dbc:	06 c0       	rjmp	.+12     	; 0xdca <vfprintf+0x314>
     dbe:	b2 14       	cp	r11, r2
     dc0:	88 f4       	brcc	.+34     	; 0xde4 <vfprintf+0x32e>
     dc2:	28 0c       	add	r2, r8
     dc4:	92 2c       	mov	r9, r2
     dc6:	9b 18       	sub	r9, r11
     dc8:	0e c0       	rjmp	.+28     	; 0xde6 <vfprintf+0x330>
     dca:	b2 14       	cp	r11, r2
     dcc:	60 f4       	brcc	.+24     	; 0xde6 <vfprintf+0x330>
     dce:	b6 01       	movw	r22, r12
     dd0:	80 e2       	ldi	r24, 0x20	; 32
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	0e 94 62 07 	call	0xec4	; 0xec4 <fputc>
     dd8:	b3 94       	inc	r11
     dda:	f7 cf       	rjmp	.-18     	; 0xdca <vfprintf+0x314>
     ddc:	b2 14       	cp	r11, r2
     dde:	18 f4       	brcc	.+6      	; 0xde6 <vfprintf+0x330>
     de0:	2b 18       	sub	r2, r11
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <vfprintf+0x332>
     de4:	98 2c       	mov	r9, r8
     de6:	21 2c       	mov	r2, r1
     de8:	a4 fe       	sbrs	r10, 4
     dea:	10 c0       	rjmp	.+32     	; 0xe0c <vfprintf+0x356>
     dec:	b6 01       	movw	r22, r12
     dee:	80 e3       	ldi	r24, 0x30	; 48
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	0e 94 62 07 	call	0xec4	; 0xec4 <fputc>
     df6:	a2 fe       	sbrs	r10, 2
     df8:	17 c0       	rjmp	.+46     	; 0xe28 <vfprintf+0x372>
     dfa:	a1 fc       	sbrc	r10, 1
     dfc:	03 c0       	rjmp	.+6      	; 0xe04 <vfprintf+0x34e>
     dfe:	88 e7       	ldi	r24, 0x78	; 120
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <vfprintf+0x352>
     e04:	88 e5       	ldi	r24, 0x58	; 88
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	b6 01       	movw	r22, r12
     e0a:	0c c0       	rjmp	.+24     	; 0xe24 <vfprintf+0x36e>
     e0c:	8a 2d       	mov	r24, r10
     e0e:	86 78       	andi	r24, 0x86	; 134
     e10:	59 f0       	breq	.+22     	; 0xe28 <vfprintf+0x372>
     e12:	a1 fe       	sbrs	r10, 1
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <vfprintf+0x364>
     e16:	8b e2       	ldi	r24, 0x2B	; 43
     e18:	01 c0       	rjmp	.+2      	; 0xe1c <vfprintf+0x366>
     e1a:	80 e2       	ldi	r24, 0x20	; 32
     e1c:	a7 fc       	sbrc	r10, 7
     e1e:	8d e2       	ldi	r24, 0x2D	; 45
     e20:	b6 01       	movw	r22, r12
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	0e 94 62 07 	call	0xec4	; 0xec4 <fputc>
     e28:	89 14       	cp	r8, r9
     e2a:	38 f4       	brcc	.+14     	; 0xe3a <vfprintf+0x384>
     e2c:	b6 01       	movw	r22, r12
     e2e:	80 e3       	ldi	r24, 0x30	; 48
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	0e 94 62 07 	call	0xec4	; 0xec4 <fputc>
     e36:	9a 94       	dec	r9
     e38:	f7 cf       	rjmp	.-18     	; 0xe28 <vfprintf+0x372>
     e3a:	8a 94       	dec	r8
     e3c:	f3 01       	movw	r30, r6
     e3e:	e8 0d       	add	r30, r8
     e40:	f1 1d       	adc	r31, r1
     e42:	80 81       	ld	r24, Z
     e44:	b6 01       	movw	r22, r12
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0e 94 62 07 	call	0xec4	; 0xec4 <fputc>
     e4c:	81 10       	cpse	r8, r1
     e4e:	f5 cf       	rjmp	.-22     	; 0xe3a <vfprintf+0x384>
     e50:	22 20       	and	r2, r2
     e52:	09 f4       	brne	.+2      	; 0xe56 <vfprintf+0x3a0>
     e54:	42 ce       	rjmp	.-892    	; 0xada <vfprintf+0x24>
     e56:	b6 01       	movw	r22, r12
     e58:	80 e2       	ldi	r24, 0x20	; 32
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	0e 94 62 07 	call	0xec4	; 0xec4 <fputc>
     e60:	2a 94       	dec	r2
     e62:	f6 cf       	rjmp	.-20     	; 0xe50 <vfprintf+0x39a>
     e64:	f6 01       	movw	r30, r12
     e66:	86 81       	ldd	r24, Z+6	; 0x06
     e68:	97 81       	ldd	r25, Z+7	; 0x07
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <vfprintf+0x3ba>
     e6c:	8f ef       	ldi	r24, 0xFF	; 255
     e6e:	9f ef       	ldi	r25, 0xFF	; 255
     e70:	2b 96       	adiw	r28, 0x0b	; 11
     e72:	e2 e1       	ldi	r30, 0x12	; 18
     e74:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__epilogue_restores__>

00000e78 <strnlen_P>:
     e78:	fc 01       	movw	r30, r24
     e7a:	05 90       	lpm	r0, Z+
     e7c:	61 50       	subi	r22, 0x01	; 1
     e7e:	70 40       	sbci	r23, 0x00	; 0
     e80:	01 10       	cpse	r0, r1
     e82:	d8 f7       	brcc	.-10     	; 0xe7a <strnlen_P+0x2>
     e84:	80 95       	com	r24
     e86:	90 95       	com	r25
     e88:	8e 0f       	add	r24, r30
     e8a:	9f 1f       	adc	r25, r31
     e8c:	08 95       	ret

00000e8e <strnlen>:
     e8e:	fc 01       	movw	r30, r24
     e90:	61 50       	subi	r22, 0x01	; 1
     e92:	70 40       	sbci	r23, 0x00	; 0
     e94:	01 90       	ld	r0, Z+
     e96:	01 10       	cpse	r0, r1
     e98:	d8 f7       	brcc	.-10     	; 0xe90 <strnlen+0x2>
     e9a:	80 95       	com	r24
     e9c:	90 95       	com	r25
     e9e:	8e 0f       	add	r24, r30
     ea0:	9f 1f       	adc	r25, r31
     ea2:	08 95       	ret

00000ea4 <strrev>:
     ea4:	dc 01       	movw	r26, r24
     ea6:	fc 01       	movw	r30, r24
     ea8:	67 2f       	mov	r22, r23
     eaa:	71 91       	ld	r23, Z+
     eac:	77 23       	and	r23, r23
     eae:	e1 f7       	brne	.-8      	; 0xea8 <strrev+0x4>
     eb0:	32 97       	sbiw	r30, 0x02	; 2
     eb2:	04 c0       	rjmp	.+8      	; 0xebc <strrev+0x18>
     eb4:	7c 91       	ld	r23, X
     eb6:	6d 93       	st	X+, r22
     eb8:	70 83       	st	Z, r23
     eba:	62 91       	ld	r22, -Z
     ebc:	ae 17       	cp	r26, r30
     ebe:	bf 07       	cpc	r27, r31
     ec0:	c8 f3       	brcs	.-14     	; 0xeb4 <strrev+0x10>
     ec2:	08 95       	ret

00000ec4 <fputc>:
     ec4:	0f 93       	push	r16
     ec6:	1f 93       	push	r17
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	fb 01       	movw	r30, r22
     ece:	23 81       	ldd	r18, Z+3	; 0x03
     ed0:	21 fd       	sbrc	r18, 1
     ed2:	03 c0       	rjmp	.+6      	; 0xeda <fputc+0x16>
     ed4:	8f ef       	ldi	r24, 0xFF	; 255
     ed6:	9f ef       	ldi	r25, 0xFF	; 255
     ed8:	2c c0       	rjmp	.+88     	; 0xf32 <fputc+0x6e>
     eda:	22 ff       	sbrs	r18, 2
     edc:	16 c0       	rjmp	.+44     	; 0xf0a <fputc+0x46>
     ede:	46 81       	ldd	r20, Z+6	; 0x06
     ee0:	57 81       	ldd	r21, Z+7	; 0x07
     ee2:	24 81       	ldd	r18, Z+4	; 0x04
     ee4:	35 81       	ldd	r19, Z+5	; 0x05
     ee6:	42 17       	cp	r20, r18
     ee8:	53 07       	cpc	r21, r19
     eea:	44 f4       	brge	.+16     	; 0xefc <fputc+0x38>
     eec:	a0 81       	ld	r26, Z
     eee:	b1 81       	ldd	r27, Z+1	; 0x01
     ef0:	9d 01       	movw	r18, r26
     ef2:	2f 5f       	subi	r18, 0xFF	; 255
     ef4:	3f 4f       	sbci	r19, 0xFF	; 255
     ef6:	31 83       	std	Z+1, r19	; 0x01
     ef8:	20 83       	st	Z, r18
     efa:	8c 93       	st	X, r24
     efc:	26 81       	ldd	r18, Z+6	; 0x06
     efe:	37 81       	ldd	r19, Z+7	; 0x07
     f00:	2f 5f       	subi	r18, 0xFF	; 255
     f02:	3f 4f       	sbci	r19, 0xFF	; 255
     f04:	37 83       	std	Z+7, r19	; 0x07
     f06:	26 83       	std	Z+6, r18	; 0x06
     f08:	14 c0       	rjmp	.+40     	; 0xf32 <fputc+0x6e>
     f0a:	8b 01       	movw	r16, r22
     f0c:	ec 01       	movw	r28, r24
     f0e:	fb 01       	movw	r30, r22
     f10:	00 84       	ldd	r0, Z+8	; 0x08
     f12:	f1 85       	ldd	r31, Z+9	; 0x09
     f14:	e0 2d       	mov	r30, r0
     f16:	09 95       	icall
     f18:	89 2b       	or	r24, r25
     f1a:	e1 f6       	brne	.-72     	; 0xed4 <fputc+0x10>
     f1c:	d8 01       	movw	r26, r16
     f1e:	16 96       	adiw	r26, 0x06	; 6
     f20:	8d 91       	ld	r24, X+
     f22:	9c 91       	ld	r25, X
     f24:	17 97       	sbiw	r26, 0x07	; 7
     f26:	01 96       	adiw	r24, 0x01	; 1
     f28:	17 96       	adiw	r26, 0x07	; 7
     f2a:	9c 93       	st	X, r25
     f2c:	8e 93       	st	-X, r24
     f2e:	16 97       	sbiw	r26, 0x06	; 6
     f30:	ce 01       	movw	r24, r28
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	1f 91       	pop	r17
     f38:	0f 91       	pop	r16
     f3a:	08 95       	ret

00000f3c <__ultoa_invert>:
     f3c:	fa 01       	movw	r30, r20
     f3e:	aa 27       	eor	r26, r26
     f40:	28 30       	cpi	r18, 0x08	; 8
     f42:	51 f1       	breq	.+84     	; 0xf98 <__ultoa_invert+0x5c>
     f44:	20 31       	cpi	r18, 0x10	; 16
     f46:	81 f1       	breq	.+96     	; 0xfa8 <__ultoa_invert+0x6c>
     f48:	e8 94       	clt
     f4a:	6f 93       	push	r22
     f4c:	6e 7f       	andi	r22, 0xFE	; 254
     f4e:	6e 5f       	subi	r22, 0xFE	; 254
     f50:	7f 4f       	sbci	r23, 0xFF	; 255
     f52:	8f 4f       	sbci	r24, 0xFF	; 255
     f54:	9f 4f       	sbci	r25, 0xFF	; 255
     f56:	af 4f       	sbci	r26, 0xFF	; 255
     f58:	b1 e0       	ldi	r27, 0x01	; 1
     f5a:	3e d0       	rcall	.+124    	; 0xfd8 <__ultoa_invert+0x9c>
     f5c:	b4 e0       	ldi	r27, 0x04	; 4
     f5e:	3c d0       	rcall	.+120    	; 0xfd8 <__ultoa_invert+0x9c>
     f60:	67 0f       	add	r22, r23
     f62:	78 1f       	adc	r23, r24
     f64:	89 1f       	adc	r24, r25
     f66:	9a 1f       	adc	r25, r26
     f68:	a1 1d       	adc	r26, r1
     f6a:	68 0f       	add	r22, r24
     f6c:	79 1f       	adc	r23, r25
     f6e:	8a 1f       	adc	r24, r26
     f70:	91 1d       	adc	r25, r1
     f72:	a1 1d       	adc	r26, r1
     f74:	6a 0f       	add	r22, r26
     f76:	71 1d       	adc	r23, r1
     f78:	81 1d       	adc	r24, r1
     f7a:	91 1d       	adc	r25, r1
     f7c:	a1 1d       	adc	r26, r1
     f7e:	20 d0       	rcall	.+64     	; 0xfc0 <__ultoa_invert+0x84>
     f80:	09 f4       	brne	.+2      	; 0xf84 <__ultoa_invert+0x48>
     f82:	68 94       	set
     f84:	3f 91       	pop	r19
     f86:	2a e0       	ldi	r18, 0x0A	; 10
     f88:	26 9f       	mul	r18, r22
     f8a:	11 24       	eor	r1, r1
     f8c:	30 19       	sub	r19, r0
     f8e:	30 5d       	subi	r19, 0xD0	; 208
     f90:	31 93       	st	Z+, r19
     f92:	de f6       	brtc	.-74     	; 0xf4a <__ultoa_invert+0xe>
     f94:	cf 01       	movw	r24, r30
     f96:	08 95       	ret
     f98:	46 2f       	mov	r20, r22
     f9a:	47 70       	andi	r20, 0x07	; 7
     f9c:	40 5d       	subi	r20, 0xD0	; 208
     f9e:	41 93       	st	Z+, r20
     fa0:	b3 e0       	ldi	r27, 0x03	; 3
     fa2:	0f d0       	rcall	.+30     	; 0xfc2 <__ultoa_invert+0x86>
     fa4:	c9 f7       	brne	.-14     	; 0xf98 <__ultoa_invert+0x5c>
     fa6:	f6 cf       	rjmp	.-20     	; 0xf94 <__ultoa_invert+0x58>
     fa8:	46 2f       	mov	r20, r22
     faa:	4f 70       	andi	r20, 0x0F	; 15
     fac:	40 5d       	subi	r20, 0xD0	; 208
     fae:	4a 33       	cpi	r20, 0x3A	; 58
     fb0:	18 f0       	brcs	.+6      	; 0xfb8 <__ultoa_invert+0x7c>
     fb2:	49 5d       	subi	r20, 0xD9	; 217
     fb4:	31 fd       	sbrc	r19, 1
     fb6:	40 52       	subi	r20, 0x20	; 32
     fb8:	41 93       	st	Z+, r20
     fba:	02 d0       	rcall	.+4      	; 0xfc0 <__ultoa_invert+0x84>
     fbc:	a9 f7       	brne	.-22     	; 0xfa8 <__ultoa_invert+0x6c>
     fbe:	ea cf       	rjmp	.-44     	; 0xf94 <__ultoa_invert+0x58>
     fc0:	b4 e0       	ldi	r27, 0x04	; 4
     fc2:	a6 95       	lsr	r26
     fc4:	97 95       	ror	r25
     fc6:	87 95       	ror	r24
     fc8:	77 95       	ror	r23
     fca:	67 95       	ror	r22
     fcc:	ba 95       	dec	r27
     fce:	c9 f7       	brne	.-14     	; 0xfc2 <__ultoa_invert+0x86>
     fd0:	00 97       	sbiw	r24, 0x00	; 0
     fd2:	61 05       	cpc	r22, r1
     fd4:	71 05       	cpc	r23, r1
     fd6:	08 95       	ret
     fd8:	9b 01       	movw	r18, r22
     fda:	ac 01       	movw	r20, r24
     fdc:	0a 2e       	mov	r0, r26
     fde:	06 94       	lsr	r0
     fe0:	57 95       	ror	r21
     fe2:	47 95       	ror	r20
     fe4:	37 95       	ror	r19
     fe6:	27 95       	ror	r18
     fe8:	ba 95       	dec	r27
     fea:	c9 f7       	brne	.-14     	; 0xfde <__ultoa_invert+0xa2>
     fec:	62 0f       	add	r22, r18
     fee:	73 1f       	adc	r23, r19
     ff0:	84 1f       	adc	r24, r20
     ff2:	95 1f       	adc	r25, r21
     ff4:	a0 1d       	adc	r26, r0
     ff6:	08 95       	ret

00000ff8 <__prologue_saves__>:
     ff8:	2f 92       	push	r2
     ffa:	3f 92       	push	r3
     ffc:	4f 92       	push	r4
     ffe:	5f 92       	push	r5
    1000:	6f 92       	push	r6
    1002:	7f 92       	push	r7
    1004:	8f 92       	push	r8
    1006:	9f 92       	push	r9
    1008:	af 92       	push	r10
    100a:	bf 92       	push	r11
    100c:	cf 92       	push	r12
    100e:	df 92       	push	r13
    1010:	ef 92       	push	r14
    1012:	ff 92       	push	r15
    1014:	0f 93       	push	r16
    1016:	1f 93       	push	r17
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	ca 1b       	sub	r28, r26
    1022:	db 0b       	sbc	r29, r27
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	f8 94       	cli
    1028:	de bf       	out	0x3e, r29	; 62
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	cd bf       	out	0x3d, r28	; 61
    102e:	09 94       	ijmp

00001030 <__epilogue_restores__>:
    1030:	2a 88       	ldd	r2, Y+18	; 0x12
    1032:	39 88       	ldd	r3, Y+17	; 0x11
    1034:	48 88       	ldd	r4, Y+16	; 0x10
    1036:	5f 84       	ldd	r5, Y+15	; 0x0f
    1038:	6e 84       	ldd	r6, Y+14	; 0x0e
    103a:	7d 84       	ldd	r7, Y+13	; 0x0d
    103c:	8c 84       	ldd	r8, Y+12	; 0x0c
    103e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1040:	aa 84       	ldd	r10, Y+10	; 0x0a
    1042:	b9 84       	ldd	r11, Y+9	; 0x09
    1044:	c8 84       	ldd	r12, Y+8	; 0x08
    1046:	df 80       	ldd	r13, Y+7	; 0x07
    1048:	ee 80       	ldd	r14, Y+6	; 0x06
    104a:	fd 80       	ldd	r15, Y+5	; 0x05
    104c:	0c 81       	ldd	r16, Y+4	; 0x04
    104e:	1b 81       	ldd	r17, Y+3	; 0x03
    1050:	aa 81       	ldd	r26, Y+2	; 0x02
    1052:	b9 81       	ldd	r27, Y+1	; 0x01
    1054:	ce 0f       	add	r28, r30
    1056:	d1 1d       	adc	r29, r1
    1058:	0f b6       	in	r0, 0x3f	; 63
    105a:	f8 94       	cli
    105c:	de bf       	out	0x3e, r29	; 62
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	cd bf       	out	0x3d, r28	; 61
    1062:	ed 01       	movw	r28, r26
    1064:	08 95       	ret

00001066 <_exit>:
    1066:	f8 94       	cli

00001068 <__stop_program>:
    1068:	ff cf       	rjmp	.-2      	; 0x1068 <__stop_program>
